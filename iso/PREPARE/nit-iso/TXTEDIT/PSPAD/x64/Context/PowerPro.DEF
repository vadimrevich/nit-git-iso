; PSPad clip definition file for PowerPro 5.2

; Author: Nusret Vardarman 
; Email : vardarman at email dot cz (please send comments, additions or corrections))
; Revision: 12/04/2017

; * Contains all variables, commands and plugin keywords of PowerPro scripts
; * GROUPED KEYWORDS: by keyword function, initiate "Show clips" without a keyword or selection to see numbered content list then enter number to reach the specific group listing
; * SORTED KEYWORDS: select a keyword (without dot) and initiate "Show clips" to see the related information
; * AUTOCOMPLETE KEYWORDS

; Clips Structure:
; * CONTENTS                 : list of sections (space before section number ensures it is visible at the top)
; * SECTION NAME             : 4 spaces before name ensures it is listed as first line of section
; * INTERNAL VARIABLES       : 2 spaces before keyword to sort them at the beginning of the list
; * INTERNAL COMMANDS
; * EXTERNAL PLUGIN COMMANDS : external plugin names in capital letters

; TODO populate possible entry values in macro def
; TODO chk pprofunctions.txt structure
; TODO display [ ] | in def line ???
; TODO [Tree content] section ???

; TODO finish plugin command CONTEXT/AUTOCOMPLETE KEYWORDS listings
; CONTEXT
; ==========================
; ASPELL
; BINARY
; CONSOLE
; CRYPTO
; DDE
; DLL
; G4C
; GIRDER
; KEYTRAP
; MOUSEGESTURE
; MOUSETRAP
; POP3
; PPROICL
; REGEX
; UNICODE
; WINAMPC

; AUTOCOMPLETE KEYWORDS
; ==========================
; DDE
; G4C
; GIRDER
; MOUSEGESTURE
; MAIL_NOT_RAS
; PIPAPPPLUGINS
; WINAMP

; [name |x description]*shortcut
;  x= M-Maroon    R-Red    N-Navy    B-Blue    P-Purple    F-Fuchsia    G-Green    D-Dark gray

; Macro
; %control%=@x caption,text,default,options,delimiter,dialog_type
; 	@-- = Separator	@C = Combo box	@D = Date dialog	@E = Text box	@F = Font selection dialog	@K = Checkbox	@L = Colour picker dialog	@O = File Open dialog
;	@P = Picture selection dialog	@S = Directory selection dialog	    @T = Topstyle

; GROUPED KEYWORDS (initiate "Show clips" without a selection, cursor should not be inside or after any keyword)

[Macro definition]
%align%=@C align =,,center,center;left;right;justify,"
%barname%=@E Bar name:
%autohide%=@E Autohide (msec):
%BMPfileName%=@O File name (.bmp):,,,BMP files (*.bmp)|*.bmp,

[   0  CONTENTS (enter number to list a section) |D]
[   1  BAR/MENU |G ]
[   3  CLIPBOARD |G ]
[   4a COMMAND LIST |G ]
[   4b COMMAND LIST - Items |G ]
[   4c COMMAND LIST - Item Layout |G ]
[   4d COMMAND LIST - Item Controls |G ]
[   4e COMMAND LIST - Predefined Names |G ]
[   5  DATABASE |G ]
[   5  DESKTOPS |G ]
[   7  FILE SYSTEM |G ]
[   8  SAVE SETTINGS |G ]
[   9  USER INPUT |G ]
[ 10  INTERNET |G ]
[ 11  KEYBOARD & MOUSE |G ]
[ 12  KEYS |G Can send max. 1000 keyboard clicks]
[ 13  MESSAGE |G ]
[ 15  NETWORK |G ]
[ 16  NOTES |G ]
[ 17  POWERPRO |G ]
[ 18  SCREEN & DESKTOP |G ]
[ 19a SCRIPT - Predefined global variables |G ]
[ 19b SCRIPT - Variables |G ]
[ 19c SCRIPT - Maps |G max.50 Maps ]
[ 19d SCRIPT - Vectors |G max.50 Vectors (can be increased by script)]
[ 19e SCRIPT - Commands |G ]
[ 19f SCRIPT - Numbers |G ]
[ 19g SCRIPT - Strings |G ]
[ 19h SCRIPT - Debugging |G ]
[ 19i SCRIPT - Events |G ]
[ 19j SCRIPT - Other Plugins |G ]
[ 20  SOUND & MEDIA |G ]
[ 22  SYSTEM |G ]
[ 22  SYSTEM - COM Plugin |G ]
[ 22  SYSTEM - Registry |G ]
[ 22  SYSTEM - Resources |G ]
[ 23  TIME |G ]
[ 24  WAIT |G ]
[ 25  WINDOW |G ]
[ 26  WINDOW - Dimensions |G ]
[ 27  WINDOW - Handles |G ]
[ 28  WINDOW - Information |G ]
[ 29  WINDOW - Manipulation |G ]
[ 30  WINDOW - Childs |G ]
[ 33  WINDOW - Controls |G ]
[ 34  OPERATORS |G ]

[   0  CONTENTS (enter number to list a section) |D]
[ 11  BAR/MENU |G ]
[ 12  CLIPBOARD |G ]
[ 20  COMMAND LIST |G ]
[ 21  COMMAND LIST - Items |G ]
[ 22  COMMAND LIST - Item Layout |G ]
[ 23  COMMAND LIST - Item Controls |G ]
[ 24  COMMAND LIST - Predefined Names |G ]
[ 30  DATABASE |G ]
[ 31  DESKTOP & SCREEN |G ]
[ 32  DESKTOPS (multiple)|G ]
[ 33  FILE SYSTEM |G ]
[ 34  INTERNET |G ]
[ 35  KEYBOARD & MOUSE |G ]
[ 36  KEYS |G Can send max. 1000 keyboard clicks]
[ 37  MESSAGE |G ]
[ 38  NETWORK |G ]
[ 39  NOTES |G ]
[ 40  POWERPRO |G ]
[ 50  SCRIPT - Predefined global variables |G ]
[ 51  SCRIPT - Variables |G ]
[ 52  SCRIPT - Maps |G max.50 Maps ]
[ 53  SCRIPT - Vectors |G max.50 Vectors (can be increased by script)]
[ 54  SCRIPT - Commands |G ]
[ 55  SCRIPT - Numbers |G ]
[ 56  SCRIPT - Strings |G ]
[ 57  SCRIPT - Debugging |G ]
[ 58  SCRIPT - Events |G ]
[ 59  SCRIPT - Operators |G ]
[ 19j SCRIPT - Other Plugins |G ]
[ 60  SAVE SETTINGS |G ]
[ 61  SOUND |G ]
[ 62  SYSTEM |G ]
[ 70  SYSTEM - COM Plugin |G ]
[ 71  SYSTEM - Registry |G ]
[ 72  SYSTEM - Resources |G ]
[ 80  TIME |G ]
[ 81  USER INPUT |G ]
[ 82  WAIT |G ]
[ 90  WINDOW |G ]
[ 91  WINDOW - Dimensions |G ]
[ 92  WINDOW - Handles |G ]
[ 93  WINDOW - Information |G ]
[ 94  WINDOW - Manipulation |G ]
[ 95  WINDOW - Childs |G ]
[ 96  WINDOW - Controls |G ]

[==================================== ]
[1    BAR/MENU |G ]
[1  LastButtonType | Returns last clicked button type: 0(normal) | 1(active) | 2(tray) | 3(folder)]
LastButtonType
[1  OnErrorSetting | ]
OnErrorSetting
[1  SubBarName | Returns name of current subbar]
SubBarName
[1 Bar.Close("barname") | Close a bar and remove it from memory.]
Bar.Close("barname")
[1 Bar.Format("barname", "autohide", n) | Set interval before automatic hiding to n ms. -n = toggle noautohide/autohide. 0 = noautohide]
Bar.Format("barname", "autohide", n)
[1 Bar.Format("barname", "back", "file.bmp") | Change the background to "file.bmp"]
Bar.Format("barname", "back", "file.bmp")
[1 Bar.Format("barname", "back2", "file.bmp") | Use back and back2 to alternate between two backgrounds each time the command is executed.]
Bar.Format("barname", "back2", "file.bmp")
[1 Bar.Format("barname", "back", "none") | Remove the background of bar]
Bar.Format("barname", "back", "none")
[1 Bar.Format("barname", "position", n) | Set the bar position to the nth position.]
Bar.Format("barname", "position", n)
[1 Bar.Format("barname", "refresh") | Close and reopen bar.]
Bar.Format("barname", "refresh")
[1 Bar.Hide("barname") | Hide a bar but keep it in memory (for faster reshow).]
Bar.Hide("barname")
[1 Bar.HideShow("barname") | Hide a bar if visible; show it otherwise.]
Bar.HideShow("barname")
[1 Bar.Keys("barname") | Ready a bar to receive keystrokes that can navigate bar buttons.]
Bar.Keys("barname")
[1 Bar.SelectSubBar("barname") | Show a subbar.]
Bar.SelectSubBar("barname")
[1 Bar.SelectSubBarToButton("barname") | Show a subbar aligned to a bar.]
Bar.SelectSubBarToButton("barname")
[1 Bar.SelectSubBarToMouse("barname") | Show a subbar at the mouse.]
Bar.SelectSubBarToMouse("barname")
[1 Bar.Show("*keyword", "barname") | Show a bar. barname is the name of the command list.]
Bar.Show("*vertical|*horizontal|*fromtop|*frombottom|*fromleft|*fromright", "barname")
[1 Bar.Show("*move", "barname") | Show a bar and positions the mouse over the bar.]
Bar.Show("*move", "barname")
[1 Bar.ToButton(index, "barname") | Temporarily move bar to mouse and show it if hidden. Floating position only.]
Bar.ToButton(index, "barname")
[1 Bar.ToCursor("barname") | Temporarily move bar to text cursor and show it if hidden.]
Bar.ToCursor("barname")
[1 Bar.ToMouse("barname") | Temporarily move bar to mouse and show it if hidden. Floating position only.]
Bar.ToMouse("barname")
[1 Cl.TaskbarBarUpdate(flag) | Automatic updates of Taskbar bar from cl functions, 0=Stop 1=Restart -1=Reverse]
Cl.TaskbarBarUpdate(flag)
[1 Exec.BottomMost(n) | If n not 0, all non-topmost bars will be bottommost.]
Exec.BottomMost(n)
[1 Exec.MaxExplorerMenuWidth(n) | Set max width of label in 'Menu Explorer'.]
Exec.MaxExplorerMenuWidth(n)
[1 Exec.ShowBarInfo | Show info on bars and display monitors. See a list of displays, their names/numbers.]
Exec.ShowBarInfo
[1 Exec.ClearRecentExplorer | Clear list of windows shown by *Menu Explorer.]
Exec.ClearRecentExplorer
[1 Exec.ContextMenu | Show right click menu of window under mouse.]
Exec.ContextMenu
[1 Exec.RefreshImage | Refresh in memory copy of the image file used in skin or as bar/menu background.]
Exec.RefreshImage
[1 *Format BarVerticalLine | Draw a vertical line in a bar.]
*Format BarVerticalLine
[1 *Format Context captionlist | Start a menu section or shows a bar depending on the active window.]
*Format Context captionlist
[1 *Format ContextIf expression | Start a menu section or shows a bar depending on the active window.]
*Format ContextIf expression
[1 *Format Drag | Drag bar with this button.]
*Format Drag
[1 *Format EndContext | End portion of menu depending on active window.]
*Format EndContext
[1 *Format EndSubBar |]
*Format EndSubBar
[1 *Format EndSubMenu | End the submenu. You can nest submenus up to 4 levels deep.]
*Format EndSubMenu
[1 *Format Item | Change colors and text associated with menu or bar item.]
*Format Item
[1 *Format MaxColumn n | Max.number of rows in a column.]
*Format MaxColumn n
[1 *Format NewBarRow | Start a new row in a bar.]
*Format NewBarRow
[1 *Format NewBarRowLine | Start a new row in a bar and draw separator line.]
*Format NewBarRowLine
[1 *Format NewColumn | Start a new column in a menu.]
*Format NewColumn
[1 *Format NewColumnLine | Start a new column with a separating vertical line.]
*Format NewColumnLine
[1 *Format Separator | Insert a horizontal separator in a menu.]
*Format Separator
[1 *Format StartSubBar | Following items in the list appear in a submenu.]
*Format StartSubBar
[1 *Format StartSubMenu | Following items in the list appear in a submenu, max.4 levels deep.]
*Format StartSubMenu
[1 *Menu Explorer sort command | Show folders recently accessed with Explorer.]
*Menu Explorer "Name|Date" "command"
[1 *Menu Folder folderpath | Create a menu from a folder.]
*Menu Folder folderpath
[1 *Menu Recent | Show a menu of recently executed commands.]
*Menu Recent
[1 *Menu RecentCommands | Displays a menu of the last 10 programs you have run by any means. (only, if "Track windows for *Menu RecentCommands" is checked in Command Lists >Setup >All Menus)]
*Menu RecentCommands
[1 *Menu Show commandlist | Show a COMMAND LIST as a menu. Use *Format to insert submenus and separators.]
*Menu Show commandlist CenterUnderMouse|CenterScreen|Offset n1 n2|Screen n1 n2|HorButton|HorButtonCenter|VerButton|Cursor
[1 *Menu ShowAtButton commandlist | Show a COMMAND LIST as a menu aligned to last button pressed.]
*Menu ShowAtButton commandlist
[1 *Menu ShowAtCursor commandlist | Show a COMMAND LIST as a menu aligned to text cursor.]
*Menu ShowAtCursor commandlist
[1 *Menu ShowFile strFilePath | Show a file as a menu which can contain *Format commands.]
*Menu ShowFile strFilePath
[1 *Menu StartMenu | Show Windows start menu at mouse cursor. Alternatively, *Menu Folder StartMenu.]
*Menu StartMenu
[1 *Menu Tray | Show tray icons as menu.]
*Menu Tray
[1 MISCPLUGIN.Show_Menu("title", "menuitems") | Create a menu with optional title and submenus.]
MISCPLUGIN.Show_Menu("title", "Item1\nItem2\nsep\nSUB=xxx\nSubItem1\nENDSUB")
[1 VEC.ShowMenu(v, maxtext, pos, autoclose, color, xoff, yoff) | Create a menu built from entries of v. Can use *sep/*colsep/*colsepline.]
Win.LastMouse(1)
VEC.ShowMenu(v, maxtext, pos, autoclose, color, xoff, yoff)
butMouse = Win.LastMouse(0)

[3    CLIPBOARD |G ]
[3  Clip | Returns first line of clipboard text.]
Clip
[3  ClipTrackOn | Returns 1 if clip tracking is on; 0 otherwise]
ClipTrackOn
[3  LastClipName | Returns file name of last captured clipboard item.]
LastClipName
[3  LastClipPath | Returns full path to last captured clipboard item.]
LastClipPath
[3 *Clip Capture | Toggle capture off/on. Optionally add folder name.]
*Clip Capture
[3 *Clip ClearClipboard | Clear clipboard.]
*Clip ClearClipboard
[3 *Clip ClearRecent | Clear recent list of captured clips.]
*Clip ClearRecent
[3 *Clip Copy | Send Ctrl-C to foreground window for copy.]
*Clip Copy
[3 *Clip CopyThenToFile | Send Ctrl+C then copy clipboard to file.]
*Clip CopyThenToFile fullpathtofile
[3 *Clip Cut | Send Ctrl-X to foreground window for cut.]
*Clip Cut
[3 *Clip Delete | Delete selected entry from clipboard history.]
*Clip Delete
[3 *Clip File | Copy file to clipboard.]
*Clip File
[3 *Clip FileIPaste | Copy file to clipboard then paste using Ctrl+Ins]
*Clip FileIPaste fullpathtofile
[3 *Clip FilePaste | Copy file to clipboard then paste using Ctrl+V.]
*Clip FilePaste fullpathtofile
[3 *Clip Menu | Show menu of clips, select an entry to put on clipboard.]
*Clip Menu
[3 *Clip MenuIPaste | Show menu of clips then paste selected entry using Ctrl+Ins.]
*Clip MenuIPaste
[3 *Clip MenuPaste | Show menu of clips then paste selected entry with Ctrl+V.]
*Clip MenuPaste
[3 *Clip Paste | Send Ctrl-V to foreground window for paste.]
*Clip Paste
[3 *Clip ShortDate | Put date on clipboard in short format.]
*Clip ShortDate
[3 *Clip LongDate | Put date on clipboard in long format.]
*Clip LongDate
[3 *Clip Reattach | Put PowerPro at front of applications tracking clipboard.]
*Clip Reattach
[3 *Clip Time | Put time on clipboard.]
*Clip Time
[3 *Clip Text | Put following text on clipboard.]
*Clip Text text
[3 *Clip TextAppend | Append following text to clipboard. if no text, newline appended.]
*Clip TextAppend text
[3 *Clip TextPaste | Put entered text on clipboard regardless off CapsLock state and then paste with Ctrl+V]
*Clip TextPaste text
[3 *Clip ToFile | Copy clipboard to text file.]
*Clip ToFile fullpathtofile
[3 *Clip ToFileAppend | Append clipboard to text file.]
*Clip ToFileAppend fullpathtofile
[3 AU3.ClipGet() | Returns a string containing the text on the clipboard.]
AU3.ClipGet()
[3 AU3.ClipPut("text") | Write text to the clipboard.]
AU3.ClipPut("text")
[3 CLIP.Copy | Copy selected text in active window to clipboard.]
CLIP.Copy
[3 CLIP.Cut | Cut selected text in active window to clipboard.]
CLIP.Cut
[3 CLIP.Paste | Paste clipboard to active window.]
CLIP.Paste
[3 CLIP.Append("text") | Append text to the clipboard.]
CLIP.Append("text")
[3 CLIP.BMPToFile("filepath") | Write the bitmap on the clipboard to the file path.]
CLIP.BMPToFile("filepath")
[3 CLIP.Clear | Clear the clipboard.]
CLIP.Clear
[3 CLIP.FromFile("filepath") | Copy file to clipboard.]
CLIP.FromFile("filepath")
[3 CLIP.FromFileAppend("filepath") | Append file to clipboard.]
CLIP.FromFileAppend("filepath")
[3 CLIP.Get | Returns the text on the clipboard.]
CLIP.Get
[3 CLIP.GetHTML | Returns HTML format on clipboard (as PowerPro text string)]
CLIP.GetHTML
[3 CLIP.GetRTF | Returns rtf text on clipboard (as PowerPro text string)]
CLIP.GetRTF
[3 CLIP.GetSaveLoadFolder() | Returns default folder for clip.save and clip.load.]
CLIP.GetSaveLoadFolder()
[3 CLIP.HasFormat("format") | Returns 1 if the specified format is available on the clipboard.]
CLIP.HasFormat("BITMAP|DIB|DIBV5|DIF|ENHMETAFILE|HDROP|LOCALE|METAFILEPICT|OEMTEXT|PALETTE|RIFF|SYLK|TEXT|WAVE|TIFF|UNICODETEXT")
[3 CLIP.IgnoreNext | Next item added to clipboard will not be captured by PowerPro clip capture.]
CLIP.IgnoreNext
[3 CLIP.Length | Returns length of clipboard.]
CLIP.Length
[3 CLIP.ListFormats | Returns a blank-separated list of the formats on the clipboard.]
CLIP.ListFormats
[3 CLIP.Load("filename", "folderpath") | Load clipboard contents saved by clip.save.]
CLIP.Load("filename", "folderpath")
[3 CLIP.Save("filename", "folderpath") | Save contents of clipboard in all formats to filename in folderpath.]
CLIP.Save("filename", "folderpath")
[3 CLIP.Set("text", capture) | Set the clipboard. capture=1 (clip captured by PowerPro)]
CLIP.Set("text", 0|1)
[3 CLIP.SetHTML("htmltext", plain, capture, onlyhtml) | Set the clipboard to the html text. capture=1 (clip captured by PowerPro), onlyhtml=1 (only the html element of the clipboard is changed)]
CLIP.SetHTML("htmltext", plain, 0|1, 0|1)
[3 CLIP.SetRTF("rtftext", plain, capture, onlyrtf) | Set the clipboard to the rtf text. capture=1 (clip captured by PowerPro), onlyrtf=1 (only the rtf element of the clipboard is changed)]
CLIP.SetRTF("rtftext", plain, 0|1, 0|1)
[3 CLIP.SetSaveLoadFolder("folderpath") | Set default folder for clip.save and clip.load.]
CLIP.SetSaveLoadFolder("folderpath")
[3 CLIP.SetPaste("text") | Set text to the clipboard, then send Ctrl-V.]
CLIP.SetPaste("text")
[3 CLIP.ToFile("filepath", noErr) | Put clipboard into file filepath. noErr=1 (no error message)]
CLIP.ToFile("filepath", 0|1)
[3 CLIP.ToFileAppend("filepath", noErr) | Append clipboard to file filepath. noErr=1 (no error message)]
CLIP.ToFileAppend("filepath", 0|1)
[3 PPGEORGY.Clpbrd_To_Upper | Change all letters in clipboard to UPPER-CASE.]
PPGEORGY.Clpbrd_To_Upper
[3 PPGEORGY.Clpbrd_To_Lower | Change all letters in clipboard to lower-case.]
PPGEORGY.Clpbrd_To_Lower
[3 PPGEORGY.Clpbrd_To_Russian | Change text in clipboard to Russian, using phonetic layout.]
PPGEORGY.Clpbrd_To_Russian
[3 PPGEORGY.Clpbrd_To_English | Change text in clipboard to English, using phonetic layout.]
PPGEORGY.Clpbrd_To_English
[3 PPGEORGY.Clpbrd_E2r | Fix text typed in wrong layout in clipboard.]
PPGEORGY.Clpbrd_E2r
[3 PPGEORGY.Clpbrd_R2e | Fix text typed in wrong layout in clipboard.]
PPGEORGY.Clpbrd_R2e
[3 PPGEORGY.Clpbrd_To_Unicode | Show UNICODE codes of text in clipboard.]
PPGEORGY.Clpbrd_To_Unicode
[3 PPGEORGY.Clpbrd_Reverse | Reverse text order in clipboard.]
PPGEORGY.Clpbrd_Reverse

[4a    COMMAND LIST |G ]
[4a Configure.CommandLists | Start pproconf at the CommandLists tab.]
Configure.CommandLists
[4a Configure.CommandLists("barname") | Start pproconf at the CommandLists tab at specified bar. Use (?*"?my bar"*) with spaces in bar names  ]
Configure.CommandLists("barname")
[4a Cl.AddProperties("clname", "proplines") | Same as NewProperties, except that properties are added to already existing ones.]
Cl.AddProperties("clname", "proplines")
[4a Cl.ButtonFromPoint(x, y) | Returns zero-based button index under screen coordinates x,y. -1 if not button.]
Cl.ButtonFromPoint(x, y)
[4a Cl.ButtonUnderMouse() | If PowerPro bar is under mouse, returns zero-based button index. -1 otherwise.]
Cl.ButtonUnderMouse()
[4a Cl.Close("clname") | Closes bar]
Cl.Close("clname")
[4a Cl.CopyProperties("sourceclname", "targetclname") | Copies all properties from first cl to the second.]
Cl.CopyProperties("sourceclname", "targetclname")
[4a Cl.Create("clname") | Creates a new Command List with name given by the clname.]
Cl.Create("clname")
[4a Cl.Create("clname", 1) | If list clname exists, all of its items are removed, for re-use.]
Cl.Create("clname", 1)
[4a Cl.Exists("clname") | Returns 1=command list exists in PCF, 2=exists but is not part of the PCF, 0=not found]
Cl.Exists("clname")
[4a Cl.Get("clname") | Returns handle to existing clname (can be used to call other cl services), empty string otherwise.]
Cl.Get("clname")
[4b Cl.GetActiveButtons("clname") | Get number of currently visible active buttons.]
Cl.GetActiveButtons("clname")
[4a Cl.GetBackColor("clname") | Returns background RGB color for ordinary buttons.]
Cl.GetBackColor("clname")
[4a Cl.GetBackground("clname") | Returns background file name.]
Cl.GetBackground("clname")
[4a Cl.GetBarHandle(("clname") | Gets window handle for showing bar. This can then be used with win plugin.]
Cl.GetBarHandle("clname")
[4a Cl.GetClFlag("clname", "flagname") | Returns 1 or 0 indicating whether or not the flagname is set for the configuration.]
Cl.GetClFlag("clname", "ToolTips|BarSize|Shadow|MouseThrough|AutoShowBar|MenuIconSmall|ToolTipsMenuText|MenuNoMaxText|TopMost|SameSize|Vertical|3DFrame|Border|No3DColor|TextUnder|TextRotate|TextCenter|RightIcon|TextVertical|BumpWithin|BumpWithin|NoFlicker|NoFlicker|HoverClickMenu|HoverClick|ActiveOnlyThis|Activesubbar|CheckMenu")
[4a Cl.GetFolderButtons("clname") | Returns the folder buttons file.]
Cl.GetFolderButtons("clname")
[4a Cl.GetGradient("clname") | Returns the gradient setting 0 to 255.]
Cl.GetGradient("clname")
[4a Cl.GetHeight("clname") | Returns the default button height.]
Cl.GetHeight("clname")
[4a Cl.GetHideAfter("clname") | Returns the interval for hiding a list.]
Cl.GetHideAfter("clname")
[4a Cl.GetHoffset("clname") | Returns the horizontal offset.]
Cl.GetHoffset("clname")
[4a Cl.GetHoverColor("clname") | Returns background RGB color for hovered-over buttons.]
Cl.GetHoverColor("clname")
[4a Cl.GetHoverGradient("clname") | Returns the gradient settings as integer 0 to 7.]
Cl.GetHoverGradient("clname")
[4a Cl.GetHoverTextColor("clname") | Returns text RGB color for hovered-over buttons.]
Cl.GetHoverTextColor("clname")
[4a Cl.GetLastBar() | Returns name of bar where last button was pressed; returns '' if no button yet pressed.]
Cl.GetLastBar()
[4a Cl.GetLastMenu() | Returns name of command list last displayed as menu.]
Cl.GetLastMenu()
[4a Cl.GetLastMenuMouse() | Returns R if right command selected from last menu; L otherwise.]
Cl.GetLastMenuMouse()
[4a Cl.GetLastMenuSel() | Returns index of last command list item selected from last displayed menu; returns '' if nothing selected.]
Cl.GetLastMenuSel()
[4a Cl.GetLastMouse("barname") | Returns L, R, or M to indicate which mouse button clicked the last button.]
Cl.GetLastMouse("barname")
[4a Cl.GetLastPressed("barname") | Returns the last pressed button.]
Cl.GetLastPressed("barname")
[4a Cl.GetLastPressedType("barname") | Returns P=pressed, D=dropped, or h=hovered.]
Cl.GetLastPressedType("barname")
[4a Cl.GetMaxText("clname") | Returns the maximum text length setting for a command list.]
Cl.GetMaxText("clname")
[4a Cl.GetNumActive("clname") | Returns the maximum number of active buttons.]
Cl.GetNumActive("clname")
[4a Cl.GetPosition("clname") | Returns the position name as used in 'Properties' section of the text configuration ini files.]
Cl.GetPosition("clname")
[4a Cl.GetPressColor("clname") | Returns background RGB color for pressed buttons.]
Cl.GetPressColor("clname")
[4a Cl.GetPressGradient("clname") | Returns the gradient settings as integer 0-7.]
Cl.GetPressGradient("clname")
[4a Cl.GetPressTextColor("clname") | Returns text RGB color for pressed buttons.]
Cl.GetPressTextColor("clname")
[4a Cl.GetRoundBar("clname") | Returns the rounding for bars or buttons.]
Cl.GetRoundBar("clname")
[4a Cl.GetRoundBtn("clname") | Returns the rounding for bars or buttons.]
Cl.GetRoundBtn("clname")
[4a Cl.GetRoundWhich("clname") | Returns the rounding for bars or buttons.]
Cl.GetRoundWhich("clname")
[4a Cl.GetShowIfBump("clname") | Returns the show-if-bump edge name as used in 'Properties' section of the text configuration ini files.]
Cl.GetShowIfBump("clname")
[4a Cl.GetSlideFrom("clname") | Returns the slide-from direction as used in 'Properties' section of the text configuration ini files.]
Cl.GetSlideFrom("clname")
[4a Cl.GetTextColor("clname") | Returns text RGB color for ordinary buttons.]
Cl.GetTextColor("clname")
[4a Cl.GetTransparent("clname") | Returns the transparency setting 0 to 255.]
Cl.GetTransparent("clname")
[4a Cl.GetVOffset("clname") | Returns the vertical offset.]
Cl.GetVoffset("clname")
[4a Cl.Hide("clname") | Hides bar.]
Cl.Hide("clname")
[4a Cl.HideShow("clname") | Reverses hidden/shown status of bar.]
Cl.HideShow("clname")
[4a Cl.IsPCF("clname") | Returns 1 or 0 indicating whether or not the command list is kept in the PCF.]
Cl.IsPCF("clname")
[4a Cl.KeepInPCF(keepflag) | Changes whether command list is saved in PCF, keepflag=1 means it is saved.]
Cl.KeepinPCF(0|1)
[4a Cl.Keys("clname") | Readies bar to receive navigation keys.]
Cl.Keys("clname")
[4a Cl.Length("clname") | Returns the zero-based number of elements in the command list.]
Cl.Length("clname")
[4a Cl.NameFromIndex(i) | Returns name of i th clist, zero-based numbering; order is arbitrary.]
Cl.NamefromIndex(i)
[4a Cl.NewProperties("clname", proplines) | Replaces properties for clname with those given in proplines.]
cl.NewProperties("clname", "\r;;+
Format1 = properties \r;;+
Format2 = properties \r;;+
Format3 = properties \r;;+
Format4 = properties \r;;+
")

;; ===========================================================================
;; ALL PROPERTIES: (Replace above "properties" with below keywords seperated by space then remove this list)
 Back: 0-255 0-255 0-255
 Hover: 0-255 0-255 0-255
 Pressed: 0-255 0-255 0-255
 Text: 0-255 0-255 0-255
 HoverText: 0-255 0-255 0-255
 PressText: 0-255 0-255 0-255
 FontName = fontname
 FontInfo = Weight:400 Size:8
 HoverGradient: 0-7
 HoverGradientReverse
 PressGradient: 0-7
 PressGradientReverse
 Tooltips
 TTItem0
 UseTheme
 IconSize: None|8|12|16|24|32|64|96|133|256
 MaxText: x
 MenuNoMaxText
 MenuIconSmall
 BarIcons
 ToolTipsMenuText
 BackBMP = *|None|filepath
 Position: Floating|Locked|LeftCaption|MiddleCaption|RightCaption|LeftEdgeCurrentSize|RightEdgeCurrentSize|TopEdgeCurrentSize|BottomEdgeCurrentSize|Taskbar|TaskbarNoStart|GixedTopRight|GixedTopRightOffset|GixedTopCenter|GixedTopLeft|GixedBottomLeft|GixedBottomCenter|GixedBottomRight|LeftOfActive|RightOfActive|BelowActive|AboveActive|GixedRightCenter|GixedCenterLeft|LeftEdgeFullScreen|RightEdgeFullScreen|TopEdgeFullScreen|BottomEdgeFullScreen|BelowMenuBar|BelowMenuBar2
 RLeft: -1000000 - 1000000
 RTop: -1000000 - 1000000
 RRight: -1000000 - 1000000
 RBottom: -1000000 - 1000000
 Height: x
 HOffset: x/-x
 VOffset: x/-x
 HideAfter: x
 ShowIfBump: None|NearestEdge|TopEdge|BottomEdge|RightEdge|LeftEdge
 SlideFrom: FromLeft|GromRight|Horizontal|Vertical|GromBottom|GromTop|None
 RoundBar: 1-7
 RoundWhich: 0-4
 Marker
 BumpWithin
 RoundBtn: 0-7
 Border
 3DFrame
 No3DColor
 NoFlicker
 Vertical
 HoverClick
 HoverClickMenu
 Flat
 FlatFlat
 SameSize
 AllVDesks
 TopMost
 BarSize
 PixelBlendOver
 PixelBlendInto
 MouseThrough
 RightIcon
 Shadow
 ActiveSubBar
 Transparent: 0-255
 Gradient: 0-255
 VerticalGradient
 TextVertical
 TextCenter
 TextRotate
 TextUnder
 Monitor: x
 ActiveOnlyThis
 Raised
 CheckMenu
 AutoShowBar
 Left: x
 Top: x
 Right: x
 Bottom: x
;; ===========================================================================
[4a Cl.NumCLists | Returns number of command lists (including both PCF and nonPCF).]
Cl.NumCLists
[4a Cl.ReDisplay("clname") | If clname is a bar, redraws it without closing and opening the bar.]
Cl.ReDisplay("clname")
[4a Cl.Refresh("clname") | If clname is a bar, redraws it by closing and opening the bar.]
Cl.Refresh("clname")
[4a Cl.RemoveAll("clname") | Remove all items in the command list. clname closed but not destroyed.]
Cl.RemoveAll("clname")
[4a Cl.SelectSubBar("clname", "@subbarname") | Shows named subbar; the @ must be present.]
Cl.SelectSubBar("clname", "@subbarname")
[4a Cl.SetAsAutorun("clname") | Set clname as the source for autorun command list.]
Cl.SetAsAutorun("clname")
[4a Cl.SetAsTray("clname") | Set clname as the source for tray icons.]
Cl.SetAsTray("clname")
[4a Cl.SetBackground("clname", "filepath", noclose) | Set the background to the filepath. noclose = 1 (do not close and re-open bar)]
Cl.SetBackground("clname", "filepath", 0|1)
[4a Cl.SetHideAfter("clname", interval) | Set the interval for hiding a list. Use 0 for no hide. Use -interval to toggle 'interval/no hide'.]
Cl.SetHideAfter("clname", interval)
[4a Cl.SetMaxtext("clname", charcount) | Set the maximum number of characters shown on each button or menu item.]
Cl.SetMaxtext("clname", charcount)
[4a Cl.SetRect("clname", left, top ,right, bottom) | Set position of command list (floating or locked). If already showing, it is moved/resized.]
Cl.SetRect("clname", left, top ,right, bottom)
[4a Cl.Show("clname") | Show command list as bar.]
Cl.Show("clname")
[4a Cl.ShowMenu("clname", position) | Show command list as menu. The position argument can be omitted.]
Cl.ShowMenu("clname", "Offset x y|Screen x y|CenterUnderMouse|CenterScreen|HorButton|HorButtonCenter|VerButton|Cursor")
[4a Cl.ToMouse("clname") | Move bar to mouse. Shows it if not already showing.]
Cl.ToMouse("clname")

[4b    COMMAND LIST - Items |G ]
[4b Cl.AddLeft("clname", item_index_or_id, "command", "parameters", "work", "how") | Add the specified command to the commands already present in item]
Cl.AddLeft("clname", itemindex|"itemid", "command", "parameters", "work", "how")
[4b Cl.AddMiddle("clname", item_index_or_id, "command", "parameters", "work", "how") | Add the specified command to the commands already present in item]
Cl.AddMiddle("clname", itemindex|"itemid", "command", "parameters", "work", "how")
[4b Cl.AddRight("clname", item_index_or_id, "command", "parameters", "work", "how") | Add the specified command to the commands already present in item]
Cl.AddRight("clname", itemindex|"itemid", "command", "parameters", "work", "how")
[4b Cl.ClearLeft("clname", item_index_or_id) | Clear left command information.]
Cl.ClearLeft("clname", itemindex|"itemid")
[4b Cl.ClearMiddle("clname", item_index_or_id) | Clear middle command information.]
Cl.ClearMiddle("clname", itemindex|"itemid")
[4b Cl.ClearRight("clname", item_index_or_id) | Clear right command information.]
Cl.ClearRight("clname", itemindex|"itemid")
[4b Cl.CopyFrom("toclname", toindex, "fromclname", fromindex) | Copy information of the item fromindex of fromclname to toindex of toclname]
Cl.CopyFrom("toclname", toindex, "fromclname", fromindex)
[4b Cl.GetBackColor("clname", item_index_or_id) | Returns the back color as RGB values separated by spaces.]
Cl.GetBackColor("clname", itemindex|"itemid")
[4b Cl.GetFontName("clname", item_index_or_id) | Returns the font name if item has own font.]
Cl.GetFontName("clname", itemindex|"itemid")
[4b Cl.GetHeight("clname", item_index_or_id) | Returns item height.]
Cl.GetHeight("clname", itemindex|"itemid")
[4b Cl.GetIconFile("clname", item_index_or_id) | Returns the icon file name of the item]
Cl.GetIconFile("clname", itemindex|"itemid")
[4b Cl.GetIconNumber("clname", item_index_or_id) | Returns the zero-based icon number of the item]
Cl.GetIconNumber("clname", itemindex|"itemid")
[4b Cl.GetIconSize("clname", item_index_or_id) | Returns the icon size, 0 for none.]
Cl.GetIconSize("clname", itemindex|"itemid")
[4b Cl.GetID("clname", item_index_or_id) | Returns the ID of the item.]
Cl.GetID("clname", itemindex|"itemid")
[4b Cl.GetIDIndex("clname", "itemid") | Returns the zero-based numeric index of the item in clname with id.]
Cl.GetIDIndex("clname", "itemid")
[4b Cl.GetItem("clname", idorindex) | Returns a handle which can be used to call services on cl items.]
Cl.GetItem("clname", itemindex|"itemid"|"itemid")
[4b Cl.GetLabel("clname", item_index_or_id) | Returns the label of the item.]
Cl.GetLabel("clname", itemindex|"itemid")
[4b Cl.GetLabelIndex("clname", label) | Returns the zero-based numeric index of the item in clname with label.]
Cl.GetLabelIndex("clname", label)
[4b Cl.GetLabelValue("clname", item_index_or_id) | Returns the label from the specified item; if it is an *Info label, then the current value is returned.]
Cl.GetLabelValue("clname", itemindex|"itemid")
[4b Cl.GetLeftCmd("clname", item_index_or_id, i) | Returns the ith command of the item Left Command.]
Cl.GetLeftCmd("clname", itemindex|"itemid", i)
[4b Cl.GetLeftHow("clname", item_index_or_id, i) | Returns the ith how start of the item Left Command. Returns normal, max, min, hide or traymin.]
Cl.GetLeftHow("clname", itemindex|"itemid", i)
[4b Cl.GetLeftOnTop("clname", item_index_or_id) | Returns setting of on top checkbox for Left command 1 if set, '' otherwise).]
Cl.GetLeftOnTop("clname", itemindex|"itemid")
[4b Cl.GetLeftParam("clname", item_index_or_id, i) | Returns the ith command parameter of the item Left Command.]
Cl.GetLeftParam("clname", itemindex|"itemid", i)
[4b Cl.GetLeftSwitchTo("clname", item_index_or_id) | Returns setting of switch to if active checkbox for left command 1 if set, '' otherwise).]
Cl.GetLeftSwitchTo("clname", itemindex|"itemid")
[4b Cl.GetLeftWork("clname", item_index_or_id, i) | Returns the ith work directory of the item Left Command.]
Cl.GetLeftWork("clname", itemindex|"itemid", i)
[4b Cl.GetMiddleCmd("clname", item_index_or_id, i) | Returns the ith command of the item Middle Command.]
Cl.GetMiddleCmd("clname", itemindex|"itemid", i)
[4b Cl.GetMiddleHow("clname", item_index_or_id, i) | Returns the ith how start of the item Middle Command. Returns normal, max, min, hide or traymin.]
Cl.GetMiddleHow("clname", itemindex|"itemid", i)
[4b Cl.GetMiddleOnTop("clname", item_index_or_id) | Returns setting of on top checkbox for Right command 1 if set, '' otherwise).]
Cl.GetMiddleOnTop("clname", itemindex|"itemid")
[4b Cl.GetMiddleParam("clname", item_index_or_id, i) | Returns the ith command parameter of the item Middle Command.]
Cl.GetMiddleParam("clname", itemindex|"itemid", i)
[4b Cl.GetMiddleSwitchTo("clname", item_index_or_id) | Returns setting of switch to if active checkbox for left command 1 if set, '' otherwise).]
Cl.GetMiddleSwitchTo("clname", itemindex|"itemid")
[4b Cl.GetMiddleWork("clname", item_index_or_id, i) | Returns the ith work directory of the item Middle Command.]
Cl.GetMiddleWork("clname", itemindex|"itemid", i)
[4b Cl.GetParentList("clname", string) | Returns a handle to the parent clist for the item. Normally used in long expressions.]
Cl.GetParentList("clname", string)
[4b Cl.GetRightCmd("clname", item_index_or_id, i) | Returns the ith command of the item Right Command.]
Cl.GetRightCmd("clname", itemindex|"itemid", i)
[4b Cl.GetRightHow("clname", item_index_or_id, i) | Returns the ith how start of the item Right Command. Returns normal, max, min, hide or traymin.]
Cl.GetRightHow("clname", itemindex|"itemid", i)
[4b Cl.GetRightOnTop("clname", item_index_or_id) | Returns setting of on top checkbox for Middle command 1 if set, '' otherwise).]
Cl.GetRightOnTop("clname", itemindex|"itemid")
[4b Cl.GetRightParam("clname", item_index_or_id, i) | Returns the ith command parameter of the item Right Command.]
Cl.GetRightParam("clname", itemindex|"itemid", i)
[4b Cl.GetRightSwitchTo("clname", item_index_or_id) | Returns setting of switch to if active checkbox for left command 1 if set, '' otherwise).]
Cl.GetRightSwitchTo("clname", itemindex|"itemid")
[4b Cl.GetRightWork("clname", item_index_or_id, i) | Returns the ith work directory of the item Right Command.]
Cl.GetRightWork("clname", itemindex|"itemid", i)
[4b Cl.GetTextColor("clname", item_index_or_id) | Returns text the color as RGB values separated by spaces.]
Cl.GetTextColor("clname", itemindex|"itemid")
[4b Cl.GetTooltip("clname", item_index_or_id) | Returns the tooltip of the item.]
Cl.GetTooltip("clname", itemindex|"itemid")
[4b Cl.GetTooltipValue("clname", item_index_or_id) | Returns the tool tip from the specified item; if it is an *Info tool tip, then the current value is returned.]
Cl.GetTooltipValue("clname", itemindex|"itemid")
[4b Cl.GetWidth("clname", item_index_or_id) | Returns item width.]
Cl.GetWidth("clname", itemindex|"itemid")
[4b Cl.Insert("clname", 0) | Inserts a new item at the start of the list; assigns resulting handle.]
Cl.Insert("clname", 0)
[4b Cl.Insert("clname", Cl.Length("clname")) | Inserts a new item at the end of the list]
Cl.Insert("clname", Cl.Length("clname"))
[4b Cl.Insert("clname", itemID) | Inserts a new item before the one with id itemID; assigns resulting handle.]
Cl.Insert("clname", itemID)
[4b Cl.IsEnabled("clname", item_index_or_id) | Returns 1 if item is enabled, 0 otherwise.]
Cl.IsEnabled("clname", itemindex|"itemid")
[4b Cl.IsIconVisible("clname", item_index_or_id) | Returns 1 if icon is visible, 0 otherwise.]
Cl.IsIconVisible("clname", itemindex|"itemid")
[4b Cl.IsVisible("clname", item_index_or_id) | Returns 1 if item is visible, 0 otherwise.]
Cl.IsVisible("clname", itemindex|"itemid")
[4b Cl.LockTo("clname", onoff, "clnameTarget", n1, n2, n3, n4, n5, n6, n7, n8) | onoff = 0 (remove lock), onoff = 1 (lock clname to clnameTarget using eight position values)]
Cl.LockTo("clname", 0|1, "clnameTarget", n1, n2, n3, n4, n5, n6, n7, n8)
[4b Cl.Remove("clname", item_index_or_id) | Removes the item. Returns a handle if successful.]
Cl.Remove("clname", itemindex|"itemid")
[4b Cl.RunLeft("clname", item_index_or_id) | Runs the left command of the item.]
Cl.RunLeft("clname", itemindex|"itemid")
[4b Cl.RunMiddle("clname", item_index_or_id) | Runs the middle command of the item.]
Cl.RunMiddle("clname", itemindex|"itemid")
[4b Cl.RunRight("clname", item_index_or_id) | Runs the right command of the item.]
Cl.RunRight("clname", itemindex|"itemid")
[4b Cl.SetBackColor("clname", item_index_or_id, "colorParameters") | Set the item's background color (only affects buttons, not menu items)]
Cl.SetBackColor("clname", itemindex|"itemid", "colorParameters")
[4b Cl.SetEnabled("clname", item_index_or_id, enabled) | If enabled is zero or empty, makes the specified item disabled, otherwise enabled.]
Cl.SetEnabled("clname", itemindex|"itemid", 0|1)
[4b Cl.SetFont("clname", item_index_or_id, "fontname", fontsize) | Set the font as specified. if fontname is empty, the own font is removed.]
Cl.SetFont("clname", itemindex|"itemid", "fontname", fontsize)
[4b Cl.SetLeftSwitchTo("clname", item_index_or_id, enabled) | Set SwitchTo checkbox for left command.]
Cl.SetLeftSwitchTo("clname", itemindex|"itemid", 0|1)
[4b Cl.SetMiddleSwitchTo("clname", item_index_or_id, enabled) | Set SwitchTo checkbox for middle command.]
Cl.SetMiddleSwitchTo("clname", itemindex|"itemid", 0|1)
[4b Cl.SetRightSwitchTo("clname", item_index_or_id, enabled) | Set SwitchTo checkbox for right command.]
Cl.SetRightSwitchTo("clname", itemindex|"itemid", 0|1)
[4b Cl.SetHeight("clname", item_index_or_id, height) | Set the item height.]
Cl.SetHeight("clname", itemindex|"itemid", height)
[4b Cl.SetHover("clname", item_index_or_id, hover) | hover = 0 (disabled) | 1 (hover clicks left) | 2 (hover clicks middle) | 3 (hover clicks right)]
Cl.SetHover("clname", itemindex|"itemid", 0|1|2|3)
[4b Cl.SetIcon("clname", item_index_or_id, "filepath", iconindex) | Set the icon to the specified path and zero-based iconindex]
Cl.SetIcon("clname", itemindex|"itemid", "filepath", iconindex)
[4b Cl.SetIconVisible("clname", item_index_or_id, visible) | If visible is zero or empty, makes the icon from the specified item invisible, otherwise visible.]
Cl.SetIconVisible("clname", itemindex|"itemid", 0|1)
[4b Cl.SetID("clname", item_index_or_id, "id") | Set the ID for the specified item.]
Cl.SetID("clname", itemindex|"itemid", "id")
[4b Cl.SetLeftNormalUser("clname", item_index_or_id, enabled) | Set Normal User checkbox.]
Cl.SetLeftNormalUser("clname", itemindex|"itemid", 0|1)
[4b Cl.SetMiddleNormalUser("clname", item_index_or_id, enabled) | Set Normal User checkbox.]
Cl.SetMiddleNormalUser("clname", itemindex|"itemid", 0|1)
[4b Cl.SetRightNormalUser("clname", item_index_or_id, enabled) | Set Normal User checkbox.]
Cl.SetRightNormalUser("clname", itemindex|"itemid", 0|1)
[4b Cl.SetLabel("clname", item_index_or_id, "label") | Set the label for the specified item.]
Cl.SetLabel("clname", itemindex|"itemid", "label")
[4b Cl.SetLeftOnTop("clname", item_index_or_id, enabled) | Set OnTop checkbox for left command.]
Cl.SetLeftOnTop("clname", itemindex|"itemid", 0|1)
[4b Cl.SetMiddleOnTop("clname", item_index_or_id, enabled) | Set OnTop checkbox for middle command.]
Cl.SetMiddleOnTop("clname", itemindex|"itemid", 0|1)
[4b Cl.SetRightOnTop("clname", item_index_or_id, enabled) | Set OnTop checkbox for right command.]
Cl.SetRightOnTop("clname", itemindex|"itemid", 0|1)
[4b Cl.SetMultiline("clname", item_index_or_id, enabled) | Set multi-line setting for button label]
Cl.SetMultiline("clname", itemindex|"itemid", 0|1)
[4b Cl.SetTextColor("clname", item_index_or_id, "colorParameters") | Set the item's text color (only affects buttons, not menu items)]
Cl.SetTextColor("clname", itemindex|"itemid", "colorParameters")
[4b Cl.SetTooltip("clname", item_index_or_id, "tooltip") | Set the tool tip for the specified item.]
Cl.SetTooltip("clname", itemindex|"itemid", "tooltip")
[4b Cl.SetVisible("clname", item_index_or_id, visible) | If vis is zero or empty, makes the specified item invisible, otherwise visible.]
Cl.SetVisible("clname", itemindex|"itemid", 0|1)
[4b Cl.SetWidth("clname", item_index_or_id, width) | Set the item width.]
Cl.SetWidth("clname", itemindex|"itemid", width)
[4b Cl.SwapWith(("clname", indexto, indexfrom) | Exchanges the information on two items on the same list.]
Cl.SwapWith(("clname", indexto, indexfrom)

[4c   COMMAND LIST - Item Layout |G ]
[4c Cl.GetIconAbove("clname", item_index_or_id) | Returns offset to the text rectangle from the top of the button.]
Cl.GetIconAbove("clname", itemindex|"itemid")
[4c Cl.GetIconLeft("clname", item_index_or_id) | Returns offset to icon from left of button; overrides IconPos.]
Cl.GetIconLeft("clname", itemindex|"itemid")
[4c Cl.GetIconPos("clname", item_index_or_id) | Returns offset to the text rectangle from the top of the button.]
Cl.GetIconPos("clname", itemindex|"itemid")
[4c Cl.GetIconTop("clname", item_index_or_id) | Returns offset to icon from left of button; overrides IconPos.]
Cl.GetIconTop("clname", itemindex|"itemid")
[4c Cl.GetImageLeft("clname", item_index_or_id) | Returns starting offset from the left of the image when tiling the image.]
Cl.GetImageLeft("clname", itemindex|"itemid")
[4c Cl.GetImageTop("clname", item_index_or_id) | Returns starting offset from the top of the image when tiling the image.]
Cl.GetImageTop("clname", itemindex|"itemid")
[4c Cl.GetNoText("clname", item_index_or_id) | Returns offset to the text rectangle from the top of the button.]
Cl.GetNoText("clname", itemindex|"itemid")
[4c Cl.GetTextHeight("clname", item_index_or_id) | Returns height of the text rectangle.]
Cl.GetTextHeight("clname", itemindex|"itemid")
[4c Cl.GetTextHor("clname", item_index_or_id) | Returns offset to the text rectangle from the top of the button.]
Cl.GetTextHor("clname", itemindex|"itemid")
[4c Cl.GetTextLeft("clname", item_index_or_id) | Returns offset to the text rectangle from the left of the button.]
Cl.GetTextLeft("clname", itemindex|"itemid")
[4c Cl.GetTextTop("clname", item_index_or_id) | Returns offset to the text rectangle from the top of the button.]
Cl.GetTextTop("clname", itemindex|"itemid")
[4c Cl.GetTextVer("clname", item_index_or_id) | Returns offset to the text rectangle from the top of the button.]
Cl.GetTextVer("clname", itemindex|"itemid")
[4c Cl.GetTextWidth("clname", item_index_or_id) | Returns width of the text rectangle.]
Cl.GetTextWidth("clname", itemindex|"itemid")
[4c Cl.SetIconAbove("clname", item_index_or_id) | Set offset to the text rectangle from the top of the button.]
Cl.SetIconAbove("clname", itemindex|"itemid")
[4c Cl.SetIconLeft("clname", item_index_or_id) | Set offset to icon from left of button; overrides IconPos.]
Cl.GetIconLeft("clname", itemindex|"itemid")
[4c Cl.SetIconPos("clname", item_index_or_id) | Set offset to the text rectangle from the top of the button.]
Cl.GetIconPos("clname", itemindex|"itemid")
[4c Cl.SetIconTop("clname", item_index_or_id) | Set offset to icon from left of button; overrides IconPos.]
Cl.GetIconTop("clname", itemindex|"itemid")
[4c Cl.SetImageLeft("clname", item_index_or_id) | Set starting offset from the left of the image when tiling the image.]
Cl.GetImageLeft("clname", itemindex|"itemid")
[4c Cl.SetImageTop("clname", item_index_or_id) | Set starting offset from the top of the image when tiling the image.]
Cl.GetImageTop("clname", itemindex|"itemid")
[4c Cl.SetNoText("clname", item_index_or_id) | Set offset to the text rectangle from the top of the button.]
Cl.GetNoText("clname", itemindex|"itemid")
[4c Cl.SetTextHeight("clname", item_index_or_id) | Set height of the text rectangle.]
Cl.GetTextHeight("clname", itemindex|"itemid")
[4c Cl.SetTextHor("clname", item_index_or_id) | Set offset to the text rectangle from the top of the button.]
Cl.GetTextHor("clname", itemindex|"itemid")
[4c Cl.SetTextLeft("clname", item_index_or_id) | Set offset to the text rectangle from the left of the button.]
Cl.GetTextLeft("clname", itemindex|"itemid")
[4c Cl.SetTextTop("clname", item_index_or_id) | SetsSet offset to the text rectangle from the top of the button.]
Cl.GetTextTop("clname", itemindex|"itemid")
[4c Cl.SetTextVer("clname", item_index_or_id) | Set offset to the text rectangle from the top of the button.]
Cl.GetTextVer("clname", itemindex|"itemid")
[4c Cl.SetTextWidth("clname", item_index_or_id) | Set width of the text rectangle.]
Cl.GetTextWidth("clname", itemindex|"itemid")

[4d    COMMAND LIST - Item Controls |G ]
[4d Cl.GetCtrlHandle("clname", item_index_or_id) | Returns the window handle of a control associated with the button on a toolbar.]
Cl.GetCtrlHandle("clname", itemindex|"itemid")
[4d Cl.GetCtrlValue("clname", item_index_or_id) | Returns the text displayed by the control; returns 0, 1, 2 for checkboxes.]
Cl.GetCtrlValue("clname", itemindex|"itemid")
[4d Cl.SetCtrlURL("clname", item_index_or_id, "url") | ie control attached to the specified button is navigated to the specified URL.]
Cl.SetCtrlURL("clname", itemindex|"itemid", "url")
[4d Cl.SetCtrlValue("clname", item_index_or_id, "value") | Set the text displayed by the control; use 0, 1, 2 for checkboxes.]
Cl.SetCtrlValue("clname", itemindex|"itemid", "value")
[4d Cl.SetCtrlFocus("clname", item_index_or_id) | Set the keyboard focus to the button and its control.]
Cl.SetCtrlFocus("clname", itemindex|"itemid")
[4d Cl.AddCtrlListItem("clname", item_index_or_id, "text", pos) | Adds text at position pos of the combobox control dropdown. Omit pos to add to end.]
Cl.AddCtrlListItem("clname", itemindex|"itemid", "text", pos)
[4d Cl.ClearCtrlList("clname", item_index_or_id) | Removes all items in the combobox control dropdown.]
Cl.ClearCtrlList("clname", itemindex|"itemid")
[4d *Control Edit keywords "text" | Textbox control]
*Control Edit AutoHScroll AutoVScroll HScrollBar VScrollBar Left|Center|Right LowerCase|UpperCase MultiLine NoHideSel Number Password ReadOnly ClientEdge "text" AutoFile|AutoURL|AutoURLHistory|AutoURLMRU AutoAppend_Off|AutoAppend_On AutoSuggest_Off|AutoSuggest_On
[4d *Control Button keywords "label" | Button control]
*Control Button Center RightButton Bottom VCenter Top MultiLine ClientEdge "label"
[4d *Control Button AutoCheckBox PushLike keywords "label" | Toggle Button control (pressed/up). Returns 0, 1.]
*Control Button AutoCheckBox PushLike Center RightButton Bottom VCenter Top MultiLine ClientEdge "label"
[4d *Control Button AutoCheckBox keywords "label" | 2-state check box control. Returns 0, 1.]
*Control Button AutoCheckBox Center RightButton Bottom VCenter Top MultiLine ClientEdge "label"
[4d *Control Button AutoTriState keywords "label" | 3-state check box control. Returns 0, 1, 2.]
*Control Button AutoTriState Center RightButton Bottom VCenter Top MultiLine ClientEdge "label"
[4d *Control ComboxBox DropDown keywords | DropDownCombobox control. Editable dropdown.]
*Control ComboxBox DropDown AutoHScroll LowerCase UpperCase Sort ClientEdge Scroll Border "item1|item2|..." AutoFile|AutoURL|AutoURLHistory|AutoURLMRU AutoAppend_Off|AutoAppend_On AutoSuggest_Off|AutoSuggest_On
[4d *Control ComboxBox DropDownList keywords | DropDownList control. Non-editable dropdown.]
*Control ComboxBox DropDownList AutoHScroll LowerCase UpperCase Sort ClientEdge Scroll Border "item1|item2|..."
[4d *Control ComboxBox keywords | ListBox control]
*Control ComboxBox Height:xxx AutoHScroll LowerCase UpperCase NoIntegralHeight Sort ClientEdge Scroll Border "title|item1|item2|..."
[4d *Control Slider (value) lowerbound upperbound ticfrequency keywords | Slider control]
*Control Slider (value) lowerbound upperbound ticfrequency Vertical Noticks Left Right Bottom Top Both Clientedge
[4d *Control Progress value lowerbound upperbound keywords | Progress Bar control]
*Control Progress value lowerbound upperbound Vertical
[4d *Control IE "url" | Browser control, navigates to the URL.]
*Control IE "url"
[4d *Control IE "folderpath" | Explorer control, navigates to the folder path.]
*Control IE "folderpath"
[4d *Control {guid} | An attempt is made to load a COM control with the GUID.]
*Control {guid}
[4d *Control {.progid} | An attempt is made to load a COM control with the ProgID.]
*Control {.progid}

[4e   COMMAND LIST - Predefined List Names |G ]
[4e Active | Predefined command list script name. Set non standard icons or colors for active buttons (only, if checked or gray checked in Command Lists >Setup >Special Lists)]
Active
[4e Icons | Predefined command list script name. Set custom icons for tray minimised windows (only, if checked or gray checked in Command Lists >Setup >Special Lists)]
Icons
[4e Monitor | Predefined command list script name. Run once per second (or two seconds) (only, if checked or gray checked in Command Lists >Setup >Special Lists)]
Monitor
[4e Open | Predefined command list script name. Run commands when specified windows first open (only, if checked or gray checked in Command Lists >Setup >Special Lists)]
Open
[4e Tray | Predefined command list script name. displaying tray icons (only, if checked or gray checked in Command Lists >Setup >Special Lists)]
Tray
[4e ClipCaptured | Predefined command list script name. Run as a script whenever a clip is captured. (only, if "Run ClipCaptured" is checked in the GUI Control dialog)]
ClipCaptured
[4e Context | Predefined command list script name. Used for items which PowerPro will add to Explorer's right click context menus.]
Context
[4e ContextFolder | Predefined command list script name. Used for items which PowerPro will add to Explorer's right click context menus.]
ContextFolder
[4e HookAppMessages | Predefined command list script name. Runs whenever a message with number WM_APP through 0xBFFF is received by the PowerPro main window.]
HookAppMessages
[4e HookBarCtrlRight | Predefined command list script name. Shown as the menu when a bar is ctrl-right clicked.]
HookBarCtrlRight
[4e HookCommandLine | Predefined command list script name. Run as a script just before running the command line in the Tiny Type and Run box.]
HookCommandLine
[4e HookCopyData | Predefined command list script name.]
HookCopyData
[4e HookErrors | Predefined command list script name. Run as a script whenever an error occurs.]
HookErrors
[4e HookMenuFolder | Predefined command list script name. Run as a script for each file selected from a Menu Folder.]
HookMenuFolder
[4e HookSystemEvents | Predefined command list script name. Run as a script whenever a system event occurs.]
HookSystemEvents
[4e HookWindowEvents | Predefined command list script name. Run as a script whenever a window event occurs.]
HookWindowEvents
[4e OnScriptDebug | Predefined command list script name. Run as a script just before displaying debug dialog.]
OnScriptDebug
[4e PProShutdown | Predefined command list script name. Run when PowerPro is closed.]
PProShutdown
[4e Reconfigure | Predefined command list script name. Run each time the configuration dialog is closed with "OK" (only, if "Run reconfigure" is checked in Advanced Setup >Configuration)]
Reconfigure

[5    DATABASE |G ]
[5  ODBC_Status | Variable set by all services of ODBC plugin]
ODBC_Status
[5  ODBC_Vector | Variable set by ODBC.Get_Vector and ODBC.Get_2D_Vector services]
ODBC_Vector
[5  ODBC_Col_Nmaes | Variable set by ODBC.Get_Vector, ODBC.Get_Vectors and ODBC.Get_2D_Vector services]
ODBC_Col_Nmaes
[5  ODBC_No_Rows | Variable set by ODBC.Get_Vector, ODBC.Get_Vectors and ODBC.Get_2D_Vector services]
ODBC_No_Rows
[5 ODBC.BeginTransaction | Frame any calls to ODBC.Sql_Stmt that change the database with a call to ODBC.BeginTransaction before and ODBC.Commit after]
ODBC.BeginTransaction
[5 ODBC.Close() | Close the open database]
ODBC.Close()
[5 ODBC.Commit | Frame any calls to ODBC.Sql_Stmt that change the database with a call to ODBC.BeginTransaction before and ODBC.Commit after]
ODBC.Commit
[5 ODBC.Config("filePath_INI") | Set location of configuration ini file]
ODBC.Config("filePath_INI")
[5 ODBC.Error_Dialog_Off() | Turn PowerPro script error dialog off.]
ODBC.Error_Dialog_Off()
[5 ODBC.Error_Dialog_On() | Turn PowerPro script error dialog on.]
ODBC.Error_Dialog_On()
[5 ODBC.Get_2D_Vector("SQL_statement", "vector_row_count") | SQL statement that returns results from the open database (typically a SELECT statement). Set of vectors stored in a containing vector will be returned.]
ODBC.Get_2D_Vector("SQL_statement", "vector_row_count")
[5 ODBC.Get_Vector("SQL_statement", "column_names", "variable_name_for_vector") | SQL statement that returns results from the open database (typically a SELECT statement). A single vector of results will be returned by the service unless you provide an alternate name for the vector as a second argument.]
ODBC.Get_Vector("SQL_statement", "column_names", "variable_name_for_vector")
[5 ODBC.Get_Vectors("SQL_statement", "column_names") | SQL statement that returns results from the open database (typically a SELECT statement). Optionally specify the initial size of the vectors returned]
ODBC.Get_Vectors("SQL_statement", "column_names")
[5 ODBC.Open("dsn") | Opens a data source. Only one database can be opened at a time. username and password optional. Returns 'OK' or 'ERROR']
ODBC.Open("dsn")
[5 ODBC.Open("driver_key_word", "database", "username", "password") | Opens a data source. Only one database can be opened at a time. username and password optional. Returns 'OK' or 'ERROR']
ODBC.Open("Text|dBase|Excel|Access|...", "database", "username", "password")
[5 ODBC.Returns_Nothing() | Determine what the calls return via 'returnval = ODBC.service'.]
ODBC.Returns_Nothing()
[5 ODBC.Returns_Status() | Determine what the calls return via 'returnval = ODBC.service'.]
ODBC.Returns_Status()
[5 ODBC.Returns_Values() | Determine what the calls return via 'returnval = ODBC.service'.]
ODBC.Returns_Values()
[5 ODBC.Rollback | Cancel the call to odbc.sql_stmt thereafter by calling ODBC.Rollback instead of ODBC.Commit]
ODBC.Rollback
[5 ODBC.Sql_Stmt("SQL_statement") | Execute SQL statements that return no data]
ODBC.Sql_Stmt("SQL_statement")
;; ==============================
;; POSSIBLE STATEMENTS

;; CREATE TABLE
;; DELETE FROM
;; DROP TABLE
;; INSERT INTO
;; UPDATE
;; ==============================
[5 ODBC.UnLoad | Remove plugin from memory.]
ODBC.UnLoad
[5 ODBC.Version | Returns plugin version.]
ODBC.Version
[5  SQLL_Status | Variable set by all services of SQLL plugin]
SQLL_Status
[5  SQLL_Vector | Variable set by SQLL.Get_Vector and SQLL.Get_2D_Vector services]
SQLL_Vector
[5  SQLL_Col_Nmaes | Variable set by SQLL.Get_Vector, SQLL.Get_Vectors and SQLL.Get_2D_Vector services]
SQLL_Col_Nmaes
[5  SQLL_No_Rows | Variable set by SQLL.Get_Vector, SQLL.Get_Vectors and SQLL.Get_2D_Vector services]
SQLL_No_Rows
[5 SQLL.Close() | Close the open database]
SQLL.Close()
[5 SQLL.Config("filePath_INI") | Set location of configuration ini file]
SQLL.Config("filePath_INI")
[5 SQLL.Error_Dialog_Off() | Turn PowerPro script error dialog off.]
SQLL.Error_Dialog_Off()
[5 SQLL.Error_Dialog_On() | Turn PowerPro script error dialog on.]
SQLL.Error_Dialog_On()
[5 SQLL.Get_2D_Vector("SQL_statement", "vector_row_count") | SQL statement that returns results from the open database (typically a SELECT statement). Set of vectors stored in a containing vector will be returned.]
SQLL.Get_2D_Vector("SQL_statement", "vector_row_count")
[5 SQLL.Get_Vector("SQL_statement", "variable_name_for_vector") | SQL statement that returns results from the open database (typically a SELECT statement). A single vector of results will be returned by the service unless you provide an alternate name for the vector as a second argument.]
SQLL.Get_Vector("SQL_statement", "variable_name_for_vector")
[5 SQLL.Get_Vectors("SQL_statement", "vector_row_count") | SQL statement that returns results from the open database (typically a SELECT statement). Optionally specify the initial size of the vectors returned]
SQLL.Get_Vectors("SQL_statement", "vector_row_count")
[5 SQLL.Open("filepath") | Open an sqlite database. Only one database can be opened at a time. Returns 'OK' or 'ERROR']
SQLL.Open("filepath")
[5 SQLL.Returns_Nothing() | Determine what the calls return via 'returnval = SQLL.service'.]
SQLL.Returns_Nothing()
[5 SQLL.Returns_Status() | Determine what the calls return via 'returnval = SQLL.service'.]
SQLL.Returns_Status()
[5 SQLL.Returns_Values() | Determine what the calls return via 'returnval = SQLL.service'.]
SQLL.Returns_Values()
[5 SQLL.Sql_Stmt("SQL_statement") | Execute SQL statements that return no data]
SQLL.Sql_Stmt("SQL_statement")
;; ==============================
;; POSSIBLE STATEMENTS

;; ATTACH DATABASE
;; BEGIN TRANSACTION
;; COMMIT TRANSACTION
;; COPY (not sqlite 3)
;; CREATE INDEX
;; CREATE TABLE
;; CREATE TRIGGER
;; CREATE VIEW
;; DELETE
;; DETACH DATABASE
;; DROP INDEX
;; DROP TABLE
;; DROP TRIGGER
;; DROP VIEW
;; END TRANSACTION
;; INSERT
;; ON CONFLICT clause
;; PRAGMA
;; REPLACE
;; ROLLBACK TRANSACTION
;; UPDATE
;; VACUUM
;; ==============================
[5 SQLL.UnLoad | Remove plugin from memory.]
SQLL.UnLoad
[5 SQLL.Version | Returns plugin version.]
SQLL.Version

[5    DESKTOPS |G ]
[5  AllDeskNames | All desktop names, as multi-line string with one name per line.]
AllDeskNames
[5  DeskEmpty | 1 if current vdesk empty; 0 otherwise]
DeskEmpty
[5  DeskName | Name of current virtual desktop.]
DeskName
[5  DeskNum | Number 1-9 of current virtual desktop.]
DeskNum
[5 VDeskEmpty(vdeskname) | Returns 1 if vdesk is empty, 0 if it is not; 2 if it does not exist.]
VDeskEmpty(vdeskname)
[5 VDeskHasWindow("vdeskname", "captionlist") | Returns 1 if vdesk contains a window matching captionlist.]
VDeskHasWindow("vdeskname", "captionlist")
[5 VDesk.Arrange | Display a window showing all desktops.]
VDesk.Arrange
[5 VDesk.Clear "vdeskname" | Clears the selected virtual desktop.]
VDesk.Clear "vdeskname"
[5 VDesk.ClearAllClose | Move all windows to current desktop and then close them.]
VDesk.ClearAllClose
[5 VDesk.CloseTo "vdeskname" | Move all windows to indicated desktop and then closes current desktop.]
VDesk.CloseTo "vdeskname"
[5 VDesk.Consolidate | Move all windows to current desktop.]
VDesk.Consolidate
[5 VDesk.CreateOrSwitchTo | Create a new desktop named after a command list and run the commands on the list to populate the desktop.]
VDesk.CreateOrSwitchTo
[5 VDesk.Menu | Display the virtual desktop menu.]
VDesk.Menu
[5 VDesk.MoveActive desktop | Move active window to name desktop (which must already exist).]
VDesk.MoveActive "vdeskname"
[5 VDesk.MoveAutorun | Moves last autorun match to named desktop.]
VDesk.MoveAutorun
[5 VDesk.New | Create a new desktop, you can specify its name.]
VDesk.New
[5 VDesk.NewFromList | Same as CreateOrSwitchTo.]
VDesk.NewFromList
[5 VDesk.Next | Activate the next virtual desktop.]
VDesk.Next
[5 VDesk.Previous | Activate the previous virtual desktop.]
VDesk.Previous
[5 VDesk.ReplaceByList | Clear the current desktop and rename it to the command list and run the commands on the list to populate the desktop.]
VDesk.ReplaceByList
[5 VDesk.ShowMenu | Show a menu of desktops and windows, select a window to move it to this desktop.]
VDesk.ShowMenu
[5 VDesk.SwitchMenu | Show a menu of desktops and windows, select one to activate it.]
VDesk.SwitchMenu
[5 VDesk.SwitchTo "vdeskname" | Switch to the indicated desktop.]
VDesk.SwitchTo "vdeskname"
[5 VDesk.Lock "captionlist" | Locks all visible windows matching the caption list.]
VDesk.Lock "captionlist"
[5 VDesk.Unlock "captionlist" | Unlocks all windows matching the caption list and leaves them on the current desktop.]
VDesk.Unlock "captionlist"
[5 VDesk.Recover | Meant to be used only after a PowerPro crash when windows are hidden on desktops.]
VDesk.Recover
[5 VDesk.MoveAll "sourcevdeskname" "destinationvdeskname" "captionlist" | All windows on the source desktop matching the caption list are moved to the destination desktop.]
VDesk.MoveAll "sourcevdeskname" "destinationvdeskname" "captionlist"
[5 Window("VDesk", "vdeskname") | Returns list of handles of windows on vdeskname.]
Window("VDesk", "vdeskname")
[5 WIN.GetDesktopName() | Returns name of Windows desktop; returns empty if desktop cannot be opened.]
WIN.GetDesktopName()

[7    FILE SYSTEM |G ]
[7  Disk | Drive letter of running PowerPro path without :]
Disk
[7  RecycleItems | Total number of items in recycle bin on all drives.]
RecycleItems
[7  RecycleSize | Total size of recycle bin on all drives in KB.]
RecycleSize
[7 Mounted("driveletter") | Result is 1 if following string's first letter is a removable disk.]
Mounted("driveletter")
[7 ReadLine("filepath", n) | Reads the nth line from text file filepath. Lines start at 1.]
ReadLine("filepath", n)
[7 DiskSpace("keyword", "drive") | Returns drive usage, drive is any drive letter like c:]
DiskSpace("kfree|kuser|ksize|mfree|muser|msize", "c:")
[7 PickFile("filepathlist", "title") | Returns a full file path from a dialog of names only.]
PickFile("filepathlist", "title")
[7 ValidPath("path") | Returns 1 if string (may contain wildcards: * and ?) is a valid path to a file.]
ValidPath("path")
[7 Exec.BrowseRun | Shows a file open dialog, the selected file is immediately executed.]
Exec.BrowseRun
[7 Exec.ClearRecent | Clear recent documents folder.]
Exec.ClearRecent
[7 Exec.Explorer "folderpath" | Open a folder in Explorer, special folders like Control Panel may be used.]
Exec.Explorer "folderpath"
[7 Exec.Explorer2 "folderpath" | Open a folder in 2-pane Explorer, special folders like "Control Panel" may be used.]
Exec.Explorer2 "folderpath"
[7 Exec.FindComputer | Show find computer dialog.]
Exec.FindComputer
[7 Exec.FindFiles | Show the Windows find files dialog.]
Exec.FindFiles
[7 Exec.NewFolder | Create a new file folder.]
Exec.NewFolder
[7 Exec.Print | Print file using associated program.]
Exec.Print
[7 Exec.ToFile("filepath", "text") | Write a single line of text to a log file.]
Exec.ToFile("filepath", "text")
[7 Exec.ToFolder("folder") | Opens a folder in explorer or file dialog if either is the foreground window. Otherwise opens a new explorer window.]
Exec.ToFolder("folderpath")
[7 File.CommandRandom("commandpath", "filepath", "args") | Run a DOS command with a randomly selected file as a parameter. (filepath must contain wildcards like *.*)]
File.CommandRandom("commandpath", "filepath", "args")
[7 File.Copy("sourcefilepath", "destinfilepath") | Copy one file path to a second path, use wildcards to copy many files.]
File.Copy("sourcefilepath", "destinfilepath")
[7 File.CopyRandom("sourcefilepath", "destinfilepath")| Copy a randomly selected file to a specified file path. (filepath must contain wildcards like *.*)]
File.CopyRandom("sourcefilepath", "destinfilepath")
[7 File.Delete("filepath") | Delete a file, use wildcards to delete a set of files.]
File.Delete("filepath")
[7 File.DeleteNoRecycle("filepath") | Delete a file without putting it in the Recycle Bin.]
File.DeleteNoRecycle("filepath")
[7 File.DeleteOld(days, "folderspath") | Delete files in a folder older than specified number of days.]
File.DeleteOld(days, "folderpath")
[7 File.ExtChange("filepath", "action") | Change, remove, or add a file extension. -= remove extension, +ext=add extension, ext=replace current extension]
File.ExtChange("filepath", "-|+ext|ext")
[7 File.Move("sourcefilepath", "destinfilepath") | Move files to another folder]
File.Move("sourcefilepath", "destinfilepath")
[7 File.Rename("sourcefilepath", "destinfilepath") | Rename one file path to another, can be used to move files to another folder.]
File.Rename("sourcefilepath", "destinfilepath")
[7 File.RunRandom("filepath") | Run a randomly selected file.]
File.RunRandom("filepath")
[7 FILE.AllDrives | Returns multiline string, a line per valid drive. Use Line function to work with each drive.]
FILE.AllDrives
[7 FILE.AllFiles("path", "", subfolders, pumpflag, inclhidden) | Count files. subfolders= 0(path) | 1(path + all subfolders) | 2(files and folders) | 3(files and folders + all subfolders | 4(folders) | 5(folders + all subfolders)]
FILE.AllFiles("path", "", "0|1|2|3|4|5", pumpflag, 0|1)
[7 FILE.AllFiles("path", "Size", subfolders, pumpflag, inclhidden) | Total size of files (Bytes). subfolders= 0(path) | 1(path + all subfolders) | 2(files and folders) | 3(files and folders + all subfolders | 4(folders) | 5(folders + all subfolders)]
FILE.AllFiles("path", "Size", "0|1|2|3|4|5", pumpflag, 0|1)
[7 FILE.AllFiles("path", "KSize", subfolders, pumpflag, inclhidden) | Total size of files (KBytes). subfolders= 0(path) | 1(path + all subfolders) | 2(files and folders) | 3(files and folders + all subfolders | 4(folders) | 5(folders + all subfolders)]
FILE.AllFiles("path", "KSize", "0|1|2|3|4|5", pumpflag, 0|1)
[7 FILE.AllFiles("path", "command", subfolders, pumpflag, inclhidden) | Cycle through all files and run the command for each one. subfolders= 0(path) | 1(path + all subfolders) | 2(files and folders) | 3(files and folders + all subfolders | 4(folders) | 5(folders + all subfolders)]
FILE.AllFiles("path", "command", "0|1|2|3|4|5", pumpflag, 0|1)
[7 FILE.Attrib("path") | Returns a string of single letters indicating the path's attributes. a=archivable, c=compressed, d=directory, h=hidden, o=offline, r=read only, s=system, t=temporary.]
FILE.Attrib("path")
[7 FILE.Close(handle) | Closes the file given by filehandle. Same as handle.Close]
FILE.Close(handle)
[7 FILE.CloseAll | Closes all open files.]
FILE.CloseAll
[7 FILE.Copy("sourcefilepath", "destinpath", noErr) | Copy file to destinpath (folder name or full file name). noErr= 1(no error message) Returns 1 if success.]
FILE.Copy("sourcefilepath", "destinpath", 0|1)
[7 FILE.CreateDirectory("folderpath") | Create a folder. Parent folder must exist. Same as Exec.NewFolder.]
FILE.CreateDirectory("folderpath")
[7 FILE.CreateShortcut("targetpath", "lnkpath", "desc", "params", "iconpath", iconindex) | Creates a .lnk shortcut to target with command line arguments params. targetpath and lnkpath required.]
FILE.CreateShortcut("targetpath", "lnkpath", "desc", "params", "iconpath", iconindex)
[7 FILE.Delete("path") | Deletes the indicated file. The filename can contain wildcards.]
FILE.Delete("path")
[7 FILE.DeleteNoRecylce("path") | Deletes the file without using Recycle Bin. The filename can contain wildcards.]
FILE.DeleteNoRecylce("path")
[7 FILE.DoVerb("filepath", "action", nocontext) | Run action on filepath. action can be Properties or any of the actions available for the file type (eg. open, print)]
FILE.DoVerb("filepath", "action", 0|1)
[7 FILE.EndWatchFolder(handle) | End the folder monitoring started by FILE.WatchFolder]
FILE.EndWatchFolder(handle)
[7 FILE.EOF(handle) | Returns 0 if last read did not encounter EOF; non zero otherwise. Check immediately after reading the line. Same as handle.EOF]
FILE.EOF(handle)
[7 FILE.Folder("path") | Returns folder path without last backslash and filename.]
FILE.Folder("path")
[7 FILE.GetDate("path", s) | Returns the modified date and time as yyyymmddhhmmss. s = c(created) | m(modified date and time)]
FILE.GetDate("path", "c|m")
[7 FILE.GetShortPath("path") | Returns short (8.3) path and file name to specfied file path and name.]
FILE.GetShortPath("path")
[7 FILE.IsFolder("path") | Returns 1 if path is a valid path to a folder; 0 otherwise. The path may not contain wildcards.]
FILE.IsFolder("path")
[7 FILE.KSize("path") | Returns file size in kilobytes (size/1024); returns "" if file cannot be opened.]
FILE.KSize("path")
[7 FILE.LastModified("path") | Returns the last modified date and time of the file as yyyymmddhhmmss.]
FILE.LastModified("path")
[7 FILE.ListFiles("path", subfolders, pumpflag) | Returns a list of all the files names in the folder given by path. subfolders= 0(path) | 1(path + all subfolders) | 2(files and folders) | 3(files and folders + all subfolders | 4(folders) | 5(folders + all subfolders)]]
FILE.ListFiles("path", "0|1|2|3|4|5", pumpflag)
[7 FILE.Move("sourcefilepath", "destinfilepath", noerr) | Move files to another folder, same as Rename. The second path can be either a folder name or a full file name.]
FILE.Move("sourcefilepath", "destinfilepath", 0|1)
[7 FILE.Name("path") | Returns only filename without extension or folder path.]
FILE.Name("path")
[7 FILE.NameType("path") | Returns filename and type without folder.]
FILE.NameType("path")
[7 FILE.Open("path", "param") | Open the file with path. Optionally, param = r(open read only-default) | w(write-will be overwritten if it exists) | a(append)]
handle = FILE.Open("path", "r|w|a")
[7 FILE.ReadAll("path") | Reads entire file from path and assigns to variable]
FILE.ReadAll("path")
[7 FILE.ReadLine(handle) | Returns next line from file including any trailing \r or \n. Same as fh.ReadLine]
FILE.ReadLine(handle)
[7 FILE.ReadString(handle) | Returns next line from file without trailing \r and \n. Same as fh.ReadString]
FILE.ReadString(handle)
[7 FILE.Resolve("lnkfilepath") | Resolves shortcut lnkfilepath and returns target file.]
FILE.Resolve("lnkfilepath")
[7 FILE.Resolve("lnkfilepath", "info") | Resolves shortcut lnkfilepath and returns target file info: description, work, icon.]
FILE.Resolve("lnkfilepath", "des|wor|ico")
[7 FILE.Restart(handle) | Next operation will occur at start of file. Same as handle.Restart]
FILE.Restart(handle)
[7 FILE.RunAs("userid", "password", "filepath", "cmdline", "workFolderPath") | Runs filepath under userid with password. The last two parameters are optional.]
FILE.RunAs("userid", "password", "filepath", "cmdline", "workFolderPath")
[7 FILE.RunAsWait("userid", "password", "filepath", "cmdline", "workFolderPath", maxwait) | Runs filepath under userid with password and waits maxwait(ms) for it to complete.]
FILE.RunAsWait("userid", "password", "filepath", "cmdline", "workFolderPath", maxwait)
[7 FILE.RunCallBack(maxwait, "pproCommand", "filepath", "params", "workFolderPath", "howstart") | Runs filepath, pproCommand executed when the program ends or maxwait(ms) elapse.]
FILE.RunCallBack(maxwait, "pproCommand", "filepath", "params", "workdirectory", "Min|Max|Hide|Normal")
[7 FILE.RunWait(maxwait, "filepath", "params", "work", "howstart") | Runs filepath under userid with password and waits maxwait(ms) for it to complete.]
FILE.RunWait(maxwait, "filepath", "params", "workdirectory", "Min|Max|Hide|Normal")
[7 FILE.SetDate("path", s, date, time) | s = c(change the created date and time) | m(change the modified date and time)]
FILE.SetDate("path", "c|m", "yyyymmdd", "hhmmss")
[7 FILE.SetMaxLine(n) | Set maximum line length for subsequent File.ReadLine calls. (min.314, max.64K)]
FILE.SetMaxLine(n)
[7 FILE.Size("path") | Returns file size in bytes; returns empty if file cannot be opened.]
FILE.Size("path")
[7 FILE.Size64("path") | Returns size as 64 bit integer; use INT64 plugin to work with.]
FILE.Size64("path")
[7 FILE.Type("path") | Returns file type (extension) without leading period.]
FILE.Type("path")
[7 FILE.ValidPath("path") | Returns 1 if valid path, 0 otherwise. (may contain wildcards)]
FILE.ValidPath("path")
[7 FILE.Version("path") | Returns file version info as four blank separated numbers. Returns empty if no version info.]
FILE.Version("path")
[7 FILE.Volume("path") | Returns the volume name for the file path.]
FILE.Volume("path")
[7 FILE.WatchFolder("path", "cmd", maxwait, keywords) | Monitors activity in the folder given by path, when a change occurs cmd executed. blank-separated keywords]
FILE.WatchFolder("path", "cmd", maxwait, "SubTree File Folder Size LastWrite Security")
[7 FILE.WriteAll("path", "text") | Overwrites the file at path with content text]
FILE.WriteAll("path", "text")
[7 FILE.WriteAll("path", "text", "a") | Appends text to file at path.]
FILE.WriteAll("path", "text", "a")
[7 FILE.WriteLine(handle, "text") | Write string to file as a line, adds \r\n if missing. as handle.WriteLine("text")]
FILE.WriteLine(handle, string)
[7 FILE.WriteString(handle, "text") | Write string to file without \r\n. Same as handle.WriteString("text")]
FILE.WriteString(handle, string)
[7 MISCPLUGIN.Count_HardLinks("filepath") | Count Hard Links (for NTFS only). 'sFileName' should be defined as is.]
sFileName = "filepath"
MISCPLUGIN.Count_HardLinks("filepath")
[7 MISCPLUGIN.Create_HardLink("filepath", "folderpath") | Create. Win2k/XP and NTFS only.]
MISCPLUGIN.Create_HardLink("filepath", "folderpath")
[7 MISCPLUGIN.Create_Junction("targetfolderpath", "") | Remove Junction Point (Win2k/XP only).]
MISCPLUGIN.Create_Junction("folderpath", "")
[7 MISCPLUGIN.Create_Junction("targetfolderpath", "sourcefolderpath") | Create Junction Point (Win2k/XP only).]
MISCPLUGIN.Create_Junction("targetfolderpath", "sourcefolderpath")
[7 MISCPLUGIN.FileInfo("Attrib") | Retrieves attributes of a file. (Directory, Archive, Hidden, Readonly, System)]
MISCPLUGIN.FileInfo("Attrib")
[7 MISCPLUGIN.FileInfo("EXIF keyword") | Retrieves EXIF (Exchangeable Image File) info from JPEG file.]
MISCPLUGIN.FileInfo("EXIF Date|Time|Cammake|Cammodel|Glash|Exp|Aper")
[7 MISCPLUGIN.FileInfo("datekeyword") | Retrieves date/time info about a file.]
MISCPLUGIN.FileInfo("Modified|Accessed|Created|ModifiedDate|AccessedDate|CreatedDate|ModifiedTime|AccessedTime|CreatedTime")
[7 MISCPLUGIN.FileInfo("imagesizekeyword") | Retrieves size info about an image (BMP, GIF, JPG, PNG) file.]
MISCPLUGIN.FileInfo("Width|Height|Wxh")
[7 MISCPLUGIN.FileInfo("namekeyword") | Retrieves info about a file.]
MISCPLUGIN.FileInfo("ShortName|Unc")
[7 MISCPLUGIN.FileInfo("sizekeyword") | Retrieves size info about a file/folder.]
MISCPLUGIN.FileInfo("Size|Size:k|Size:m|Size:g|GolderSize")
[7 MISCPLUGIN.NewFile("filepath") | Create a new empty file. Absolute or relative path to the PPro folder.]
MISCPLUGIN.NewFile("filepath")
[7 MISCPLUGIN.Set_FileAttrib("attribkey") | + Sets, - Clears attribute. AHRS for Archive, Hidden, Read-only, System]
MISCPLUGIN.Set_FileAttrib("+A|-A|+H|-H|+R|-R|+S|-S")
[7 MISCPLUGIN.TempFileName("prefix", "folderpath") | Generate unique temporary filename in the TMP folder.]
MISCPLUGIN.TempFileName("prefix", "folderpath")
[7 MISCPLUGIN.Touch_FileTime("field", "date", "time") | Change a file's time stamp.]
MISCPLUGIN.Touch_FileTime("mca", "yyyymmdd", "hhmmss")
[7 PROG.Create_Shortcut("filePath_LNK", "targetPath", "workFolder", "description", "arguments", "iconPath", iconIndex) | Create .LNK shotcut to another file]
PROG.Create_Shortcut("filePath_LNK", "targetPath", "workFolder", "description", "arguments", "iconPath", iconIndex)
[7 PROG.Error_Dialog_Off() | Turn PowerPro script error dialog off.]
PROG.Error_Dialog_Off()
[7 PROG.Error_Dialog_On() | Turn PowerPro script error dialog on.]
PROG.Error_Dialog_On()
[7 PROG.Get_EXE_Type("filePath_EXE_BAT_COM") | Returns PE 4.0|PE 3.5|PE 3.0(win 32-bit app) | NE(win 16-bit app) | MZ(DOS app)]
PROG.Get_EXE_Type("filePath_EXE_BAT_COM")
[7 PROG.Get_Shortcut_Args("filePath_LNK") | ]
PROG.Get_Shortcut_Args("filePath_LNK")
[7 PROG.Get_Shortcut_Description("filePath_LNK") | ]
PROG.Get_Shortcut_Description("filePath_LNK")
[7 PROG.Get_Shortcut_StartDir("filePath_LNK") | ]
PROG.Get_Shortcut_StartDir("filePath_LNK")
[7 PROG.Get_Shortcut_Target("filePath_LNK") | ]
PROG.Get_Shortcut_Target("filePath_LNK")
[7 PROG.Search_Path("fileName") | Searchs %path for a file. Returns absolute path to the first file found on path, null string if nothing found]
PROG.Search_Path("fileName")
[7 PROG.Set_Shortcut_Arguments("filePath_LNK", "args") | ]
PROG.Set_Shortcut_Arguments("filePath_LNK", "args")
[7 PROG.Set_Shortcut_Description("filePath_LNK", "description") | ]
PROG.Set_Shortcut_Description("filePath_LNK", "description")
[7 PROG.Set_Shortcut_StartDir("filePath_LNK", "folderPath") | ]
PROG.Set_Shortcut_StartDir("filePath_LNK", "folderPath")
[7 PROG.Set_Shortcut_Target("filePath_LNK", "targetPath") | ]
PROG.Set_Shortcut_Target("filePath_LNK", "targetPath")

[8    SAVE SETTINGS |G ]
[8 AU.INIDelete("filepath", "section", "key") | Delete a specified value from a standard .INI file. '.\myfile.ini' to indicate a file in the current working directory.]
AU.INIDelete("file", "section", "key")
[8 AU.INIRead("filepath", "section", "key", "value") | Read a specified value from a standard .INI file.]
AU.INIRead("file", "section", "key", "value")
[8 AU.INIWrite("filepath", "section", "key", "value") | Write a specified value to a standard .INI file.]
AU.INIWrite(strFile, strSection, strKey, "value")
[8 INI.Check_Exists("filepath", "section", "key") | Confirms the existence of a file, section or key. Returns 3=all exists, 2=file+section exists , 1=file exists , 0=not even file exists.]
INI.Check_Exists("filepath", "section", "key")
[8 INI.Config("filepath") | Set location of configuration INI file.]
INI.Config("filepath")
[8 INI.Confirm(action) | action = 0(No confirmation)| 1(Confirmation dialog shown for subsequent calls to certain services)]
INI.Confirm(0|1)
[8 INI.Copy_Section("sourcesection", "sourcefile", "destinsection", "destinfile") | Copies a whole section between files or within one file.]
INI.Copy_Section("sourcesection", "sourcefile", "destinsection", "destinfile")
[8 INI.Delete_Key("filepath", "section", "key") | Delete a key from an INI file section.]
INI.Delete_Key("filepath", "section", "key")
[8 INI.Delete_Section("filepath", "section") | Delete a section from an INI file.]
INI.Delete_Section("filepath", "section")
[8 INI.Enum_Keys("filepath", "section") | Return key names in INI section, separated by carriage return, single string.]
INI.Enum_Keys("filepath", "section")
[8 INI.Enum_Sections("filepath") | Return key names in INI section, separated by carriage return, single string.]
INI.Enum_Sections("filepath")
[8 INI.Error_Dialog_Off() | Turn PowerPro script error dialog off.]
INI.Error_Dialog_Off()
[8 INI.Error_Dialog_On() | Turn PowerPro script error dialog on.]
INI.Error_Dialog_On()
[8 INI.Get("filepath", "section", "key") | Get a value from an INI file.]
INI.Get("filepath", "section", "key")
[8 INI.Returns_Nothing() | Determine what the calls return via 'returnval = INI.service'.]
INI.Returns_Nothing()
[8 INI.Returns_Status() | Determine what the calls return via 'returnval = INI.service'.]
INI.Returns_Status()
[8 INI.Returns_Values() | Determine what the calls return via 'returnval = INI.service'.]
INI.Returns_Values()
[8 INI.Set("filepath", "section", "key", "value") | Set a value in an INI file.]
INI.Set("filepath", "section", "key", "value")
[8 INI.UnLoad | Remove plugin from memory.]
INI.UnLoad
[8 INI.Version | Returns the plugin version number as four digit number.]
INI.Version
[8 OPTIONS.Case_Sensitive_Off | turn case sensitive parsing of command line off]
OPTIONS.Case_Sensitive_Off
[8 OPTIONS.Case_Sensitive_On | turn case sensitive parsing of command line on]
OPTIONS.Case_Sensitive_On
[8 OPTIONS.Config("filepath") | set location of configuration ini file]
OPTIONS.Config("filepath")
[8 OPTIONS.Error_Dialog_Off | Turn PowerPro script error dialog off.]
OPTIONS.Error_Dialog_Off
[8 OPTIONS.Error_Dialog_On | Turn PowerPro script error dialog on.]
OPTIONS.Error_Dialog_On
[8 OPTIONS.Eval_Flat_File("options_syntax_file", "command_line_to_parse") | evaluate a command line, options syntax specified by a file, one line per option]
OPTIONS.Eval_Flat_File("options_syntax_file", "command_line_to_parse")
[8 OPTIONS.Eval_INI_File("options_syntax_ini_file", "command_line_to_parse") | evaluate a command line, options syntax specified by an ini file, one section per option]
OPTIONS.Eval_INI_File("options_syntax_ini_file", "command_line_to_parse")
[8 OPTIONS.Eval_String("options_syntax_string", "command_line_to_parse") | evaluate a command line, options syntax specified by a string]
OPTIONS.Eval_String("options_syntax_string", "command_line_to_parse")
[8 OPTIONS.Eval_Vector("options_syntax_vector", "command_line_to_parse") | evaluate a command line, options syntax specified by a vector of strings, one vector element per option]
OPTIONS.Eval_Vector("options_syntax_vector", "command_line_to_parse")
[8 OPTIONS.Set_Delimiter("delimiter_character") | set the character used if ?c…c necessary to return option argument]
OPTIONS.Set_Delimiter("delimiter_character")
[8 OPTIONS.Unload | Remove plugin from memory.]
OPTIONS.Unload
[8 VARS.Chars_To_Hex_Encode("characterSelection") | Specify which characters should be saved in \xNN format.]
VARS.Chars_To_Hex_Encode("characterSelection")
[8 VARS.Config("filepath") | Set location of configuration INI file.]
VARS.Config("filePath_INI")
[8 VARS.Error_Dialog_Off() | Turn PowerPro script error dialog off.]
VARS.Error_Dialog_Off()
[8 VARS.Error_Dialog_On() | Turn PowerPro script error dialog on.]
VARS.Error_Dialog_On()
[8 VARS.Restore("tag", declareVar, "filePath_INI") | Reload all variables that were saved with VARS.Save, declareVar = 1(declare variable) | 0(variables must be declared before-default)]
VARS.Restore("tag", 0|1, "filePath_INI")
[8 VARS.Restore_Var("variableName", "tag", declareVar, "filePath_INI") | Load value of variable from VARS file, declareVar = 1(declare variable) | 0(variables must be declared before-default)]
VARS.Restore_Var("variableName", "tag", 0|1, "filePath_INI")
[8 VARS.Save("section", createSections, addStatics, addGlobals, "filePath_INI") | Save all script variables to INI file. 0(no variables) | 1(all variables of the relevant storage class-including scalars, maps and vecs) | 2(picklist will popup repeatedly offering a list ) | 3(As 2, but you can select multiple variables)]
VARS.Save("section", 0|1, 0|1|2|3, 0|1|2|3, "filePath_INI")
[8 VARS.Save_Var("variableName", "section", "filePath_INI") | Save value of script variable to INI file.]
VARS.Save_Var("variableName", "section", "filePath_INI")
[8 VARS.UnLoad | Remove plugin from memory.]
VARS.UnLoad
[8 VARS.Version | Returns the plugin version number as four digit number.]
VARS.Version

[9    INPUT |G ]
[9 _PickedLine_ | index of the last string chosen from a PickFile or PickString dialog or set after Menu command to 0(menu dismissed without selection) | 1(item picked)]
_PickedLine_
[9 FileMenu("filepath", "pos") | Displays a file as a menu; the selected item is the result. Optionally, pos includes positioning keywords]
FileMenu("filepath", "Offset x y|Screen x y|CenterUnderMouse|CenterScreen|HorButton|HorButtonCenter|VerButton|Cursor")
[9 Input("title") | Prompts for input using title for the input dialog's title.]
Input("title")
[9 InputCancel("title") | Same as Input, except that if Cancelled the running script quits.]
InputCancel("title")
[9 InputColor("defaultColor") | Displays color dialog and returns results as single number]
InputColor("defaultColor")
[9 InputDate | Displays calendar calculator dialog and returns selected date as yyyymmdd.]
InputDate
[9 InputDateTime | Displays calendar calculator dialog and returns date and time as yyymmddhhmmss]
InputDateTime
[9 InputDefault("default", "title") | Prompts for input string, preset with default value.]
InputDefault("default", "title")
[9 InputDialog("var1=title1, ... var6=title6", "dialogtitle") | Displays a dialog with max.6 controls (editbox, checkbox, combobox) to set variables. use "var==title" to display a password edit box]
InputDialog("var1=editboxtitle, var2=checkbox label??, var3=combo title??item1|item2, var4=combo title?§|item1|item2, var5==title, ~var6=title6"", "dialogtitle")
[9 InputFolder("path") | Displays folder browse dialog and returns results, path is optional starting point.]
InputFolder("path")
[9 InputPath("path") | Displays file browse dialog for file open and returns results, path is optional starting point.]
InputPath("path")
[9 InputPathMulti("path") | Displays file browse dialog and returns results, multiple files can be selected.]
InputPathMulti("path")
[9 InputSaveAsPath("path") | Displays file browse dialog for file save and returns results, path is optional starting point.]
InputSaveAsPath("path")
[9 InputText | Prompts for text. Same as Input("title") but you cannot set title.]
InputText
[9 PickFile("filepathlist", "title") | Returns a full file path from a dialog of names only.]
PickFile("filepathlist", "title")
[9 MessageBox("layout", "text", "title") | Returns: 0(Cancel), 1(OK), 3(Abort), 4(Retry), 5(Ignore), 6(Yes), 7(No)]
MessageBox("[AbortRetryIgnore|OkCancel|RetryCancel|YesNoCancel|YesNo|Ok] [Topmost] [Asterisk|Error|Exclamation|Information|Stop|Question|Warning]", "text", "title")
[9 PickString("stringlines", "title") | Selects a string from a list in a dialog]
PickString("string1\rstring2\rstring3", "title")
[9 SetNextDialogPos(left, top, width, height, topmost) | Set position, size of next Input dialog, 'top' in final parameter shows dialog topmost.]
SetNextDialogPos(left, top, width, height, topmost)
[9 Exec.CommandLine | Show a tiny command line to enter a command to run.]
Exec.CommandLine
[9 Exec.Prompt(resultflagno, "text") | Display a Yes/No dialog with text and set resultflagno to 0(no), 1(yes)]
Exec.Prompt(resultflagno, "text")
[9 Exec.Prompt(outputVar, "text") | Display a Yes/No/Cancel dialog and set outputVar to 0(no), 1(yes), 2(cancel)]
Exec.Prompt(outputVar, "text")
[9 BEE.Color() | Color picker dialog. Returns RGB color string (eg."128 0 255")]
BEE.Color()
[9 BEE.File(save|opendialog, "fileFilter") | File open/save dialog. Returns the file path]
BEE.File(0|1, "Text Files(*.txt)|*.txt||")
BEE.File(0|1, "All Files(*.*)|*.*||")
[9 BEE.Font() | Font picker dialog]
BEE.Font()
fontname   = BEE.FontName()
fontheight = BEE.FontHeight()
fontcolor  = BEE.FontColor()
fontitalic = BEE.FontIA()
fontuline  = BEE.FontUA()
fontstrike = BEE.FontSA()
[9 DATE.Get | Displays a calendar and returns selected date. Returns 0 if Cancel pressed.]
DATE.Get
[9 MISCPLUGIN.RunDialog() | Invoke the shell's run dialog.]
MISCPLUGIN.RunDialog()
[9 DIALOG.Browse_For_File(dialogHandle, type_and_options, "initialFolderPath", "title", "defaultExtension", "filter", "defaultFileName", "varNameROState") | Dispay "File Open"/"File Save As" dialog. Returns full path to the file chosen. All parameters optional)
DIALOG.Browse_For_File(dialogHandle, "Open|Save|Multiple CreatePrompt|FileCanBeAbsent|PathCanBeAbsent|HideReadonly|Readonly|AllowOverwrite|NoChangeDir|NoDereferenceLinks", "initialFolderPath", "title", "TXT|DOC|BAK|...", "*.TXT;*.DOC;*.BAK;...", "defaultFileName", "varNameROstate")
[9 DIALOG.Change_Style(dialogHandle|ctrlID, "styles", addstyle) | Change the styles applied to a control/dialog after a dialog is created or run. addstyle = 0(specified styles are removed) | 1(specified styles are added)]
DIALOG.Change_Style(dialogHandle|ctrlID, "SysMenu|MinBox|MaxBox|Centre|CentreMouse|NoBorder|NoDlgFrame|ThickFrame|3D|ModalFrame|Hidden|Tool|ToolWin|Topmost|Draggable", 0|1)
[9 DIALOG.Choose_Font(dialogHandle|ctrlID, "var_for_colour") | Dispay font choice dialog. Returns a font description compatible with the <font_spec> parameter]
DIALOG.Choose_Font(dialogHandle|ctrlID, "var_for_colour")
[9 DIALOG.Clear(dialogHandle/ctrlID, item) | Clear dialog. item optional]
DIALOG.Clear(dialogHandle|ctrlID, item)
[9 DIALOG.Config("filePath_INI") | set location of configuration ini file]
DIALOG.Config("filePath_INI")
[9 DIALOG.Destroy(dialogHandle|controlhandle) | kill off a dialog and it's data structure]
DIALOG.Destroy(dialogHandle|controlhandle)
[9 DIALOG.Destroy_Window(dialogHandle, valuetoreturn) | kill off a dialog's window]
DIALOG.Destroy_Window(dialogHandle, valuetoreturn)
[9 DIALOG.DestroyAll() | terminate all dialogs and their data structures]
DIALOG.DestroyAll()
[9 DIALOG.Define(x, y, width, height, "caption", "styles", "scriptname", "arg", "events", "actiononclose", "iconpath", iconnumber, "fontspec", "rightclickcommand") | Define a dialog's properties. styles (and rest) optional]
DIALOG.Define(x, y, width, height, "caption", "SysMenu|MinBox|MaxBox|Centre|CentreMouse|NoBorder|NoDlgFrame|ThickFrame|3D|ModalFrame|Hidden|Tool|ToolWin|Topmost|Draggable", "scriptname", "arg", "events", "actiononclose", "iconpath", iconnumber, "fontspec", "rightclickcommand")
[9 DIALOG.Define_Control(dialogHandle, x, y, width, height, "controltype", "name", textorvar, "styles", "scriptname", "arg", "events", foreground, background, id, "fontspec", "tooltip", "tooltipstyle", "rightclickcommand") | Add a control and it's properties to an existing dialog.]
DIALOG.Define_Control(dialogHandle, x, y, width, height, "Button|Group|CheckBox|3State|RadioButton|Static|EditBox|ListBox|ComboBox|ScrollBar|Spinner|Slider|Progress|DateTime|MonthCal|ActiveX|StatusBar|TabControl|TreeView|RichEdit|Scintilla|ListView|Animation", "name", textorvar, "styles", "scriptname", "arg", "events", foreground, background, "OK|Cancel|Escapable", "fontspec", "tooltip", "Always|Balloon|Centre|SlashIsNL|ShowAfter|ShowAfter:nn|StayOpen:nn|Width:nn", "rightclickcommand")
[9 DIALOG.Define_Set(dialogHandle, "name", "controltypes", "includedcontrolsanded", "includedcontrolsored", "excludedcontrols") | Creates a set of controls. Returns a handle to the set. name (and rest) optional]
DIALOG.Define_Set(dialogHandle, "name", "controltypes", "includedcontrolsanded", "includedcontrolsored", "excludedcontrols")
[9 DIALOG.Enable(dialogHandle|ctrlID, action) | Enables/disables a dialog or control.]
DIALOG.Enable(dialogHandle|ctrlID, 0|1)
[9 DIALOG.Create(dialogHandle, modalmode, ownerhandle) | A prepared dialog comes into existence. modalmode (and rest) optional]
DIALOG.Create(dialogHandle, 0|1|2, ownerhandle)
[9 DIALOG.Create("definitionfile", modalmode, ownerhandle) | Creates a dialog from a definition file. modalmode (and rest) optional]
DIALOG.Create("definitionfile", 0|1|2, ownerhandle)
[9 DIALOG.Get_Base(dialogHandle, "iconpath", iconnumber) | Returns index base (0|1-default)]
DIALOG.Get_Base
[9 DIALOG.Get_LastClicked() | Returns handle of the last control/dialog which responded to a user action by a user-defined mouse click/left click/keyboard shortcut]
DIALOG.Get_LastClicked()
[9 DIALOG.Get_Value(dialogHandle|ctrlID, "property") | Gets some value from a control or dialog. property optional]
DIALOG.Get_Value(dialogHandle|ctrlID, "Tool|Font|Fonthandle|Hwnd|ID|Type|Name|PrevCtrl|Owner")
[9 DIALOG.Help | opens the help file associated with the dialog plugin]
DIALOG.Help
[9 DIALOG.Make_Ctrl_Handle(handle, ctrlID) | Returns a handle to control.]
DIALOG.Make_Ctrl_Handle(handle, ctrlID)
[9 DIALOG.Returns_Nothing() | Determine what the calls return via 'returnval = DIALOG.service'.]
DIALOG.Returns_Nothing()
[9 DIALOG.Returns_Status() | Determine what the calls return via 'returnval = DIALOG.service'.]
DIALOG.Returns_Status()
[9 DIALOG.Returns_Values() | Determine what the calls return via 'returnval = DIALOG.service'.]
DIALOG.Returns_Values()
[9 DIALOG.RGB(red, green, blue) | get RBG COLORREF from red, green, blue values]
DIALOG.RGB(0-255, 0-255, 0-255)
[9 DIALOG.Run(dialogHandle, showtype, modalmode, ownerhandle) | Run a dialog that is been defined and populated with controls. showtype (and rest) optional]
DIALOG.Run(dialogHandle, showtype, modalmode, ownerhandle)
[9 DIALOG.Run("definitionfile", showtype, modalmode, ownerhandle) | Create a dialog from a dialog definition file and run it. showtype (and rest) optional]
DIALOG.Run("definitionfile", showtype, modalmode, ownerhandle)
[9 DIALOG.RunDialog() | Invoke dialog.]
DIALOG.RunDialog()
[9 DIALOG.Send_Message(dialogHandle|ctrlID, "message", wParam, lParam, "lParam_type", redraw) | Send a message to a control/dialog]
DIALOG.Send_Message(dialogHandle|ctrlID, "message", wParam, lParam, "String|Number|C_DLLPluginHandle", |1)
[9 DIALOG.Set_Base(dialogHandle, "iconpath", iconnumber) | Set index base. Default 1]
DIALOG.Set_Base(0|1)
[9 DIALOG.Set_Colour(target, "tooltip|tool|tip", foreground, background) | set control's foreground, background colours]
DIALOG.Set_Colour(target, "tooltip|tool|tip", foreground, background)
[9 DIALOG.Set_Focus(dialogHandle|ctrlID) | Switch focus to a particular dialog or control.]
DIALOG.Set_Focus(dialogHandle|ctrlID)
[9 DIALOG.Set_Font(dialogHandle|ctrlID, "font", tooltip_flag) | Change dialog's/control's font]
DIALOG.Set_Font(dialogHandle|ctrlID, "font", "|T")
[9 DIALOG.Set_Icon(dialogHandle, "iconpath", iconnumber) | change the dialog icon]
DIALOG.Set_Icon(dialogHandle, "iconpath", iconnumber)
[9 DIALOG.Set_Image(targethandle, "imgpath", iconnumber) | set a static control's image]
DIALOG.Set_Image(targethandle, "imgpath", iconnumber)
[9 DIALOG.Set_Position(dialogHandle|ctrlID, x, y, width, height) | Change position/dimensions of dialog/control]
DIALOG.Set_Position(dialogHandle|ctrlID, x, y, width, height)
[9 DIALOG.Set_Range(targethandle, min, max) | set range for spinner control]
DIALOG.Set_Range(targethandle, min, max)
[9 DIALOG.Set_Range(targethandle, min, max, scrollslidepagesize) | set range, page size for scrollbar and slider controls]
DIALOG.Set_Range(targethandle, min, max, scrollslidepagesize)
[9 DIALOG.Set_Range(targethandle, min, max, progressstep) | set range, step progressbar control]
DIALOG.Set_Range(targethandle, min, max, progressstep)
[9 DIALOG.Set_Response(target, scriptpath, command_arg, events|mouse_event|sys_command|"tray"|"trayicon") | change command, args, events for control or dialog]
DIALOG.Set_Response(target, scriptpath, command_arg, events|"Left|Middle|Right|Mouse4|Mouse5"|"Close|Size|Move|Minimize|Maximize|Restore|Default"|"tray"|"trayicon")
[9 DIALOG.Set_ToolTip(ctrlID, "text", "style", "font", "scriptname", "arg", "forecolour", "backcolour", delay, "title", "icon") | Set tooltip of controls. text (and rest) optional]
DIALOG.Set_ToolTip(ctrlID, "text", "style", "font", "scriptname", "arg", "forecolour", "backcolour", delay, "title", "icon")
[9 DIALOG.Set_Value(dialogHandle|ctrlID, "property") | Set the a value of a control or the caption of a dialog. property optional]
DIALOG.Set_Value(dialogHandle|ctrlID, "Tool|Font|Fonthandle|Hwnd|ID|Type|Name|PrevCtrl|Owner")
[9 DIALOG.Show(ctrlID, showtype) | Show/hide a control.]
DIALOG.Show(ctrlID, "Show/Hide")
[9 DIALOG.Show(dialogHandle, "showtype") | Change display state of dialog (should be created or run already)]
DIALOG.Show(dialogHandle, "Show|Hide|Restore|Minimize|Maximize|Normal|Goreground|TrayIcon|TrayMin|TrayDel")
[9 DIALOG.Show(dialogHandle, "traystate", "scriptname", "arg", "mouseaction") | Change running displays state. scriptname (and rest) optional ]
DIALOG.Show(dialogHandle, "TrayMin|TrayIcon", "scriptname", "arg", "mouseaction")
[9 DIALOG.UnLoad | Remove plugin from memory.]
DIALOG.UnLoad
[9 DIALOG.Version | Returns the plugin version number as four digit number.]
DIALOG.Version
[9 MSGBOX.Display("message", "caption", "buttons icon defaultbutton") | Space seperated properties optional (default OK)). Returns: 1(OK) | 2(Cancel) | 3(Abort) | 4(Retry) | 5(Ignore) |   6(Yes) | 7(No)]
result = MSGBOX.Display("message", "caption", "|OKCANCEL|ABORTRETRYIGNORE|YESNOCANCEL|YESNO|RETRYCANCEL ERROR|QUESTION|WARNING|INFORMATION BUTTON1|BUTTON2|BUTTON3")
[9 MSGBOX.UnLoad | Remove plugin from memory.]
MSGBOX.UnLoad

[10    INTERNET |G ]
[10 BrowserDomain | Domain in current browser window.]
BrowserDomain
[10 BrowserSubdomain | Domain and subdomain in current browser window.]
BrowserSubdomain
[10 BrowserURL("browsername") | URL in current browser window]
BrowserURL("IExplore|Netscape|Firefox|Maxthon|Mozilla")
[10 Exec.SetBrowser("brwsr") | Set default browser for BrowserURL function.]
Exec.SetBrowser("IExplore|Netscape|Firefox|Maxthon|Mozilla")
[10 MAIL.Check_Connected() | returns number of messages waiting on the server, should only be used after a Connect_To_Accnt_Threaded]
MAIL.Check_Connected()
[10 MAIL.Check_On_Internet() | returns 1 if device appears to have a WAN IP address, 0 otherwise (maybe connected thru LAN)]
MAIL.Check_On_Internet()
[10 MAIL.Check_Ras_Connected() | If you’re connected via RAS, returns the name of RAS connection, otherwise returns empty string]
MAIL.Check_Ras_Connected()
[10 MAIL.Clean_String("string", "chars_to_remove") | cleans a string of unwanted characters, chars_to_remove optional (default chars=?'&<>"_ )]
MAIL.Clean_String("string", "chars_to_remove")
[10 MAIL.Config("filePath_INI") | set location of configuration ini file]
MAIL.Config("filePath_INI")
[10 MAIL.Connect_To_Accnt("pop3server", "login", "pass", portNumber) | Returns message count on the server, -1 if unsuccesfull. portNumber optional. (If a connection already exists, it will be disconnected)]
MAIL.Connect_To_Accnt("pop3server", "login", "pass", portNumber)
[10 MAIL.Connect_To_Accnt_Threaded("pop3server", "login", "pass", portNumber) | Start connecting to server, return immediately. portNumber optional]
MAIL.Connect_To_Accnt_Threaded("pop3server", "login", "pass", portNumber)
[10 MAIL.Decode_Mime("encodedstring", "underscores2space") | translates MIME QP encoding. underscores2space optional]
MAIL.Decode_Mime("encodedstring", 0|1)
[10 MAIL.Delete_Msg(msgno) | Mark a specific message for deletion (it will happen when you execute a disconnect)]
MAIL.Delete_Msg(msgno)
[10 MAIL.Disconnect | Disconnect from POP3 server]
MAIL.Disconnect
[10 MAIL.Error_Dialog_Off() | Turn PowerPro script error dialog off.]
MAIL.Error_Dialog_Off()
[10 MAIL.Error_Dialog_On() | Turn PowerPro script error dialog on.]
MAIL.Error_Dialog_On()
[10 MAIL.Get_Msg_Cc(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Cc(msgno)
[10 MAIL.Get_Msg_Cc_Clean(msgno, "chars_to_remove") | returns the text of the relevant field, characters that Powerpro has problems are removed. chars_to_remove optional (default chars=?'&<>"_ )]
MAIL.Get_Msg_Cc_Clean(msgno, "chars_to_remove")
[10 MAIL.Get_Msg_Date(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Date(msgno)
[10 MAIL.Get_Msg_Date_Deliv(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Date_Deliv(msgno)
[10 MAIL.Get_Msg_Date_Sent(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Date_Sent(msgno)
[10 MAIL.Get_Msg_From(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_From(msgno)
[10 MAIL.Get_Msg_From_Clean(msgno, "chars_to_remove") | returns the text of the relevant field, characters that Powerpro has problems are removed. chars_to_remove optional (default chars=?'&<>"_ )]
MAIL.Get_Msg_From_Clean(msgno, "chars_to_remove")
[10 MAIL.Get_Msg_Header(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Header(msgno)
[10 MAIL.Get_Msg_Header_Field(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Header_Field(msgno)
[10 MAIL.Get_Msg_Id(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Id(msgno)
[10 MAIL.Get_Msg_Popfile_Category(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Popfile_Category(msgno)
[10 MAIL.Get_Msg_Reply_To(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Reply_To(msgno)
[10 MAIL.Get_Msg_Reply_To_Clean(msgno, "chars_to_remove") | returns the text of the relevant field, characters that Powerpro has problems are removed. chars_to_remove optional (default chars=?'&<>"_ )]
MAIL.Get_Msg_Reply_To_Clean(msgno, "chars_to_remove")
[10 MAIL.Get_Msg_Size(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Size(msgno)
[10 MAIL.Get_Msg_Subj(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Subj(msgno)
[10 MAIL.Get_Msg_Subj_Clean(msgno, "chars_to_remove") | returns the text of the relevant field, characters that Powerpro has problems are removed. chars_to_remove optional (default chars=?'&<>"_ )]
MAIL.Get_Msg_Subj_Clean(msgno, "chars_to_remove")
[10 MAIL.Get_No_Msgs("serverip", "login", "pass") | Returns mail message count on the pop3 server.]
MAIL.Get_No_Msgs("serverip", "login", "pass")
[10 MAIL.Get_Timeout | Get timeout period (ms) after which operation is considered to have failed]
MAIL.Get_Timeout
[10 MAIL.Get_Total_Msg_Size | Get sum of size of all messages waiting on server]
MAIL.Get_Total_Msg_Size
[10 MAIL.Help | opens help file for plugin, if it can be found]
MAIL.Help
[10 MAIL.Nop | issues a "NOOP" command to the server]
MAIL.Nop
[10 MAIL.Retrieve(msgno) | Retrieve a message, body included, either to variable]
MAIL.Retrieve(msgno)
[10 MAIL.Retrieve_Clean(msgno, "chars_to_remove") | Retrieve a message, body included, either to a file]
MAIL.Retrieve_Clean(msgno, "chars_to_remove")
[10 MAIL.Retrieve_To_File(msgno, "filepath") | Retrieve a message, body included, either to a file]
MAIL.Retrieve_To_File(msgno, "filepath")
[10 MAIL.Returns_Nothing() | Determine what the calls return via 'returnval = MAIL.service'.]
MAIL.Returns_Nothing()
[10 MAIL.Returns_Status() | Determine what the calls return via 'returnval = MAIL.service'.]
MAIL.Returns_Status()
[10 MAIL.Returns_Values() | Determine what the calls return via 'returnval = MAIL.service'.]
MAIL.Returns_Values()
[10 MAIL.Set_Timeout() | Set timeout period (ms) after which operation is considered to have failed. timeout period should be specified in variable x6]
MAIL.Set_Timeout
[10 MAIL.Undo_Deletes() | Unmark messages marked for deletion]
MAIL.Undo_Deletes
[10 MAIL.UnLoad | Remove plugin from memory.]
MAIL.UnLoad
[10 MAIL.Use_Long_Vars | variables beginning with ml_ are used for input and output]
MAIL.Use_Long_Vars
[10 MAIL.Use_X_Vars | variables x0-x6 are used for input and output]
MAIL.Use_X_Vars
[10 MAIL.Version | Returns the plugin version number as four digit number.]
MAIL.Version
[10 PPSKYPE.Attach("scriptfilename") | Attach to Skype API to be able to receive notifications and send commands. script file must be stored in powerpro script folder]
PPSKYPE.Attach("scriptfilename")
[10 PPSKYPE.Detach | Stop listening from Skype notifications.]
PPSKYPE.Detach
[10 PPSKYPE.SendCommand("skypecommand") | Send a command to skype]
PPSKYPE.SendCommand("skypecommand")
[10 SMTP.Add_Attachment("filenames", "encodingCharset", "contentType", base64) | add an attachment to message]
SMTP.Add_Attachment("recipient", "encodingCharset", "contentType", 0|1)
[10 SMTP.Add_Recipient("recipient", "type") | specify a recipient to message]
SMTP.Add_Recipient("recipient", "To|CC|BCC")
[10 SMTP.Check_Service_Complete() | check if threaded connection process is complete]
SMTP.Check_Service_Complete()
[10 SMTP.Clear_Msg | remove a constructed message from the plugin]
SMTP.Clear_Msg
[10 SMTP.Config("filePath_INI") | Set location of configuration ini file]
SMTP.Config("filePath_INI")
[10 SMTP.Connect_To_Accnt("hostname", "username", "password", port, bAutoDial, "authMethod", bDNSLookup, "boundIP", "successCmd", "failCmd") | connect to SMTP server, blocks PowerPro until the message is sent]
SMTP.Connect_To_Accnt("hostname", "username", "password", port, 0|1, "None|Socks4|Socks5|HTTP", bDNSLookup, "boundIP", "successCmd", "failCmd")
[10 SMTP.Create_Msg("from", "subject", "text", html, "replyTo", "name", "encodingCharset", mime, "priority", "Xmailer") | create a message. HTML (and rest) optional)]
SMTP.Create_Msg("from", "subject", "text", 0|1, "replyTo", "name", "encodingCharset", 0|1, "priority", "Xmailer")
[10 SMTP.Disconnect("successCmd", "failCmd") | disconnect from SMTP servers]
SMTP.Disconnect("successCmd", "failCmd")
[10 SMTP.Error_Dialog_Off() | Turn PowerPro script error dialog off.]
SMTP.Error_Dialog_Off()
[10 SMTP.Error_Dialog_On() | Turn PowerPro script error dialog on.]
SMTP.Error_Dialog_On()
[10 SMTP.Help | opens help file for plugin, if it can be found]
SMTP.Help
[10 SMTP.Send_Msg("successCmd", "failCmd") | send the constructed message to connected server]
SMTP.Send_Msg("successCmd", "failCmd")
[10 SMTP.Set_Connection_Properties("authorisationMethod", bDNSLookup, "boundIP") | bDNSLookup and boundIP optional]
SMTP.Set_Connection_Properties("None|Plain|Encoded|Cram|NTLM", 0|1, "boundIP")
[10 SMTP.Set_Msg_Text("text", html) | add message text]
SMTP.Set_Msg_Text("text", 0|1)
[10 SMTP.Set_Proxy("type", parameters) | There may be up to 5 further parameters, depending on the proxy type]
SMTP.Set_Proxy("None|Socks4|Socks5|HTTP", parameters)
[10 SMTP.Set_Timeout(timeout_ms) | Set timeout period (ms) after which operation is considered to have failed]
SMTP.Set_Timeout(timeout_ms)
[10 SMTP.UnLoad | Remove plugin from memory.]
SMTP.UnLoad
[10 SMTP.Version | Returns the plugin version number as four digit number.]
SMTP.Version
[10 ZA.Get_In | returns the current session's inbound TCP/IP traffic from ZoneAlarm]
ZA.Get_In
[10 ZA.Get_Lock | returns 1 if ZoneAlarm is locked, 2 if the emergency lock is engaged, and 0 otherwise]
ZA.Get_Lock
[10 ZA.Get_Out | returns the current session's outward TCP/IP traffic from ZoneAlarm]
ZA.Get_Out
[10 ZA.Switch_Lock | locks or unlocks ZoneAlarm]
ZA.Switch_Lock
[10 ZA.UnLoad | Remove plugin from memory.]
ZA.UnLoad

[11    KEYBOARD & MOUSE |G ]
[11  Alt | Returns pressed keys: 1(left Alt), 2(right Alt), 3(both)]
Alt
[11  Ctrl | Returns pressed keys: 1(left Ctrl), 2(right Ctrl), 3(both)]
Ctrl
[11  Shift | Returns pressed keys: 1(left Shift), 2(right Shift), 3(both)]
Shift
[11  Win | Returns pressed keys: 1(left Win), 2(right Win), 3(both)]
Win
[11  KeyLog | Returns X if logging; zero otherwise.]
KeyLog
[11  KeyLogFile | Returns name of currently open key log file.]
KeyLogFile
[11  LastHotKeyDown | If key setup used to specify both down and up to be signaled as hotkeys for mouse button, set 1 if mouse button is down, 0 otherwise.]
LastHotKeyDown
[11  LastMouseKeyTime | Returns time since last mouse or keyboard action (in milliseconds since Windows start)]
LastMouseKeyTime
[11  LastScanCode | Returns scan code of last hot key (plus 256 if extended key bit set)]
LastScanCode
[11  LastVKcode | Returns virtual Key code of last hot key]
LastVKcode
[11  Mouse4 | Returns 1 if mouse 4 button is down, 0 otherwise.]
Mouse4
[11  Mouse5 | Returns 1 if mouse 5 button is down, 0 otherwise.]
Mouse5
[11  MouseLeft | Returns 1 if left mouse button is down, 0 otherwise.]
MouseLeft
[11  MouseMiddle | Returns 1 if middle mouse button is down, 0 otherwise.]
MouseMiddle
[11  MouseRight | Returns 1 if right mouse button is down, 0 otherwise.]
MouseRight
[11  xCursor | Returns horizontal text cursor position in pixels (0 for left edge of screen)]
xCursor
[11  yCursor | Returns vertical text cursor position in pixels (0 for top edge of screen)]
yCursor
[11  xMouse | Returns horizontal mouse position in pixels (0 for left edge of screen)]
xMouse
[11  yMouse | Returns vertical mouse position in pixels (0 for top edge of screen)]
yMouse
[11 Exec.AutoPress | Learn or unlearn a window type to be clicked. Used to learn new types of windows for mouse stop/press]
Exec.AutoPress
[11 Exec.HotKeys("action") | Suspend or re-activate hotkeys.]
Exec.HotKeys("On|Off|Reverse")
[11 Exec.LogKeys "filepath|=filepath" | Log keystrokes to file. Blank stops, filepath starts, =filepath toggles start/stop.]
Exec.LogKeys "filepath|=filepath"
[11 Exec.ScrollWindow | Scroll the window under the mouse.]
Exec.ScrollWindow
[11 Exec.ScrollWithMouse | Start manual scrolling.]
Exec.ScrollWithMouse
[11 Exec.TraceKey | Show/stop each key press and release in a debug window (not for Windows Vista)]
Exec.TraceKey
[11 Exec.WheelLimit n ModsOnly | Limit max.mouse wheel speed to every n milliseconds. Optional ModsOnly to have speed limit for hot keys with mod keys only]
Exec.WheelLimit n ModsOnly
[11 Win.Mouse("expression") | All commands of Win.Mouse can be combined in a space-separated expression]
Win.Mouse("Alt Ctrl Shift Win LeftClick LeftDown LeftUp LeftDouble MiddleClick MiddleDown MiddleClick MiddleUp MiddleDouble RightClick RightDown RightUp RightDouble Save Restore Move x y Screen x y Relative x y")
[11 Win.Mouse("Alt") | Reverse alt key (ie press if up, release if down) shortform: al]
Win.Mouse("Alt")
[11 Win.Mouse("Ctrl") | Reverse ctrl key (ie press if up, release if down) shortform: ct]
Win.Mouse("Ctrl")
[11 Win.Mouse("Shift") | Reverse shift key (ie press if up, release if down) shortform: sh]
Win.Mouse("Shift")
[11 Win.Mouse("Win") | Reverse win key (ie press if up, release if down) shortform: wi]
Win.Mouse("Win")
[11 Win.Mouse("LeftClick") | Left click (both left down and left up). shortform: lc]
Win.Mouse("LeftClick")
[11 Win.Mouse("LeftDown") | Left down. shortform: ld]
Win.Mouse("LeftDown")
[11 Win.Mouse("LeftUp") | Left up. shortform: lu]
Win.Mouse("LeftUp")
[11 Win.Mouse("LeftDouble") | Double click left (lc lc will not work). shortform: ll]
Win.Mouse("LeftDouble")
[11 Win.Mouse("MiddleClick") | Middle click (both middle down and middle up). shortform: mc]
Win.Mouse("MiddleClick")
[11 Win.Mouse("MiddleDown") | Middle down. shortform: md]
Win.Mouse("MiddleDown")
[11 Win.Mouse("MiddleUp") | Middle up. shortform: mu]
Win.Mouse("MiddleUp")
[11 Win.Mouse("MiddleDouble") | Double click middle (mc mc will not work). shortform: mm]
Win.Mouse("MiddleDouble")
[11 Win.Mouse("RightClick") | Right click (both right down and right up). shortform: rc]
Win.Mouse("RightClick")
[11 Win.Mouse("RightDown") | Right down. shortform: rd]
Win.Mouse("RightDown")
[11 Win.Mouse("RightUp") | Right up. shortform: ru]
Win.Mouse("RightUp")
[11 Win.Mouse("RightDouble") | Double click right (rc rc will not work). shortform: rr]
Win.Mouse("RightDouble")
[11 Win.Mouse("Save") | Save current mouse position. shortform: sa]
Win.Mouse("Save")
[11 Win.Mouse("Restore") | Restore mouse position.]
Win.Mouse("Restore")
[11 Win.Mouse("Move x y") | Move mouse x pixels right, y pixels down (x or y can be negative). shortform: mo x y]
Win.Mouse("Move x y")
[11 Win.Mouse("Screen x y") | Set mouse to absolute position x y (absolute means 0 0 is top left of screen). shortform: ab x y]
Win.Mouse("Screen x y")
[11 Win.Mouse("Relative x y") | Set mouse to relative position x y (relative means 0 0 is top left of active window). shortform: re x y]
Win.Mouse("Relative x y")
[11 *Macro | *Macro command can only be used with hot keys.]
*Macro
[11 AU.BlockInput(toogle) | Will prevent any user input via the mouse or keyboard. toggle = 0(enable) | 1(block)]
AU.BlockInput(0|1)
[11 AU.LeftClick(x, y) | Simulates a mouse left-click at a given coordinate relative to the currently active window. Run the command twice for double click.]
AU.LeftClick(x, y)
[11 AU.LeftClickDrag(xFrom, yFrom, xTo, yTo) | Simulates a mouse left-click-drag operation. Coordinates are relative to the currently active window]
AU.LeftClickDrag(xFrom, yFrom, xTo, yTo)
[11 AU.MouseGetPosx | Returns the X coordinate of the mouse pointer relative to the currently active window.]
AU.MouseGetPosx
[11 AU.MouseGetPosy | Returns the Y coordinate of the mouse pointer relative to the currently active window.]
AU.MouseGetPosy
[11 AU.MouseMove(x, y) | Moves the mouse pointer to the specified coordinates relative to the currently active window.]
AU.MouseMove(x, y)
[11 AU.RightClick(x, y) | Simulates a mouse right-click at a given coordinate relative to the currently active window. Run the command twice for double click.]
AU.RightClick(x, y)
[11 AU.RightClickDrag(xFrom, yFrom, xTo, yTo) | Simulates a mouse left-click-drag operation. Coordinates are relative to the currently active window]
AU.RightClickDrag(xFrom, yFrom, xTo, yTo)
[11 AU.SetCapslockState(toggle) | Set the state of the CAPSLOCK key to either on or off. toggle = 0(off) | 1(on)]
AU.SetCapslockState(0|1)
[11 AU.SetStoreCapslockMode(toggle) | By default, at the start of a 'Send' command AutoIt will store the state of the CAPSLOCK key; at the end of the 'Send' command this status will be restored. Use this command to turn off this behaviour. toggle = 1(store/restore), 0(ignore)]
AU.SetStoreCapslockMode(0|1)
[11 AU3.MouseClick("button", x, y, clickCount, speed) | Perform a mouse click. x/y coordinates to move the mouse to (default current position). Optional speed = 0(instant) | 1(fastest) - 100(slowest) default 10)]
AU3.MouseClick("Left|Middle|Right", x, y, clickCount, 0-100)
[11 AU3.MouseClickDrag("button", x1, y1, x2, y2, speed) | Perform a mouse click and drag. x1/y1 from to x2/y2 coordinates. Optional speed = 0(instant) | 1(fastest) - 100(slowest) default 10]
AU3.MouseClickDrag("Left|Middle|Right", x1, y1, x2, y2, 0-100)
[11 AU3.MouseDown("button") | Perform a mouse down event at the current mouse position. button optional (default "Left")]
AU3.MouseDown("|Left|Middle|Right")
[11 AU3.MouseGetCursor() | Returns a cursor ID Number of the current Mouse Cursor]
AU3.MouseGetCursor()
[11 AU3.MouseGetPosX() | Retrieves the current X position of the mouse cursor]
AU3.MouseGetPosX()
[11 AU3.MouseGetPosY() | Retrieves the current Y position of the mouse cursor]
AU3.MouseGetPosY()
[11 AU3.MouseMove(x, y, speed) | Moves the mouse pointer. Optional speed = 0(instant) | 1(fastest) - 100(slowest) default 10]
AU3.MouseMove(x, y, 0-100)
[11 AU3.MouseUp("button") | Perform a mouse up event at the current mouse position]
AU3.MouseUp("Left|Middle|Right")
[11 AU3.MouseWheel("direction", count) | Move the mouse wheel up or down (XP ONLY). Optional count, default 1]
AU3.MouseWheel("Up|Down", count)
[11 AU3.WinGetCaretPosX() | Returns X coordinate of the caret in the foreground window. See CaretCoordMode for options.]
AU3.WinGetCaretPosX()
[11 AU3.WinGetCaretPosY() | Returns Y coordinate of the caret in the foreground window. See CaretCoordMode for options.]
AU3.WinGetCaretPosY()
[11 PPGEORGY.Get_Input_Locale("kkkk:s, kkkk:s, ....)" | Returns the current keyboard layout of the active window.]
PPGEORGY.Get_Input_Locale("kkkk:s, kkkk:s, ....)
[11 WIN.Crosshair() | Toggle a cross hair centered at mouse coordinates on/off]
WIN.Crosshair()
[18 WIN.Crosshair(x, y) | Draws a cross hair centered at x, y. Call again with same coordinates to erase.]
WIN.Crosshair(x, y)
[11 WIN.KeyState(virtualKeyCode) | Returns 0 if key is up, 1 if down. (search web for values of Virtual Key codes)]
WIN.KeyState(virtualKeyCode)
[11 WIN.LastMouse(0) | Returns last mouse button up: 1(left), 2 (middle), 3 (right)]
WIN.LastMouse(0)
[11 WIN.LastMouse(1) | Set default mouse return for next WIN.LastMouse(0). example: WIN.LastMouse(1) / Vec.ShowMenu(...) / mouse=WIN.LastMouse(0)]
WIN.LastMouse(1)
[11 WIN.MouseTo(x, y) | Moves mouse cursor to screen position x, y]
WIN.MouseTo(x, y)
[11 WIN.SendMouse(a1, a2, ...) | Send mouse actions which is compatible with Windows Vista/7.]
WIN.SendMouse(a1, a2, ...)
[11 XUTILS.ScrollDown(linecount) | Simulates scrolling down with mouse scroll wheel. linecount optional]
XUTILS.ScrollDown(linecount)
[11 XUTILS.ScrollUp(linecount) | Simulates scrolling up with mouse scroll wheel. linecount optional]
XUTILS.ScrollUp(linecount)

[12    KEYS |G ]
[12 *Keys {FileMenu "filepath"} | User selects the keys to be sent from a TXT file menu.]
*Keys {FileMenu "filepath"}
[12 *Keys {From strFilePath} | Get key commands from text in a TXT file.]
*Keys {From "filepath"}
[12 *Keys {To ...} | Only works with visible windows, always leaves the focus at the target window.]
*Keys {To title}
[12 *Keys {To *} | Send the keys to the active window. Only visible windows. Focus stays at target.]
*Keys {To *}
[12 *Keys {To +...} | Wait for the specified window to be ready (max. 3 sec)]
*Keys {To +}
[12 *Keys {To -...} | Sleep a short time before sending the keys.]
*Keys {To -}
[12 *Keys {To =filepath} | Sends keys to program run from strFilePath.]
*Keys {To =filepath}
[12 *Keys {To ActiveBar} | Send the keys to last window referenced by an Active bar button.]
*Keys {To ActiveBar}
[12 *Keys {To Autorun} | Send the keys to last window matched by autorun command list.]
*Keys {To Autorun}
[12 *Keys {To None} | No check if window is available; makes keys available in keyboard buffer only.]
*Keys {To None}
[12 *Keys {To ^...} | Avoids the error message, if the {To xxx} window is not found.]
*Keys {To ^}
[12 *Keys {To filepath} | Write key commands to a file.]
*Keys {To filepath}
[12 *Keys {To caption_list} | Send the keys to the first window found matching the captionlist.]
*Keys {To caption_list}
[12 *Keys {To folder} | Sends the folder path c:\path to an open/save dialog (XP only)]
*Keys {To folder}
[12 *Keys {To title} | Sends keys to window with caption title. Can use * at both ends.]
*Keys {To title}
[12 *Keys {ToAny ...} | For both hidden and visible windows, returns the focus to the current window.]
*Keys {ToAny }
[12 *Keys {ToAny *} | Send the keys to the active window.]
*Keys {ToAny *}
[12 *Keys {ToAny +...} | Wait for the specified window to be ready (max. 3 sec)]
*Keys {ToAny +}
[12 *Keys {ToAny -...} | Sleep a short time before sending the keys.]
*Keys {ToAny -}
[12 *Keys {ToAny ...} | Only works with visible windows, always leaves the focus at the target window.]
*Keys {ToAny title}
[12 *Keys {ToAny =filepath} | Sends keys to program run from strFilePath.]
*Keys {ToAny =filepath}
[12 *Keys {ToAny ActiveBar} | Send the keys to last window referenced by an Active bar button.]
*Keys {ToAny ActiveBar}
[12 *Keys {ToAny Autorun} | Send the keys to last window matched by autorun command list.]
*Keys {ToAny Autorun}
[12 *Keys {ToAny None} | No check if window is available; makes keys available in keyboard buffer only.]
*Keys {ToAny None}
[12 *Keys {ToAny ^...} | Avoids the error message, if the {ToAny xxx} window is not found.]
*Keys {ToAny ^}
[12 *Keys {ToAny filepath} | Write key commands to a file.]
*Keys {ToAny filepath}
[12 *Keys {ToAny caption_list} | Send the keys to the first window found matching the captionlist.]
*Keys {ToAny caption_list}
[12 *Keys {ToAny folderpath} | Sends the folderpath to an open/save dialog (XP only)]
*Keys {ToAny folderpath}
[12 *Keys {ToAny title} | Sends keys to window with caption title. Can use * at both ends.]
*Keys {ToAny title}
[12 {Fast} | Following keys will be sent using the fast method.]
{Fast}
[12 {Lit} | Send literal text, no special processing of following characters will occur.]
{Lit}
[12 {SInp} | Works like the slow method, but sends all keys in a block.(SendInput)]
{SInp}
[12 {Slow} | Following keys will be sent using the slow method.]
{Slow}
[12 {W0} | Omit standard waits at start and end of send keys.]
{W0}
[12 {Wx} | Wait x milliseconds.]
{W1}
[12 {xxx} | Send character with decimal ascii code xxx (first x cannot be 0).]
{xxx}
[12 {NoWaitMods} | Do not wait for modifier keys to be up before sending.]
{NoWaitMods}
[12 {IgnoreMods} | Do not wait for modifier keys to be up before sending, do not reset logical state of the keyboard.]
{IgnoreMods}
[12 % | Alt]
%
[12 + | Shift]
+
[12 ^ | Ctrl]
^
[12 {Alt} | Toggle up/down status of Alt, stays clicked until the next {Alt}]
{Alt}
[12 {AltUp} | Release the modifier key.]
{AltUp}
[12 {AltDown} | Hold down the modifier key.]
{AltDown}
[12 {Shift} | Toggle up/down status of Shift, stays clicked until the next {Shift}]
{Shift}
[12 {Ctrl} | Toggle up/down status of Ctrl, stays clicked until the next {Ctrl}]
{Ctrl}
[12 {CtrlUp} | Release the modifier key.]
{CtrlUp}
[12 {CtrlDown} | Hold down the modifier key.]
{CtrlDown}
[12 {Win} | Toggle up/down status of Win, stays clicked until the next {Win}]
{Win}
[12 {WinUp} | Release the modifier key.]
{WinUp}
[12 {WinDown} | Hold down the modifier key.]
{WinDown}
[12 {ShiftUp} | Release the modifier key.]
{ShiftUp}
[12 {ShiftDown} | Hold down the modifier key.]
{ShiftDown}
[12 {%} | % send percent]
{%}
[12 {+} | + send plus sign]
{+}
[12 {^} | ^ send caret sign]
{^}
[12 {cmdsep} | &lt; send command separator.]
{cmdsep}
[12 {{} | { send left brace]
{brace}
[12 {Greater} | > send greater than sign]
{Greater}
[12 {Less} | &lt; send less than sign]
{Less}
[12 {{} | { send left brace]
{{}
[12 {Question} | ? send question mark]
{Question}
[12 {Quote} | " send double quote, single quote does not need { }]
{Quote}
[12 {Space} | Send space chracter.]
{Space}
[12 {Alt}{Pad0}{Pad1}...{Pad9}{Alt} | Send Alt+xxxx keys to enter alt characters (over code 132).]
{Slow}{Alt}{Pad0}{Pad1}{Pad2}{Pad3}{Pad4}{Pad5}{Pad6}{Pad7}{Pad8}{Pad9}{Alt}
[12 {VKxx} | Send virtual key code where xx are any two hexadecimal digits, eg {VK3f}]
{Slow}{VKxx}
[12 {Up}{Down}{Right}{Left} | Send arrow keys.]
{Up}{Down}{Right}{Left}
[12 {CapsLock}{ScrollLock} | Send lock keys press.]
{Slow}{CapsLock} {Slow}{ScrollLock}
[12 {Home}{End}{PgUp}{PgDn} | Send location keys press.]
{Home}{End}{PgUp}{PgDn}
[12 {Back}{Del} | Send backspace, delete keys press.]
{Back}{Del}
[12 {Enter} | Send enter key press.]
{Enter}
[12 {Tab}{Ins}{Esc} | Send tab, insert, escape key press.]
{Tab}{Ins}{Esc}
[12 {Enter} | Send enter key press.]
{Enter}
[12 {PrintScreen} | Send Print Screen key press.]
{PrintScreen}
[12 {Pause} | Send Pause key press.]
{Pause}
[12 {Pad+}{Pad-}{Pad*}{Pad/} | Send Numeric Pad keys.]
{Pad+}{Pad-}{Pad*}{Pad/}
[12 {Pad0}{Pad1}{Pad2}{Pad3}{Pad4}{Pad5}{Pad6}{Pad7}{Pad8}{Pad9} | Send Numeric Pad keys.]
{Pad0}{Pad1}{Pad2}{Pad3}{Pad4}{Pad5}{Pad6}{Pad7}{Pad8}{Pad9}
[12 {F1}{F2}{F3}{F4}{F5}{F6}{F7}{F8}{F9} | Send Function Keys F1 to F12 press.]
{F1}{F2}{F3}{F4}{F5}{F6}{F7}{F8}{F9}
[12 {Apps} | Send Apps key press down and up.]
{Apps}
[12 *Keys {browser_back}{browser_forward}{browser_refresh}{browser_stop}{browser_search}{browser_favorites}{browser_home} | Send the corresponding special key on the keyboard.]
*Keys {browser_back}{browser_forward}{browser_refresh}{browser_stop}{browser_search}{browser_favorites}{browser_home}
[12 *Keys {volume_mute}{volume_down}{volume_up}{media_next_track}{media_prev_track}{media_stop}{media_play_pause} | Send the corresponding special key on the keyboard.]
*Keys {volume_mute}{volume_down}{volume_up}{media_next_track}{media_prev_track}{media_stop}{media_play_pause}
[12 *Keys {launch_mail}{launch_media_select}{launch_app1}{launch_app2} | Send the corresponding special key on the keyboard.]
*Keys {launch_mail}{launch_media_select}{launch_app1}{launch_app2}
[12 *Keys {Time} | Send time in Windows format.]
*Keys {time}
[12 *Keys {DateShort}{DateLong} | Send date in Windows short/long format.]
*Keys {DateShort}{DateLong}
[12 *Keys {PrevShort}{NextShort} | Send previous day/next day date short format.]
*Keys {PrevShort}{NextShort}
[12 AU.Send("keys") | Sends keystrokes to the currently active window.]
AU.Send("keys")
[12 AU.SetKeyDelay(value) | Alter the amount of time (ms) that AutoIt pauses between each simulated keypress. (Default 20ms)]
AU.SetKeyDelay(value)
[AU3.Send("keys", mode) | Send simulated keystrokes to the active window. mode(optional) = 0(string contains special characters like + to indicate SHIFT and {LEFT} to indicate left arrow-default) | 1(send raw keys)]
AU3.Send("keys", |0|1)
[12 WIN.Keys("keys") | Sends keys to active window (same as SendKeys).]
WIN.Keys("keys")
[12 WIN.SendKeys("keys") | Sends keys to active window.]
WIN.SendKeys("keys")

[13    MESSAGE |G ]
[13 *Message n text | Shows message with text, optionally waits n seconds to close]
*Message n text
[13 MessageBox("layout", "text", "title") | Returns: 0(Cancel), 1(OK), 3(Abort), 4(Retry), 5(Ignore), 6(Yes), 7(No)]
MessageBox("[AbortRetryIgnore|OkCancel|RetryCancel|YesNoCancel|YesNo|Ok] [Topmost] [Asterisk|Error|Exclamation|Information|Stop|Question|Warning]", "text", "title")
[13 Wait.Message(timeout_secs, "text") | Shows message with text, optionally waits timeout_secs seconds to close it automatically.]
Wait.Message(timeout_secs, "text")
[13 AU3.ToolTip("tipText", x, y) | Create a multi-line tooltip anywhere on the screen. If the x and y omitted tip is placed near the mouse cursor. If off screen, repositioned to visible. Tooltip appears until it is cleared/script terminates/it is clicked upon.]
AU3.ToolTip("tipText", x, y)
[13 BEE.TextOut("message", x, y, "fontName", fontHeight, fontWidth, italic, underline, strikeout, "textColor", "backColor", backOpacity, angle10base) | Display a message until another window is placed over. All except message optional.]
BEE.TextOut("message", x, y, "fontName", fontHeight, fontWidth, 0|1, 0|1, 0|1, "0-255 0-255 0-255", "0-255 0-255 0-255", 1|2, -3600 - 3600)
[13 BEE.Notice("message", x, y, "fontName", fontHeight, fontWidth, italic, underline, strikeout, "textColor", "backColor", backOpacity, textAlign, timeout_ms, windowColor, transparencyColor) | Display a message for a given time. All except message optional. textAlign = 0(left) | 1(center) | 2(right)]
BEE.Notice("message", x, y, "fontName", fontHeight, fontWidth, 0|1, 0|1, 0|1, "0-255 0-255 0-255", "0-255 0-255 0-255", 0|1|2, timeout_ms, "0-255 0-255 0-255", "0-255 0-255 0-255")
processID = BEE.NoticePID()
threadID  = BEE.NoticeTID()
[13 BEE.NoticeKill(threadID) | Close Notice dialog]
BEE.NoticeKill(threadID)
[13 BEE.NoticeHide(threadID) | Hide Notice dialog]
BEE.NoticeHide(threadID)
[13 BEE.NoticeShow(threadID) | Show Notice dialog]
BEE.NoticeShow(threadID)
[13 BEE.NoticeMove(threadID, x, y) | Move Notice dialog]
BEE.NoticeMove(threadID, x, y)
[13 BEE.NoticeOpacitiy(threadID, opacity, red, green, blue) | Change opacity and transparency color of Notice dialog]
BEE.NoticeOpacitiy(threadID, 0-255,  0-255, 0-255, 0-255)
[13 BEE.NoticeColor(threadID, "target", red, green, blue) | Change color of  Notice dialog. target = ftc(text color) | fbc(back color) | wc(window color)]
BEE.NoticeColor(threadID, "ftc|fbc|wc",  0-255, 0-255, 0-255)
[13 BEE.NoticeSize(threadID, fontHeight, fontWidth) | Change font size of Notice dialog]
BEE.NoticeSize(threadID, fontHeight, fontWidth)
[13 BEE.NoticeAttr(threadID, italic, underline, strikeout) | Change font attribute of Notice dialog]
BEE.NoticeAttr(threadID, 0|1, 0|1, 0|1)
[13 BEE.NoticeAlign(threadID, textAlign) | Font Notice dialog. textAlign = 0(left) | 1(center) | 2(right)]
BEE.NoticeAlign(threadID, 0|1|2)
[13 BEE.NoticeFont(threadID, "fontName") | Change font of Notice dialog]
BEE.NoticeFont(threadID, "fontName")
[13 BEE.NoticeMessage(threadID, "message") | Change the Notice message]
BEE.NoticeMessage(threadID, "message")
[13 BEE.TextDraw("message", x, y, "fontName", fontSize, fontStyle, gradient, "startColor", "closeColor", "outlineColor", outlineThickness, opacity, timeout_ms) | Display an outlined message for a given time. All except message optional. fontStyle = 0(regular) | 1(bold) | 2(italic) | 4(underline) | 8(strikeout), gradient = 0(horizontal) | 1(vertical) | 2(forward diagonal) | 3(backword diagonal)]
BEE.TextDraw("message", x, y, "fontName", fontSize, 0+1+2+4+8, 0|1|2|3, "0-255 0-255 0-255 0-255", "0-255 0-255 0-255 0-255", "0-255 0-255 0-255 0-255", outlineThickness,  0-255, timeout_ms)
processID = BEE.TextDrawPID
threadID  = BEE.TextDrawTID
[13 BEE.TextDrawKill(threadID) | Close TextDraw dialog]
BEE.TextDrawKill(threadID)
[13 BEE.TextDrawHide(threadID) | Hide TextDraw dialog]
BEE.TextDrawHide(threadID)
[13 BEE.TextDrawShow(threadID) | Show TextDraw dialog]
BEE.TextDrawShow(threadID)
[13 BEE.TextDrawMove(threadID, x, y) | Move TextDraw dialog]
BEE.TextDrawMove(threadID, x, y)
[13 BEE.TextDrawOpacity(threadID, opacity, red, green, blue) | Change opacity and transparency color of TextDraw dialog]
BEE.TextDrawOpacity(threadID, 0-255,  0-255, 0-255, 0-255)
[13 BEE.Photo("filepath", x, y, opacity, timeout_ms, transparencyColor) | Display an image for a given time. All except message optional.]
BEE.Photo("filepath", x, y, 0-255, timeout_ms, "0-255 0-255 0-255")
processID = BEE.PhotoPID
threadID  = BEE.PhotoTID
[13 BEE.PhotoKill(threadID) | Close image dialog]
BEE.PhotoKill(threadID)
[13 BEE.PhotoHide(threadID) | Hide image dialog]
BEE.PhotoHide(threadID)
[13 BEE.PhotoShow(threadID) | Show image dialog]
BEE.PhotoShow(threadID)
[13 BEE.PhotoMove(threadID, x, y) | Move image dialog]
BEE.PhotoMove(threadID, x, y)
[13 BEE.PhotoOpacity(threadID, opacity, red, green, blue) | Change opacity and transparency color of image dialog]
BEE.PhotoOpacity(threadID, 0-255,  0-255, 0-255, 0-255)
[13 EVENT.Message(countdown, "command", "message", "title", ontop, x, y) | Create a message box, count in sec. command executes when 0 or with StartNow button]
EVENT.Message(countdown, "command", "message", "title", 0|1, x, y)
[13 MSGBOX.Display("message", "caption", "buttons icon defaultbutton") | Space seperated properties optional (default OK)). Returns: 1(OK) | 2(Cancel) | 3(Abort) | 4(Retry) | 5(Ignore) |   6(Yes) | 7(No)]
result = MSGBOX.Display("message", "caption", "|OKCANCEL|ABORTRETRYIGNORE|YESNOCANCEL|YESNO|RETRYCANCEL ERROR|QUESTION|WARNING|INFORMATION BUTTON1|BUTTON2|BUTTON3")
[13 MSGBOX.UnLoad | Remove plugin from memory.]
MSGBOX.UnLoad
[13 WIN.Message("message", "title") | Displays a messagebox.]
WIN.Message("message", "title")
[13 WIN.MessageBeep("type") | produces system sound]
WIN.MessageBeep("OK|Hand|Exclamation|Question")
[13 MISCPLUGIN.BalloonTip(iconID, "trayicon", "message", "timeout=x", "title=text", "icon=x") | Display balloon tip in the tray. iconID=any number to identify the icon for removal. text max.255 chars, \n for linebreaks. timeout in sec. In balloon icon=1(error) | 2(information) | 3(warning) in the tray.]
MISCPLUGIN.BalloonTip(iconID, "ERROR|INFORMATION|QUESTION|WARNING|iconpath", iconindex, "message", "timeout=1-30", "title=title", "icon=1|2|3")
[13 MISCPLUGIN.MessageBox(defaultbutton, "buttonlabels", "parameters") | MessageBox. mpDlgCaption, mpDlgText, mpIcon may be specified but optionally superseded in command. Max.8 params. Returns label of the selected button.]
mpDlgCaption = "captiontext"
mpIcon       = "ERROR|INFORMATION|QUESTION|WARNING|iconpath, iconindex"
mpDlgText    = "line1\nline2"
sOutput      = MISCPLUGIN.MessageBox(1|2|3|4|5, "button1label", "button2label", ... "button5label", "OnTop=0", "InTaskbar=1", "Par=xxx", "Timeout=x", "Wave=filepath", "Cap=Caption", "Icon=filepath", "Msg=text")
[13 MISCPLUGIN.ReminderUI("parameter") | Create a Reminder with optional command.]
MISCPLUGIN.ReminderUI("PProCommand")
[13 OSD.Show("text", "timems", "fontsize", "fontname", "location", "fontcolor") | One line string output on the screen. timems (and rest) optional]
OSD.Show("text", "timems", "fontsize", "fontname", "location", "fontcolor")
[13 OSD.Hide | Hide OSD output.]
OSD.Hide
[13 OSD.Unload | Remove plugin from memory.]
OSD.Unload

[15    NETWORK |G ]
[15  DialupName | ]
DialupName
[15  DunIdle | ]
DunIdle
[15  DunRate | ]
DunRate
[15  Modem | Returns 1 if dial up connected; 0 otherwise.]
Modem
[15 AU3.DriveMapAdd("device", "remoteShare", flags, "user", "password") | Map a network drive to device. flags = 0(default) + 1(Persistant mapping) + 8(Show authentication dialog if required). user and password optional]
AU3.DriveMapAdd("D:|...|Z:|LPT1:|*", "\\server\shareFolder", 0+1+8, "user", "password")
[15 AU3.DriveMapDel("device") | Disconnect a mapped network drive]
AU3.DriveMapDel("D:|...|Z:|LPT1:")
[15 AU3.DriveMapGet("device") | Retreive the details of a mapped drive]
AU3.DriveMapGet("D:|...|Z:|LPT1:")
[15 GETSYSTEMPERFORMANCEDATA.Get_Dun_Received | Total bytes received by dial-up connection.]
GETSYSTEMPERFORMANCEDATA.Get_Dun_Received
[15 GETSYSTEMPERFORMANCEDATA.Get_Dun_Sent | Total bytes sent by dial-up connection.]
GETSYSTEMPERFORMANCEDATA.Get_Dun_Sent
[15 MISCPLUGIN.Get_IP("hostname") | Retrieves the IP address of the local/specified PC. hostname optional]
MISCPLUGIN.Get_IP("hostname")
[15 NET.Check_On_Internet() | See if seem to be on internet.]
NET.Check_On_Internet()
[15 NET.Check_Ras_Connected() | See if connected to ISP.]
NET.Check_Ras_Connected()
[15 NET.Error_Dialog_Off() | Turn PowerPro script error dialog off.]
NET.Error_Dialog_Off()
[15 NET.Error_Dialog_On() | Turn PowerPro script error dialog on.]
NET.Error_Dialog_On()
[15 NET.Fetch_Webpage("url", "proxyserveraddress", "proxyport", "fields", "POST_data", "successcommand", "unsuccesscommand") | Start fetch of a file off the net. A threaded service. All except url optional]
NET.Fetch_Webpage("url", "proxyserveraddress", "proxyport", "fields", "POST_data", "successcommand", "unsuccesscommand")
[15 NET.Get_Host_Name("ipaddress") | Get host name from IP address.]
NET.Get_Host_Name("ipaddress")
[15 NET.Get_Ip_Addr("hostname") | Get IP address from host name.]
NET.Get_Ip_Addr("hostname")
[15 NET.Get_Local_Ip_Addr() | Get IP address of local machine.]
NET.Get_Local_Ip_Addr()
[15 NET.Get_Ping_Result() | Check if threaded service is complete.]
NET.Get_Ping_Result()
[15 NET.Get_Probe_Result() | Returns 1 if the port was found, 0 otherwise after a call to Probe_Port.]
NET.Get_Probe_Result()
[15 NET.Get_Webpage_Result() | Get result of a webpage fetch.]
NET.Get_Webpage_Result()
[15 NET.Get_Webpage_Size() | ]
NET.Get_Webpage_Size()
[15 NET.Page_Size_So_Far() | ]
NET.Page_Size_So_Far()
[15 NET.Ping("address", wait, size, count, interval, TTL)) | Ping a specified address, return when complete. wait (and rest) optional]
NET.Ping("address", wait, size, count, interval, TTL)
[15 NET.Ping_Bloviation_Off() | Variables other then Net_Status will not be set.]
NET.Ping_Bloviation_Off()
[15 NET.Ping_Bloviation_On() | Variables other then Net_Status will be set after various operations.]
NET.Ping_Bloviation_On()
[15 NET.Ping_Threaded("address", wait, size, count, interval, TTL, "successcommand", "unsuccesscommand") | Start pinging a specified address, return immediately. wait (and rest) optional]
NET.Ping_Threaded("address", wait, size, count, interval, TTL, "successcommand", "unsuccesscommand")
[15 NET.Probe_Port("address", port, "successcommand", "unsuccesscommand") | Test a port to see if responds. A threaded service. successcommand, unsuccesscommand optional]
NET.Probe_Port("address", port, "successcommand", "unsuccesscommand")
[15 NET.Save_Webpage_To_File("url", "filepth", "proxyserveraddress", proxyport, "fields", "POST_data", "successcommand", "unsuccesscommand") | Start fetch of a file, save it to file when complete. A threaded service. proxyserveraddress (and rest) optional]
NET.Save_Webpage_To_File("url", "filepth", "proxyserveraddress", proxyport, "fields", "POST_data", "successcommand", "unsuccesscommand")
[15 NET.Stop_Ping() | Stops Ping_Threaded.]
NET.Stop_Ping()
[15 NET.Stop_Probe() | Terminate a port probe in progress.]
NET.Stop_Probe()
[15 NET.Stop_Webpage() | Stop Fetch_Webpage or Save_Webpage_To_File.]
NET.Stop_Webpage()
[13 NET.Unload | Remove plugin from memory.]
NET.Unload
[15 NET.URL_Encode("string") | Encode an URL.]
NET.URL_Encode("string")
[15 PIPE.Create("name") | Creates a handle to a pipe object and returns a handle to it.]
pipehandle = PIPE.Create("name")
[15 PIPE.Destroy(pipehandle) | Deletes a handle returned by the create service.]
PIPE.Destroy(pipehandle)
[15 PIPE.Listen_Off(pipehandle) | Terminates listening and closes the listening pipe.]
PIPE.Listen_Off(pipehandle)
[15 PIPE.Listen_On(pipehandle, "name", authenticate, "var_name", vec_handle, binary_handle, unicode_handle, "static_var_script", "command_to_call", leave_crlf, break_msgs, "markers", "insertionmarktype", "dead_pipe_cmd", "dead_pipe_folder") | Starts listening for messages. All parameters are optional.]
PIPE.Listen_On(pipehandle, "name", 0|1, var_name, vec_handle, binary_handle, unicode_handle, "static_var_script", "command_to_call",  0|1,  0|1, "markers",  a|1, "dead_pipe_cmd", "dead_pipe_folder")
[15 PIPE.Send_To(pipehandle, binaryhandle|unicodehandle|data, "machinename", "pipename", authenticate) | Pipes a message to pipename on machinename.]
PIPE.Send_To(pipehandle, binaryhandle|unicodehandle|data, "machinename", "pipename", 0|1)
[15 PIPE.To_Console(pipehandle, "consolecommand", "executable", "currentdirectory") | If executable empty, cmd.exe is used. Call with pipehandle destroys the console]
PIPE.To_Console(pipehandle, "consolecommand", "executable", "currentdirectory")
[15 PIPE.Get_Computer_Names() | Returns space seperated list of workstation names on the LAN.]
PIPE.Get_Computer_Names()
[15 PIPE.Get_IP_Addr("machinename") | Returns (or Set pipe_value to) the IP address of the named machine.]
PIPE.Get_IP_Addr("machinename")
[15 PIPE.Returns_Nothing() | Determine what the calls return via 'returnval = PIPE.service'.]
PIPE.Returns_Nothing()
[15 PIPE.Returns_Status() | Determine what the calls return via 'returnval = PIPE.service'.]
PIPE.Returns_Status()
[15 PIPE.Returns_Values() | Determine what the calls return via 'returnval = PIPE.service'.]
PIPE.Returns_Values()
[15 PIPE.Error_Dialog_Off() | Turn off dialogs appearing when a PIPE service call goes wrong.]
PIPE.Error_Dialog_Off()
[15 PIPE.Error_Dialog_On() | Turn on error dialogs appearing when a PIPE service call goes wrong.]
PIPE.Error_Dialog_On()
[15 PIPE.Config("filePath_INI") | Specifies a configuration ini file.]
PIPE.Config("filePath_INI")

[16    NOTES |G ]
[16 LastNoteHandle | Handle to last active note window.]
LastNoteHandle
[16 PProNotesFolder | Folder of PowerPro notes including terminating \.]
PProNotesFolder
[16 Note.CloseCategory("categoryname") | Close and save all notes in a category.]
Note.CloseCategory("categoryname")
[16 Note.DeleteOpenCategory | Deletes open notes from a given category.]
Note.DeleteOpenCategory
[16 Note.Open("params") | Create new notes or open existing notes.]
notehandle = Note.Open("params")
[16 Note.OpenCategory("categoryname") | Open all notes in a category.]
Note.OpenCategory("categoryname")
[16 Note.OpenMenu | Shows a menu of all open notes. Brings selected one to the top.]
Note.OpenMenu
[16 Note.OpenOneFromMenu("categoryname") | Open one note in a category.]
Note.OpenOneFromMenu("categoryname")
[16 Note.OpenShow | Show hidden notes]
Note.OpenShow
[16 Note.OpenToday | Shows notes with date categories today or before.]
Note.OpenToday
[16 Note.RollupCategory("+categoryname|-categoryname") | Reverse the rollup state of all open notes in a category. + Unroll, - RollUp.]
Note.RollupCategory("+categoryname|-categoryname")
[16 Note.Search | Shows a dialog allowing you to search the last active note]
Note.Search
[16 Note.SetFolder("folderpath") | Set path to parent of notes folder.]
Note.SetFolder("folderpath")
[16 Note.ShowHideOpen | Hide or Show open notes.]
Note.ShowHideOpen
[16 Note.ShowOpen | Shows all hidden notes.]
Note.ShowOpen
[16 NOTE.AppendLine(notehandle, "text") | Appends text at the end of the note. A CR-LF is added to the end.]
NOTE.AppendLine(notehandle, "text")
[16 NOTE.AppendText(notehandle, "text") | Inserts the text at the end of the note]
NOTE.AppendText(notehandle, "text")
[16 NOTE.Bottom(notehandle) | Returns the position of note in pixels.]
NOTE.Bottom(notehandle)
[16 NOTE.CharFromLine(notehandle, lineindex) | Returns the character index corresdonding to a specific line.]
NOTE.CharFromLine(notehandle, lineindex)
[16 NOTE.Close(notehandle) | Closes and saves the note]
NOTE.Close(notehandle)
[16 NOTE.Cycle | Cycles though open notes, one at a time, showing them as it goes.]
NOTE.Cycle
[16 NOTE.Delete(notehandle) | Closes and deletes the note]
NOTE.Delete(notehandle)
[16 NOTE.Find(notehandle, "text", start, case, nobeep) | Finds text in note. start='' starts just past current selection.]
NOTE.Find(notehandle, "text", start, 0|1, 0|1)
[16 NOTE.GetBackColor(notehandle) | Returns background color as string of three numbers separated by blank: 'red green blue'.]
NOTE.GetBackColor(notehandle)
[16 NOTE.GetCaretLine(notehandle) | Returns the line index corresponding to the current position of the text cursor).]
NOTE.GetCaretLine(notehandle)
[16 NOTE.GetCaretPos(notehandle) | Returns the character index corresponding to the current position of the text cursor.]
NOTE.GetCaretPos(notehandle)
[16 NOTE.GetCategory(notehandle) | Returns category of note.]
NOTE.GetCategory(notehandle)
[16 NOTE.GetLine(notehandle, lineindex) | Returns the contents of line lineindex (starting at line 0), removes terminating CR-LF from text.]
NOTE.GetLine(notehandle, lineindex)
[16 NOTE.GetSel(notehandle) | Returns two blank-separated numbers indicated the first and last character of selected text, '' if no selection.]
NOTE.GetSel(notehandle)
[16 NOTE.GetSel(notehandle, cindex1, cindex2) | Set start and end of selection to cindex1 through cindex2 inclusive.]
NOTE.GetSel(notehandle, cindex1, cindex2)
[16 NOTE.GetSel1(notehandle) | Returns zero-based number indicated the first character of selected text, '' if no selection.]
NOTE.GetSel1(notehandle)
[16 NOTE.GetSel2(notehandle) | Returns zero-based number indicated the last character of selected text, '' if no selection.]
NOTE.GetSel2(notehandle)
[16 NOTE.GetText(notehandle, cindex1, cindex2) | Returns the characters starting at cindex1 and ending and cindex2, and including cindex2.]
NOTE.GetText(notehandle, cindex1, cindex2)
[16 NOTE.GetTextColor(notehandle) | Returns text color as string of three numbers separated by blank: 'red green blue'.]
NOTE.GetTextColor(notehandle)
[16 NOTE.HandleList("category", includehidden) | Returns a blank separated list of all handles of open notes, limited to about 55 open notes.]
NOTE.HandleList("category", 0|1)
[16 NOTE.Height(notehandle) | Returns the size of note in pixels.]
NOTE.Height(notehandle)
[16 NOTE.InsertLine(notehandle, lineindex, "text") | Inserts the text as a line before lineindex. lineindex is 0 base.]
NOTE.InsertLine(notehandle, lineindex, "text")
[16 NOTE.InsertText(notehandle, "text", cindex) | Inserts the text before cindex.]
NOTE.InsertText(notehandle, "text", cindex)
[16 NOTE.IsOnTop(notehandle) | Returns 1 if note is topmost, 0 otherwise.]
NOTE.IsOnTop(notehandle)
[16 NOTE.IsRolled(notehandle) | Returns 1 if note is rolled, 0 otherwise.]
NOTE.IsRolled(notehandle)
[16 NOTE.IsValid(notehandle) | Returns 1 if notehandle is a valid note handle, zero otherwise.]
NOTE.IsValid(notehandle)
[16 NOTE.IsVisible(notehandle) | Returns 1 if note is visible, 0 otherwise.]
NOTE.IsVisible(notehandle)
[16 NOTE.Left(notehandle) | Returns the position of note in pixels.]
NOTE.Left(notehandle)
[16 NOTE.Length(notehandle) | Returns the number of characters in the note.]
NOTE.Length(notehandle)
[16 NOTE.LineCount(notehandle) | Returns the number of lines in the note.]
NOTE.LineCount(notehandle)
[16 NOTE.LineFromChar(notehandle, cindex) | Returns the line number corresponding to a specific character.]
NOTE.LineFromChar(notehandle, cindex)
[16 NOTE.Move(notehandle, left, top) | Moves the note to the specified position. Same as notehandle.Move(left, top)]
NOTE.Move(notehandle, left, top)
[16 NOTE.Ontop(notehandle, topmost) | Makes note topmost (1), not topmost (0). Reverses setting if topmost empty. Same as notehandle.OnTop(topmost)]
NOTE.Ontop(notehandle, |0|1)
[16 NOTE.Open("filepath", "keywords", state) | Creates a new note and returns its handle. state = 0(hidden) | 1(visible) | 2(activated). All parameters optional]
notehandle = NOTE.Open("filepath", "keywords", 0|1|2)
[16 NOTE.Raise | Cycles through open notes and removes always on top property.]
NOTE.Raise
[16 NOTE.ReplaceLine(notehandle, "text", lineindex) | Replaces the indicated line by the text.]
NOTE.ReplaceLine(notehandle, "text", lineindex)
[16 NOTE.ReplaceSel(notehandle, "text") | Replaces selected text. Does nothing if no selection.]
NOTE.ReplaceSel(notehandle, "text")
[16 NOTE.ReplaceText(notehandle, "text", cindex1, cindex2) | Replaces the text starting at cindex1 and ending at cindex2.]
NOTE.ReplaceText(notehandle, "text", cindex1, cindex2)
[16 NOTE.Right(notehandle) | Returns the position of note in pixels.]
NOTE.Right(notehandle)
[16 NOTE.Roll(notehandle, state) | state = 0(roll) | 1(unroll). Reverses setting if state empty. Same as notehandle.Roll(state)]
NOTE.Roll(notehandle, |0|1)
[16 NOTE.ScrollCaret(notehandle) | Scrolls note so caret is in view. Same as notehandle.ScrollCaret]
NOTE.ScrollCaret(notehandle)
[16 NOTE.ScrollTo(notehandle, "char", lineindex) | Scrolls note to horizontal character char of line lineindex. Same as notehandle.ScrollTo("char", lineindex)]
NOTE.ScrollTo(notehandle, "char", lineindex)
[16 NOTE.Search | Shows a dialog to search the last active note. Type Alt-S into a note to show or switch back to this dialog.]
NOTE.Search
[16 NOTE.SetBackColor(notehandle, red, green, blue) | Set note background color; red, green, blue are nubmers between 0 and 255.]
NOTE.SetBackColor(notehandle, 0-255, 0-255, 0-255)
[16 NOTE.SetBackColor(notehandle, "red green blue") | Set note background color; red, green, blue are numbers between 0 and 255. Same as notehandle.SetBackColor('red green blue')]
NOTE.SetBackColor(notehandle, "0-255 0-255 0-255")
[16 NOTE.SetBackColor(notehandle, RGBnumber) | See SetTextColor for desciprtion of ways to set RGBnumber colors.]
NOTE.SetBackColor(notehandle, RGBnumber)
[16 NOTE.SetCategory(notehandle, "category") | Changes category of note. Same as notehandle.SetCategory(str)]
NOTE.SetCategory(notehandle, "category")
[16 NOTE.SetSel(notehandle, cindex1, cindex2) | Sets start and end of selection]
NOTE.SetSel(notehandle, cindex1, cindex2)
[16 NOTE.SetTab(notehandle, tabpos) | Set the tab position for the note; must be at least 1. Same as notehandle.SetTab(tabpos)]
NOTE.SetTab(notehandle, tabpos)
[16 NOTE.SetText(notehandle, "text") | Set text of note.]
NOTE.SetText(notehandle, "text")
[16 NOTE.SetTextColor(notehandle, red, green, blue) | Set text color; red, green, blue are numbers between 0 and 255.]
NOTE.SetTextColor(notehandle, 0-255, 0-255, 0-255)
[16 NOTE.SetTextColor(notehandle, "red green blue") | Set text color; red, green, blue are nubmers between 0 and 255. Same as notehandle.SetTextColor('red green blue')]
NOTE.SetTextColor(notehandle, "0-255 0-255 0-255")
[16 NOTE.SetTextColor(notehandle, RGBnumber) | Set text color; red green blue components as a single integer (red in the lowest 8 bits).]
NOTE.SetTextColor(notehandle, RGBnumber)
[16 NOTE.Show(notehandle, state) | state = 0(hidden) | 1(visible). Reverses setting if state empty. Shown notes are not activated. Same as notehandle.Show(state)]
NOTE.Show(notehandle, |0|1)
[16 NOTE.Size(notehandle, width, height) | Set the size of the note. Same as notehandle.Size(width, height)]
NOTE.Size(notehandle, width, height)
[16 NOTE.Top(notehandle) | Returns the position of note in pixels.]
NOTE.Top(notehandle)
[16 NOTE.Unload | Unload the plugin.]
NOTE.Unload
[16 NOTE.VScroll(notehandle, n) | Scroll note: n = -2(scroll up one page) | -1(scroll up one line) | 0(no scroll) | 1(scroll down one line) | 2(scroll down one page). Same as nh.VScroll(n)]
NOTE.VScroll(notehandle, -2|-1|0|1|2)
[16 NOTE.Width(notehandle) | Returns the size of note in pixels.]
NOTE.Width(notehandle)
[16 NOTES.Open("text") | Create new note with the text (max.25K)]
NOTES.Open("text")
[16 NOTES.Open("text", "options") | Returns the size of note in pixels.]
NOTES.Open("text", "Top|Back|...")
[16 NOTES.Cycle | Cycle through open notes (like Alt+Tab).]
NOTES.Cycle
[16 NOTES.Raise | Cycle through open notes (like Alt+Esc). It will remove the "always on top" properties of notes as it cycles.]
NOTES.Raise
[16 NOTES.Unload | Unload the plugin.]
NOTES.Unload

[17    POWERPRO |G ]
[17 AllPProProcessName | Blank-separated string of all currently running PowerPro processes.]
AllPProProcessName
[17 Context | Set to 0 by PowerPro to indicate the first file ...]
Context
[17 ContextLast | Set to 1 by PowerPro to indicate the last file is being processed, of a group of selected files to which an Explorer context menu item has been applied.]
ContextLast
[17 Disk | Drive letter of running PowerPro path without :]
Disk
[17 LastModKeys | Returns string of last mod keys used to activate hot key; lAlt, rAlt, lCtrl, rCtrl, lShift, rShift, lWin, rWin]
LastModKeys
[17 PCFName | Filename and extension of current configuration file.]
PCFName
[17 PProFolder | Folder of PowerPro configuration including terminating \.]
PProFolder
[17 PProProcessName | Name of currently running PowerPro Process.]
PProProcessName
[17 PProVersion | Version of PowerPro as four digit integer.]
PProVersion
[17 StandardConfiguration | Returns 1 if 'Use standard configuration' is checked.]
StandardConfiguration
[17 ToolTipSeparator | Tooltip multi-line separator character.]
ToolTipSeparator
[17 Process.Create("name", "config.PCF", init_command, running_flag) | Create a new PowerPro process using the config.PCF, running_flag = 0(error message) | 1(handle for the existing process is returned)]
prochandle = Process.Create("name", "config.PCF", init_command, 0|1)
[17 Process.Create("debug", "debug.PCF") | Run debugging from a separate PowerPro process using the debug.PCF]
Process.Create("debug", "debug.PCF")
[17 Process.Close("name") | Stop a PowerPro process by its name. Same as prochandle.Close]
Process.Close("name")
[17 Cl.Compact() | Compacts PowerPro internal memory used to store strings related to command lists.]
Cl.Compact()
[17 Cl.Export("clname", "filepath", append) | Export clname to filepath. append = 0(overwrite) | 1(append to end of file)]
Cl.Export("clname", "filepath", 0|1)
[17 Cl.Import("filepath") | Import command list stored in strFilePath (ini format). Same as Configure.ImportCL("filepath").]
Cl.Import("filepath")
[17 Cl.SavePCF() | Writes current PCF, ensuring any changes to command lists from the original PCF are saved.]
Cl.SavePCF()
[17 Exec.MaxWindowsHook(action) | action = 0(Suspend windowshooks)| 10(Resume windowshooks)]
Exec.MaxWindowsHook(0|10)
[17 Exec.ScriptCache("On|Off|Clear") | Turn on/off caching of scripts in memory or clear the cache. Off/Clear stop all running scripts.]
Exec.ScriptCache("On|Off|Clear")
[17 Exec.ChangeConfiguration("filepath") | Change to configuration stored in new PCF file, if the new filepath not supplied, it will be prompted.]
Exec.ChangeConfiguration("filepath")
[17 Exec.Disable | Disable PowerPro until mouse moved over a bar or hot key used.]
Exec.Disable
[17 Exec.IgnoreExplorerRestat(n) | If 1, explorer restarts do not cuase a PowerPro restart.]
Exec.IgnoreExplorerRestat(0|1)
[17 Exec.Monitor("action") | Suspend or re-activate repeated running of monitor command list. action = On|Off|Reverse]
Exec.Monitor("On|Off|Reverse")
[17 Exec.OnError("action") | Error Handling. action (several seperated by space) = none|file (Write to file ErrorLog.txt only - in .pcf folder)| display (on screen messages only)| both (Write to file and display on screen)| hook (Run command list HookErrors)| unhook (Do not run command list)| clear (clear _LastError_ global variable - same as _LastError_ = "").]
Exec.OnError("None|Display|File|Both|Hook|UnHook|Clear")
[17 Exec.StandardConfiguration | If >Setup>Advanced>'Use standard configuration' is not checked, outputs an error message, stops all scripts.]
Exec.StandardConfiguration
[17 Configure.CommandLists | Start pproconf at the CommandLists tab.]
Configure.CommandLists
[17 Configure.CommandLists("?barname") | Start pproconf at the CommandLists tab at specified bar. Use (?*"?my bar"*) with spaces in bar names  ]
Configure.CommandLists("?barname")
[17 Configure.Desktop | Start pproconf at the Desktop tab.]
Configure.Desktop
[17 Configure.ExportHot("filepath") | Export the hot keys in the current PCF file.]
Configure.ExportHot("filepath")
[17 Configure.ExportHotMem("filepath") | Export the hot keys in memory.]
Configure.ExportHotMem("filepath")
[17 Configure.ExportSched("filepath") | Export scheduled events from the current PCF file.]
Configure.ExportSched("filepath")
[17 Configure.ExportSchedMem("filepath") | Export scheduled events in memory.]
Configure.ExportSchedMem("filepath")
[17 Configure.GUI | Start pproconf at the GUI tab.]
Configure.GUI
[17 Configure.ImportCL("filepath") | Import .ini configuration files into running PowerPro. Not saved in the PCF file.]
Configure.ImportCL("filepath")
[17 Configure.ImportHot("filepath") | Import hot keys/mouse actions. Not saved in the PCF file.]
Configure.ImportHot("filepath")
[17 Configure.ImportSched("filepath") | Read the scheduled events from text. Not saved in the PCF file.]
Configure.ImportSched("filepath")
[17 Configure.Key/Mouse | Start pproconf at the Key/Mouse tab.]
Configure.Key/Mouse
[17 Configure.Media | Start pproconf at the Media tab.]
Configure.Media
[17 Configure.Rehook | Reset PowerPro's keyboard and mouse hooks.]
Configure.Rehook
[17 Configure.Restart | Restart PowerPro.]
Configure.Restart
[17 Configure.Scheduler | Start pproconf at the Scheduler tab.]
Configure.Scheduler
[17 Configure.Setup | Start pproconf at the main Setup tab.]
Configure.Setup
[17 Configure.Timers | Start pproconf at the Timers tab.]
Configure.Timers
[17 Configure.WriteAlltoPCF("filepath") | Write all of configuration, including any imported text files, to a PCF file.]
Configure.WriteAlltoPCF("filepath")
[17 PPSERVICES.Start | ]
PPSERVICES.Start
[17 PPSERVICES.Version | Returns the plugin version number as four digit number.]
PPSERVICES.Version
[17 PPSERVICES.Last_String_Result | ]
PPSERVICES.Last_String_Result
[17 PPSERVICES.Last_Numeric_Result | ]
PPSERVICES.Last_Numeric_Result
[17 Shutdown.PowerPro | Exit PowerPro. If command list 'PProShutdown' exists, it is run.]
Shutdown.PowerPro
[17 WIN.SetWorkingDir("path") | Set PowerPro working directory.]
WIN.SetWorkingDir("path")

[18    SCREEN & DESKTOP |G ]
[18  xScreen | Returns screen width in pixels. Current horizontal resolution.]
xScreen
[18  yScreen | Returns screen height in pixels. Current vertical resolution.]
yScreen
[18  Saver | Returns screen saver file name.]
Saver
[18  SaverActive | Returns 1 if saver active; 0 otherwise. Does not see Blank saver.]
SaverActive
[18  SaverEnabled | Returns 1 if screen saver enabled; 0 otherwise.]
SaverEnabled
[18  SaverTime | Returns time in seconds to screen saver start.]
SaverTime
[18  Paper | Returns the current wallpaper file name.]
Paper
[18 Desktop.HideIcons | Hide all icons on desktop.]
Desktop.HideIcons
[18 Desktop.HideShowIcons | Hide icons if visible, show them if hidden.]
Desktop.HideShowIcons
[18 Desktop.HideShowTaskBar | Hide TaskBar if visible, show if hidden.]
Desktop.HideShowTaskBar
[18 Desktop.HideShowWindows | Hide all desktop windows, show them when next executed.]
Desktop.HideShowWindows
[18 Desktop.HideTaskBar | ]
Desktop.HideTaskBar
[18 Desktop.IconTextColor | Set color of text under desktop icons.]
Desktop.IconTextColor
[18 Desktop.MinShowWindows | Minimize all desktop windows, show them when next executed.]
Desktop.MinShowWindows
[18 Desktop.Resolution(x, y, colordepth, freq, savetoregistry) | Change the display resolution, color depth, and refresh frequency.]
Desktop.Resolution(x, y, 4|8|16|24, freq, |"NoSave")
[18 Desktop.Resolution(x1, y1, x2, y2, savetoregistry) | Toggle the display resolution between two settings.]
Desktop.Resolution(x1, y1, x2, y2, |"NoSave")
[18 Desktop.RestoreIcons | Restore the relative positions of desktop icons]
Desktop.RestoreIcons
[18 Desktop.SaveIcons | Save the relative positions of desktop icons]
Desktop.SaveIcons
[18 Desktop.SaveIconsGrid(horizspacing, vertspacing, "filename.IconPos") | Align desktop icon positions to a grid and save them. (use 'Advanced' dialog to set PowerPro should always restore saved positions when resolution changes)]
Desktop.SaveIconsGrid(horizspacing, vertspacing, "filename.IconPos")
[18 Desktop.SetWorkArea | Set size of work area on desktop screen: that is the size of maximized window.]
Desktop.SetWorkArea
[18 Desktop.ShowIcons | Show desktop icons.]
Desktop.ShowIcons
[18 Desktop.ShowTaskBar | ]
Desktop.ShowTaskBar
[18 Desktop.ShowTaskBarAutoHide | Show taskbar; rehide when mouse is moved off taskbar and taskbar is not foreground.]
Desktop.ShowTaskBarAutoHide
[18 Desktop.TransIconText | Make transparent background for desktop icon text.]
Desktop.TransIconText
[18 Screensaver.Change | Change screen saver.]
Screensaver.Change
[18 Screensaver.ChangeRestart | Set, clear, or reverse setting of restart screen saver when changed setting on GUI Control dialog.]
Screensaver.ChangeRestart
[18 Screensaver.ChangeTimeout | Change screen saver timeout (minutes)]
Screensaver.ChangeTimeout
[18 Screensaver.ChangeTo("filepath") | Change screen saver to specified file.]
Screensaver.ChangeTo("filepath")
[18 Screensaver.Disable | Disable the screen saver.]
Screensaver.Disable
[18 Screensaver.Enable | Enable the screen saver.]
Screensaver.Enable
[18 Screensaver.Start | Start screen saver.]
Screensaver.Start
[18 Screensaver.Stop | Stop screen saver.]
Screensaver.Stop
[18 Screensaver.TempDisable | disable the screen saver until the mouse is moved.]
Screensaver.TempDisable
[18 Wait.Saver | Wait until screen saver is running.]
Wait.Saver
[18 Wait.NoSaver | Wait until screen saver is not running.]
Wait.NoSaver
[18 Wallpaper.Show | Change wallpaper to indicated file, but do not store the file name]
Wallpaper.Show
[18 Wallpaper.Change | Change wallpaper to random file in same folder]
Wallpaper.Change
[18 Wallpaper.Change("*") | Change wallpaper to file in same folder (sequential)]
Wallpaper.Change("*")
[18 Wallpaper.ChangeTo("filepath") | Change wallpaper to indicated file]
Wallpaper.ChangeTo("filepath")
[18 Wallpaper.Style("style") | Set wallpaper style. Stretch may not work on your system.]
Wallpaper.Style("Center|Tile|Stretch")
[18 AU3.PixelChecksum(leftX, topY, rightX, bottomY, step_pixel) | Generates a checksum for a region of pixels. Allows to see if something has changed in region (does not tell exactly what). step optional (default 1)]
AU3.PixelChecksum(leftX, topY, rightX, bottomY, step_pixel)
[18 AU3.PixelGetColor(x, y) | Returns a pixel color according to x,y pixel coordinates]
AU3.PixelGetColor(x, y)
[18 AU3.PixelSearch(leftX, topY, rightX, bottomY, color, shade, step_pixel) | Search a rectangle of pixels for the pixel color (decimal or HEX). Returns blank separated string with x y coordinates. Indicate the allowed number of shades of variation of red, green and blue (default 0 -exact match). step optional (default 1)]
AU3.PixelSearch(leftX, topY, rightX, bottomY, color, 0-255, step_pixel)
[18 WIN.Area(x,y) | Returns window area (eg client, caption, max button) under screen position x,y]
WIN.Area(x, y)
;;=====================================
;; STRINGS RETURNED FROM WIN.Area(x, y)

;; BORDER      In the border of a window that does not have a sizing border.
;; BOTTOM      In the lower horizontal border of the window.
;; BOTTOMLEFT  In the lower-left corner of the window border.
;; BOTTOMRIGHT In the lower-right corner of the window border.
;; CAPTION     In a title-bar area.
;; CLIENT      In a client area.
;; GROWBOX     In a size box.
;; HSCROLL     In the horizontal scroll bar.
;; LEFT        In the left border of the window.
;; MAXBUTTON   In a Maximize button.
;; MENU        In a menu area.
;; MINBUTTON   In a Minimize button.
;; CLOSE       In a Close button.
;; NOWHERE     On the screen background or on a dividing line between windows.
;; REDUCE      In a Minimize button.
;; RIGHT       In the right border of the window.
;; SYSMENU     In a Control menu or in a Close button in a child window.
;; TOP         In the upper horizontal border of the window.
;; TOPLEFT     In the upper-left corner of the window border.
;; TOPRIGHT    In the upper-right corner of the window border.
;; TRANSPARENT In a window currently covered by another window.
;; VSCROLL     In the vertical scroll bar.
;;=====================================
[11 WIN.Crosshair() | Toggle a cross hair centered at mouse coordinates on/off]
WIN.Crosshair()
[18 WIN.Crosshair(x, y) | Draws a cross hair centered at x, y. Call again with same coordinates to erase.]
WIN.Crosshair(x, y)
[18 WIN.DisplayNameFromHandle(handle, nameflag) | Returns display name for the window with handle. nameflag = 0(returns "Main|Sec") | 1(returns device name) | 2(returns digit 1-9)]
WIN.DisplayNameFromHandle(handle, 0|1|2)
[26 WIN.DisplayRectFromHandle(handle, workflag, default) | Gets display rectangle which includes most of window handle, returns 4 blank-separated integers.]
WIN.DisplayRectFromHandle(handle, workflag, default)
[18 WIN.DisplayRectFromName(monitorName, screen|workarea) | Returns screen rectangle as 4 blank-separated integers (left top right bottom). digits 0-9 are arbitrary and could be changed by Windows at reboot]
WIN.DisplayRectFromName("Main|Sec|0-9, 0|1)
[18 WIN.DisplayRectFromPoint(x, y, screen|workarea, default) | Returns screen rectangle as 4 blank-separated integers (left top right bottom). default = 0(returns "" if no overlapping screen) | 1(returns main screen if window h not on a screen) | 2(returns closest screen)]
WIN.DisplayRectFromPoint(x, y, 0|1, 0|1|2)
[18 WIN.GetPixel(x, y) | Returns red, green, blue at position x, y. Top left is (0,0).]
WIN.GetPixel(x, y)
[18 WIN.GetPixel1(x, y) | Returns red, green, blue at position x, y as single number. Top left is (0,0).]
WIN.GetPixel1(x, y)
[18 WIN.MoveToDisplay(captionlist, monitorName) | Moves first visible window matched by captionlist to monitorName. digits 0-9 are arbitrary and could be changed by Windows at reboot]
WIN.MoveToDisplay("captionlist"|handle, "Main|Sec|0-9)
[18 WIN.VScreenHeight | Return height of virtual screen.]
WIN.VScreenHeight
[18 WIN.VScreenLeft | Return left coordinate of virtual screen.]
WIN.VScreenLeft
[18 WIN.VScreenTop | Return top coordinate of virtual screen.]
WIN.VScreenTop
[18 WIN.VScreenWidth | Return width of virtual screen.]
WIN.VScreenWidth
[18 MISCPLUGIN.Dim(action, level, mode, "password") | Darken the screen (win2k/XP only).]
MISCPLUGIN.Dim(0|1, 1-255, 1|2|3|4, "password")

[19a   SCRIPT - Predefined global variables |G ]
[19a _BreakPoints_ | Break At edit box (enter breakpoints) is stored and loaded from the global variable _BreakPoints_.]
_BreakPoints_
[19a _exit_ | Used for File.RunCallBack, File.WatchFolder, Event.Message output.]
_exit_
[19a _file_ | Selected file, in the commands for a context menu, folder buttons, menu folder, and for files dropped on buttons.]
_file_
[19a _exit_ | Used for File.WatchFolder output.]
_folder_
[19a _LastError_ | Set to the error message whenever any error occurs.]
_lastError_
[19a _PickedLine_ | index of the last string chosen from a PickFile or PickString dialog or set after Menu command to 0(menu dismissed without selection) | 1(item picked)]
_PickedLine_
[19a _RegExp_ | Regular expression result. 0(full match), 1(partial match), 2(no match), 8(error-invalid pattern), 9(error-empty string or pattern)]
_RegExp_
[19a ACDC | A if running on ac power, D otherwise.]
ACDC
[19a AllDeskNames | All desktop names, as multi-line string with one name per line.]
AllDeskNames
[19a AllGlobals | String with the names of all global variables, one name per line.]
AllGlobals
[19a AllPProProcessName | Blank-separated string of all currently running PowerPro processes.]
AllPProProcessName
[19a AllStatics | String with the names of all static variables for the script in which the function is used, one name per line.]
AllStatics
[19a Alt | Returns pressed keys. 1 = left Alt, 2 = right Alt, 3 = both]
Alt
[19a Ctrl | Returns pressed keys: 1(left Alt), 2(right Alt), 3(both)]
Ctrl
[19a Shift | Returns pressed keys. 1 = left Shift, 2 = right Shift, 3 = both]
Shift
[19a Win | Returns pressed keys. 1 = left Win, 2 = right Win, 3 = both]
Win
[19a BatteryPercent | Percent battery power left.]
BatteryPercent
[19a BrowserDomain | Domain in current browser window.]
BrowserDomain
[19a BrowserSubdomain | Domain and subdomain in current browser window.]
BrowserSubdomain
[19a Caption | Caption (title) of current foreground window.]
Caption
[19a CaptionUnder | Caption of window under the mouse.]
CaptionUnder
[19a CDCurTrack | Current CD track.]
CDCurTrack
[19a CDLastTrack | Last CD track.]
CDLastTrack
[19a Clip | Returns first line of clipboard text.]
Clip
[19a ClipTrackOn | Returns 1 if clip tracking is on; 0 otherwise]
ClipTrackOn
[19a Context | Set to 0 by PowerPro to indicate the first file ...]
Context
[19a ContextLast | Set to 1 by PowerPro to indicate the last file is being processed, of a group of selected files to which an Explorer context menu item has been applied.]
ContextLast
[19a CurrentDir | Path to working folder of current foreground window.]
CurrentDir
[19a Date | Returns todays date as 8 digit string yyyymmdd.]
Date
[19a DayofWeek | Returns day of week as single digit (Sunday is 0, Monday 1, ...)]
DayofWeek
[19a DayofYear | Returns day of year]
DayofYear
[19a  DefaultPrinter | Name of default printer]
DefaultPrinter
[19a DeskEmpty | 1 if current vdesk empty; 0 otherwise]
DeskEmpty
[19a DeskName | Name of current virtual desktop.]
DeskName
[19a DeskNum | Number 1-9 of current virtual desktop.]
DeskNum
[19a Disk | Drive letter of running PowerPro path without :]
Disk
[19a DialupName | ]
DialupName
[19a DunIdle | ]
DunIdle
[19a DunRate | ]
DunRate
[19a EXEFileName | File name (no path, no .exe) of EXE file for current foreground window.]
EXEFileName
[19a EXEFullPath | Full path to EXE name for current foreground window.]
EXEFullPath
[19a IsUserAdmin | Returns 1 if PowerPro running as admin, 0 otherwise.]
IsUserAdmin
[19a KeyLog | Returns X if logging; zero otherwise.]
KeyLog
[19a KeyLogFile | Returns name of currently open key log file.]
KeyLogFile
[19a Modem | Returns 1 if dial up connected; 0 otherwise.]
Modem
[19a LastActiveHandle | Handle to last window selected by active button.]
LastActiveHandle
[19a LastAutoRunHandle | Handle to last window selected by autorun item.]
LastAutoRunHandle
[19a LastButtonType | Returns last clicked button type: 0(normal) | 1(active) | 2(tray) | 3(folder)]
LastButtonType
[19a LastClipName | Returns file name of last captured clipboard item.]
LastClipName
[19a LastClipPath | Returns full path to last captured clipboard item.]
LastClipPath
[19a LastHotKeyDown | Returns 1 if mouse button is down, 0 otherwise.]
LastHotKeyDown
[19a LastIdleTime | Returns length of last idle period in which an alarm occurred.]
LastIdleTime
[19a LastModKeys | Returns string of last mod keys used to activate hot key; lAlt, rAlt, lCtrl, rCtrl, lShift, rShift, lWin, rWin]
LastModKeys
[19a LastMouseKeyTime | Returns time since last mouse or keyboard action (in milliseconds since Windows start)]
LastMouseKeyTime
[19a LastNoteHandle | Handle to last active note window.]
LastNoteHandle
[19a LastScanCode | Returns scan code of last hot key (plus 256 if extended key bit set)]
LastScanCode
[19a LastTrayID | Tray icon ID of last tray icon button pressed.]
LastTrayID
[19a LastVKcode | Returns virtual Key code of last hot key]
LastVKcode
[19a LongDate | Returns todays date in control panel regional long date format.]
LongDate
[19a Mouse4 | Returns 1 if mouse 4 button is down, 0 otherwise.]
Mouse4
[19a Mouse5 | Returns 1 if mouse 5 button is down, 0 otherwise.]
Mouse5
[19a MouseLeft | Returns 1 if left mouse button is down, 0 otherwise.]
MouseLeft
[19a MouseMiddle | Returns 1 if middle mouse button is down, 0 otherwise.]
MouseMiddle
[19a MouseRight | Returns 1 if right mouse button is down, 0 otherwise.]
MouseRight
[19a Muted | Set 1 if muted sound; set 0 otherwise.]
Muted
[19a OnErrorSetting | ]
OnErrorSetting
[19a Paper | Current wallpaper file name.]
Paper
[19a PCFName | Filename and extension of current configuration file.]
PCFName
[19a PMem | Percent free memory]
PMem
[19a PerfCount | Returns the Windows performance counter, 64 bit integer.]
PerfCount
[19a PerfFreq | The frequency, in counts per second, that perfcount is incremented, 64 bit integer.]
PerfFreq
[19a ProcessCount | Count of active processes.]
ProcessCount
[19a PProFolder | Folder of PowerPro configuration including terminating \.]
PProFolder
[19a PProProcessName | Name of currently running PowerPro Process.]
PProProcessName
[19a PProVersion | Version of PowerPro as four digit integer.]
PProVersion
[19a PProNotesFolder | Folder of PowerPro notes including terminating \.]
PProNotesFolder
[19a RecycleItems | Total number of items in recycle bin on all drives.]
RecycleItems
[19a RecycleSize | Total size of recycle bin on all drives in KB.]
RecycleSize
[19a Saver | Screen saver file name.]
Saver
[19a SaverActive | Returns 1 if saver active; 0 otherwise. Does not see Blank saver.]
SaverActive
[19a SaverEnabled | Returns 1 if screen saver enabled; 0 otherwise.]
SaverEnabled
[19a SaverTime | Time in seconds to screen saver start.]
SaverTime
[19a ScriptCallStack | Multiline string with a line per active script.(current line number and name@startlabel)]
ScriptCallStack
[19a ScriptFolder | Folder of currently executing script.]
ScriptFolder
[19a ScriptLine | Line number in currently executing script.]
ScriptLine
[19a ScriptName | Name of currently executing script.]
ScriptName
[19a ScriptPath | Script search path as set by most recent *Script Path.]
ScriptPath
[19a ShortDate | Returns todays date in control panel regional short date format.]
ShortDate
[19a SubBarName     | Returns name of current subbar]
SubBarName
[19a StandardConfiguration | Returns 1 if 'Use standard configuration' is checked.]
StandardConfiguration
[19a ThreadCount | Count of active threads.]
ThreadCount
[19a Time | Returns time as 6 digit string hhmmss]
Time
[19a TimeSec | Returns number of seconds since midnight January 1, 1970]
TimeSec
[19a TimeZone | Returns name of current timezone.]
TimeZone
[19a ToolTipSeparator | Tooltip multi-line separator character.]
ToolTipSeparator
[19a Uptime | Number of seconds Windows has been running.]
Uptime
[19a UserName | The name of the currently signed-on user]
UserName
[19a UnixTime | Returns number of seconds since midnight January 1, 1970]
UnixTime
[19a Volume | Current master volume (0 - 255)]
Volume
[19a WindowsVersion | 4 blank-separated numbers: major version, minor version, build, platform id.]
WindowsVersion
[19a xCursor | Returns horizontal text cursor position in pixels (0 for left edge of screen)]
xCursor
[19a xMouse | Returns horizontal mouse position in pixels (0 for left edge of screen)]
xMouse
[19a xScreen | Screen width in pixels. Current horizontal resolution.]
xScreen
[19a xTime | Returns time in control panel regional time format.]
xTime
[19a yCursor | Returns vertical text cursor position in pixels (0 for top edge of screen)]
yCursor
[19a yMouse | Returns vertical mouse position in pixels (0 for top edge of screen)]
yMouse
[19a yScreen | Screen height in pixels. Current vertical resolution.]
yScreen

[19b   SCRIPT - Variables |G ]
[19b Global  | Global variable declaration.]
Global
[19b Static  | Static variable declaration. (Local, but maintains value when script quits)]
Static
[19b Local  | Local variable declaration. (released at script/function quit)]
Local
[19b Arg(index) | Returns index th argument in the call to the script.]
Arg(index)
[19b PProFlag(x) | Returns value of flag. Flags numbered 1 to 19b that can have a value of 0 or 1.]
PProFlag(x)
[19 *Script Assign | Assign a string or number to a variable.]
*Script Assign
[19b *Script Flag | Assign a value to a flag.]
*Script Flag
[19b Assign("var1", "var2") | Assigns second string to variable name given by first string.]
Assign("var1", "var2")
[19b Env("environmentVariableName") | Value of environment variable]
Env("environmentVariableName")
[19b Exec.RefreshEnvironment | Refresh all environment variables from registry, does not delete variables which are deleted (NT or later only).]
Exec.RefreshEnvironment
[19b Exec.SetEnv("environmentVariableName", "value") | Set environment variable to provided value.]
Exec.SetEnv("environmentVariableName", "value")
[19b Flag Set x1 x2 | Set flags x1 to x2 inclusive. ('Flag Set 4 7' Set flags 4, 5, 6, 7)]
Flag Set 1-31 1-31
[19b Flag Clear x1 x2 | Set flags x1 to x2 inclusive. ('Flag Clear 1 31' clears all flags)]
Flag Clear 1-31 1-31
[19b Flag Reverse x1 x2 | Reverses flags x1 to x2 inclusive. ('Flag Reverse 4 7' reverses 4, 5, 6, 7)]
Flag Reverse 1-31 1-31
[19b SetString varName string | Set the variable varName to the following characters except the first space character after the varName. There is no special processing for escape characters.]
SetString varName string

[19c    SCRIPT - MAPS |G ]
[19c mapname"key" = "value" | Assigns string value to key of map mapname. Same as mapname.Set(key, val)]
mapname["key"] = "value"
[19c val = mapname"key" | Retrieves value for key of map mapname. Same as mapname.Get(key)]
val = mapname["key"]
[19c MAP.Capacity(mapname) | Returns total number of entries. (power of 2 greater) Same as mapname.Capacity]
MAP.Capacity(mapname)
[19c MAP.Create(size, caseSensetive) | Creates a new map with mapname.]
mapname = MAP.Create(size, 0|1)
[19c MAP.Delete(mapname, "key") | Deletes key from mapname. Length decreases by 1. Same as mapname.Delete(key)]
MAP.Delete(mapname, "key")
[19c MAP.DeleteAll(mapname) | Deletes all keys and values from mapname. Length = 0. Same as mapname.DeleteAll]
MAP.DeleteAll(mapname)
[19c MAP.Destroy(mapname) | Frees all memory assigned to mapname and handle. Same as mapname.Destroy]
MAP.Destroy(mapname)
[19c MAP.EOF(mapname) | Returns 1 if Length = 0 or call to GetNext reaches the last key. Same as m.EOF]
MAP.EOF(mapname)
[19c MAP.Exists(mapname) | Returns 1 if mapname is a valid map; 0 otherwise. Same as mapname.Exist]
MAP.Exists(mapname)
[19c MAP.Get(mapname, key) | Retrieves value for key. Same as mapname[key]]
MAP.Get(mapname, key)
[19c MAP.GetNext(mapname) | Allows you to retrieve all the keys in a map without order. Same as m.GetNext]
MAP.GetNext(mapname)
[19c MAP.Length(mapname) | Returns number of key-value pairs in MAP. Same as mapname.Length]
MAP.Length(mapname)
[19c MAP.Restart(mapname) | GetNext will retrieve first key again. Same as mapname. Restart]
MAP.Restart(mapname)
[19c MAP.Set(mapname, key, "value") | Assigns the string value to key. Same as mapname ?key? = "value"]
MAP.Set(mapname, key, "value")
[19c MAP.SlotUsed(mapname) | Returns number of slots used in the lookup table. Same as mapname.SlotUsed]
MAP.SlotUsed(mapname)
[19c MAP.Unload | Unload the plugin.]
MAP.Unload

[19d    SCRIPT - VECTORS |G ]
[19d Local v capacity; growth; minsize | Creates a new vector]
Local v[capacity; growth; minsize]
[19d Local v rows, columns; minsize  | Creates a new 2D vector]
Local v[rows, columns; minsize]
[19d VEC.BinIndex | Locates position for element in sorted array using binary search.]
VEC.BinIndex
[19d VEC.BinInsert(v, value) | Inserts the value into v if the value is not there. (v sorted in asc. order)]
VEC.BinInsert(v, value)
[19d VEC.BinSearch(v, value) | Searchs for value in v and returns its index. (if v is sorted in asc. order)]
VEC.BinSearch(v, value)
[19d VEC.Capacity(v) | Returns capacity of vector. Same as v.Capacity]
VEC.Capacity(v)
[19d VEC.Create(capacity, growth, minsize) | Creates a new vector and returns its handle.]
VEC.Create(capacity, growth, minsize)
[19d VEC.Create2D(rows, columns, minsize) | Creates a new 2D vector and returns its handle. You cannot grow or insert.]
VEC.Create2D(rows, columns, minsize)
[19d VEC.CreateFromLines("stringlines", growth, minsize) | Creates a new vector from the lines in a string and returns its handle.]
VEC.CreateFromLines("stringlines", growth, minsize)
[19d VEC.CreateFromWords("stringwords", dchars, growth, minsize) | Creates a new vector from the words in a string and returns its handle.]
VEC.CreateFromWords("stringwords", dchars, growth, minsize)
[19d VEC.Delete(v, index) | Deletes the element at index (zero based). Length decreases by 1. Same as v.Delete(index)]
VEC.Delete(v, index)
[19d VEC.DeleteAll(v) | Deletes all elements of vector; VEC.Legnth set to 0. Same as v.DeleteAll]
VEC.DeleteAll(v)
[19d VEC.Destroy(v) | Frees all memory assigned to v and its elements and handle. Same as v.Destroy]
VEC.Destroy(v)
[19d VEC.DoubleSort(v1, v2, descending, casesensetive) | Sorts v1 in asc. order and keeps elements of vector v2 in corresponding order with v1.]
VEC.DoubleSort(v1, v2, 0|1, 0|1)
[19d VEC.DoubleSortString(v1, v2, descending, casesensetive) | Same as VEC.DoubleSort, except contents of v1 are always treated as strings.]
VEC.DoubleSortString(v1, v2, 0|1, 0|1)
[19d VEC.Exists(v) | Returns 1 if vector v exists; 0 otherwise. Same as v.exists]
VEC.Exists(v)
[19d VEC.Get(v, index) | Retrieves element of vec v by index (zero based). Same as v[index]]
VEC.Get(v, index)
[19d VEC.Grow(v, growcount) | Grows capacity of vector by specified amount. Same as v.Grow(growcount)]
VEC.Grow(v, growcount)
[19d VEC.Insert(v, index, value) | Inserts value to element index of vector v. Same as v.Insert(index, value)]
VEC.Insert(v, index, value)
[19d VEC.InsertNoGrow(v, index, value) | Like VEC.Insert but if v at full capacity, last element drops. v.InsertNoGrow(index, value)]
VEC.InsertNoGrow(v, index, value)
[19d VEC.Length(v) | Returns length of vector. The length is one greater than the top index.]
VEC.Length(v)
[19d VEC.LocalCopy(Arg(1)) | ]
VEC.LocalCopy(Arg(1))
[19d VEC.MakeLines(v) | Elements of v are combined in a single string as separate lines with \r\n.]
VEC.MakeLines(v)
[19d VEC.MakeWords(v, "delimiter") | Elements of v are combined in a single string as separate words with delimiter.]
VEC.MakeWords(v, "delimiter")
[19d VEC.MaxVecs(n) | Raises maximum number of vectors to n. Existing vectors are preserved.]
VEC.MaxVecs(n)
[19d VEC.Set(v, index, value) | Assigns the string value to index element of vector v. Zero based index. Same as v[i]=value]
VEC.Set(v, index, value)
[19d VEC.ShowMenu(v, maxlabelchars, pos, autoclose, bgcolor, xoffset, yoffset) | Create a menu built from entries of v. Can use *sep|*colsep|*colsepline. pos = 0(at mouse) | 1 (screen center) | 2(centered under mouse) | 3(at text cursor) | 4(at 0,0) . Returns index of selection or -1]
Win.LastMouse(1)
VEC.ShowMenu(v, maxlabelchars, 0|1|2|3|4, 0|1, bgcolor, xoffset, yoffset)
butMouse = Win.LastMouse(0)
[19d VEC.Sort(v, descending, casesensetive) | Sorts v in asc. order (descending if descending is 1). Same as v.Sort(descending, casesensetive)]
VEC.Sort(v, 0|1, 0|1)
[19d VEC.SortString(v, descending, casesensetive) | As VEC.Sort except contents of v are always treated as strings.]
VEC.SortString(v, 0|1, 0|1)
[19d VEC.Swap(v, index1, index2) | Exchanges index1 and index2. Uses memory more effeciently. Same as v.Swap(index1, index2)]
VEC.Swap(v, index1, index2)
[19d VEC.Unload | Unload the plugin.]
VEC.Unload

[19e    SCRIPT - Commands |G ]
[19e  ;; comments | Comment (singleline)]
;;
[19e  _AutoInit_ | This function is automatically called once when the script file is loaded.]
_AutoInit_
[19e Call("filePath@entry", args) | Runs script file given by filePath, optionally entry following lists of args.]
Call("filePath@entry", args)
[19e CB("entry", args) | Returns a string that can be used as a callback in dialogs or events using the call function.]
CB("entry", args)
[19e CBx("entry", args) | Shortform of CB(scriptfolder ++ '/' ++ scriptname ++ '@entry', args)]
CBx("entry", args)
[19e Do("filePath", "params", "workFolderPath", howstart) | Execute an external command. workfolder (and rest) optional]
Do("filePath", "params", "workFolderPath", "Max|Min|SwitchTo|NormalUser|Topmost|Hidden|TrayMin")
[19e Do(ppcmd.action(params)) | Execute a built in command using Expression Syntax.]
Do(ppcmd.action(params))
[19e Do("ppcmd", "action and params", "keywords") | Execute a built in command using Literal Syntax.]
Do("ppcmd", "action and params", "keywords")
[19e ENDFUNCTION | Stop execution of the script/function.]
ENDFUNCTION
[19e For(var=initexpr; testexpr; var=increxpr) | You cannot use Jump, Wait.Until in a For loop.]
For(var = initexpr; testexpr; var = increxpr)

	EndFor
[19e For(testexpr) | Equivalent to a While statement as used in other languages.]
For(testexpr)

	EndFor
[19e Break | Use to exit a For/EndFor loop without completing.]
Break
[19e Continue | Skip the rest of the iteration of a loop and continue with the next iteration.]
Continue
[19e Jump label | Go to @label of the currently executing script.]
Jump label
[19e For Each var_result In expression_or_var | Loop through all items in a collection or all characters, words, or lines in a string, vector, map or file.]
For Each var_result In expression_or_var

	EndFor
[19e For Each var_result Index var_index In expression_or_var | Same as For Each. var_index increments from 0, each time through the loop.]
For Each var_result Index var_index In expression_or_var

	EndFor
[19e For Each var_result Index1 var_index In expression_or_var | Same as For Each. var_index increments from 1, each time through the loop.]
For Each var_result Index1 var_index In expression_or_var

	EndFor
[19e FUNCTION funcname ... QUIT | Function definition. Called by 'funcname()' or '.filename@funcname' if in another file.]
FUNCTION funcname

	QUIT
[19e FUNCTION funcname ... ENDFUNCTION | Function definition. Called by 'funcname()' or '.filename@funcname' if in another file.]
FUNCTION funcname

	ENDFUNCTION
[19e If (condition) do | Multistatement If]
If ( ) do

	EndIf
[19e Ifx (condition) | Multistatement If. Same as If (condition) do]
Ifx ( )

	EndIf
[19e ElseIf (condition) | ]
ElseIf ( )
[19e EndIf | ]
EndIf
[19e If (condition, result1) | Returns result1 if condition non empty or zero; '' otherwise.]
result = If(condition, result1)
[19e IfElse(expr, result1, result2) | Returns result1 if expr non empty or zero; result2 otherwise.]
result = IfElse(expr, result1, result2)
[19e IfElse(expr, "result1,result2") | Returns result1 if expr non empty or zero; result2 otherwise.]
IfElse(expr, "result1,result2")
[19e Imports(filePath_expression) Static | Import all static variables to current script file]
Imports(filePath_expression) Static
[19e Imports(filePath_expression) func1 func2 func3 | Import functions in other files. * in place of names will import all functions.]
Imports(filePath_expression) func1 func2 func3
[19e Switch(expr) | Select set of actions from a group. Cannot be nested in the same function.]
Switch(expr)
	Case constant1
		Break
	Case constant2
		Break
	Case Else
		Break
	EndSwitch
[19e Switch Exact(expr) | Select set of actions from a group. String based case-sensitive comparison.]
Switch Exact(expr)
	Case constant1
		Break
	Case constant2
		Break
	Case Else
		Break
	EndSwitch
[19e Case constant1, constant2 | Case for Select command any number of comma-separated constants.]
Case constant1
	Break
[19e Case Else | Last Case for Select command,  executed if not any of previous constants match.]
Case Else
	Break
[19e With var.subvar | Treats any dots which are not preceded by a variable as if they were preceded by the var.subvar. Max.nest depth is 3.]
For Each var_result Index1 var_index In expression_or_var
	EndWith
[19e Run.clistname(arg1, arg2, .. , arg23) | Run a script stored in command list called clistname with the specified arguments.]
Run.clistname(arg1, arg2)
[19e Run.clistname@startpoint(args) | Run a script stored in command list called clistname, start at label startpoint.]
Run.clistname(arg1, arg2)
[19e Exec.SetRegex("string") | Set the default for global versus single match/replace of Regex.]
Exec.SetRegex("OneMatch|Global|OneMatchOnce|Sep=x")
[19e Exec.SuspendScripts(1) | Suspend PCF-based scripts until successful reconfigure or call with suspendscipts(0).]
Exec.SuspendScripts(1)
[19e *Script Path path1 path2 | Set the search path for scripts.]
*Script Path path1 path2
[19e *Script Run commandlist | Run a script from command list (only left commands are used)]
*Script Run commandlist
[19e *Script RunFile strFilePath | Run a script from a file.]
*Script RunFile strFilePath
[19e *Script Jump label | Jumps to a @ label in a script, similar to Goto in Perl.]
*Script Jump label
[19e *Script Quit | End execution of a script. Similar to die() in Perl or PHP.]
*Script Quit
[19e *Script Quit All | End execution of a script, end any calling scripts too]
*Script Quit All
[19e QUIT | Stop execution of the script/function.]
QUIT
[19e QUIT(expression) | Stop execution of the script/function. Return a result from the script.]
QUIT(expression)
[19e QUIT All | Stop execution of the script/function, quit any calling scripts too.]
QUIT All
[19e Class.Define("classname", "baseclass", "public vars : private vars", minvarsize) | Define a class.]
Class.Define("classname", "baseclass", "public vars : private vars", minvarsize)
[19e Class.Get("classname") | Returns a handle to the class with the name.]
Class.Get("classname")
[19e Class.Verbose(1) | Ensures 0 objects by class at unload.]
Class.Verbose(1)
[19e Class.Verbose(2) | Shows trace message for every allocation and free.]
Class.Verbose(2)
[19e Class.Check | Ensures 0 objects by class.]
Class.Check

[19f    SCRIPT - Numbers |G ]
[19f Abs(x) | Absolute value of number.]
Abs(x)
[19f Case("FromNum", "string") | Translate space-separate decimal numbers to corresponding ASCII character.]
Case("FromNum", "string")
[19f Case("FromNumX", "string") | Translate space-separate hexadecimal numbers to corresponding ASCII character.]
Case("FromNumX", "string")
[19f Case("ToNum", "string") | Translate characters in the string to space-separated decimal equivalents.]
Case("ToNum", "string")
[19f Case("ToNumX", "string") | Translate characters in the string to space-separated hexadecimal equivalents.]
Case("ToNumX", "string")
[19f ConvertBase("string"|number, fromBase, toBase) | Convert number base. If first argument is number, it will be stored by PowerPro as base 10 string]
ConvertBase("string"|number, fromBase, toBase)
[19f FloatToString(x) | Returns string representation of floating point number.]
FloatToString(x)
[19f IsNumber("string") | Returns 1 if string is a number, else 0.]
IsNumber("string")
[19f Max(val1, val2) | Maximum of two values.]
Max(val1, val2)
[19f Min(val1, val2) | Minimum of two values.]
Min(val1, val2)
[19f Random(maxlimit) | Returns a random integer between 0 and maxlimit-1]
Random(maxlimit)
[19f stringname.ToFloat | Convert string to floating point.]
stringname.ToFloat
[19f StringToFloat(string) | Convert string to floating point.]
StringToFloat(stringname)
[19f INT64.Add(n1, n2) | Sum two to nine numbers. Returns result as string. (Numbers greater than 2**31-1 must be in quotes. (4 bit numbers are stored as strings)]
INT64.Add(n1, n2)
[19f INT64.Compare(n1, n2) | Compare two numbers, returning -1, 0, or 1. (Numbers greater than 2**31-1 must be in quotes. 64 bit numbers are stored as strings)]
INT64.Compare(n1, n2)
[19f INT64.Divide(n1, n2) | Divide two numbers. (Numbers greater than 2**31-1 must be in quotes. 64 bit numbers are stored as strings)]
INT64.Divide(n1, n2)
[19f INT64.Mod(n1, n2) | Returns remainer of integer division of two numbers. (Numbers greater than 2**31-1 must be in quotes. 64 bit numbers are stored as strings)]
INT64.Mod(n1, n2)
[19f INT64.Mul(n1, n2) | Multiply two to nine numbers. (Numbers greater than 2**31-1 must be in quotes. 64 bit numbers are stored as strings)]
INT64.Mul(n1, n2)
[19f INT64.Sub(n1, n2) | Subtract two numbers. (Numbers greater than 2**31-1 must be in quotes. 64 bit numbers are stored as strings)]
INT64.Sub(n1, n2)
[19f INT64.Unload | Unload the plugin.]
INT64.Unload
[19f MATH.ACos(x) | ]
MATH.ACos(x)
[19f MATH.ASin(x) | ]
MATH.ASin(x)
[19f MATH.ATan(x) | ]
MATH.ATan(x)
[19f MATH.ATan2(x) | ]
MATH.ATan2(x)
[19f MATH.Ceil(x) | ]
MATH.Ceil(x)
[19f MATH.Cos(x) | ]
MATH.Cos(x)
[19f MATH.Cosh(x) | ]
MATH.Cosh(x)
[19f MATH.Exp(x) | ]
MATH.Exp(x)
[19f MATH.Floor(x) | Round a value with MATH.Floor(x+0.5).]
MATH.Floor(x)
[19f MATH.Format(number, "e|f|g", field_of_width, decimalcount, regional) | Format floating point number as string. e=exponent, f=fixed decimal, g=use f if possible, e otherwise]
MATH.Format(number, "e|f|g", field_of_width, decimalcount, " |r")
[19f MATH.Int(x) | Truncate x to nearest integer. Same as x.Int]
MATH.Int(x)
[19f MATH.Log(x) | ]
MATH.Log(x)
[19f MATH.Log10(x) | ]
MATH.Log10(x)
[19f MATH.RoundInt(x) | Round x to nearest integer; MATH.RoundInt(x) = MATH.Int(x+0.5)]
MATH.RoundInt(x)
[19f MATH.Sin(x) | Also "x.Sin" (x is a floating point number)]
MATH.Sin(x)
[19f MATH.Sinh(x) | ]
MATH.Sinh(x)
[19f MATH.Sqrt(x) | ]
MATH.Sqrt(x)
[19f MATH.Tan(x) | ]
MATH.Tan(x)
[19f MATH.Tanh(x) | ]
MATH.Tanh(x)
[19f MATH.Unload | Unload the plugin.]
MATH.Unload
[19f WIN.Hex(number) | Returns hexadecimal equivalent for number.]
WIN.Hex(number)

[19g    SCRIPT - Strings |G ]
[19g CRC32("string") | CRC32 of string; use === to compare crc's to force string comparison.]
CRC32("string")
[19g Case("Acronym", "string") | Creates an acronym from the first character of each word (first letters of each word).]
Case("Acronym", "string")
[19g Case("Lower", "string") | Convert to lower case.]
Case("Lower", "string")
[19g Case("Sentence", "string") | Convert to sentence case.]
Case("Sentence", "string")
[19g Case("Title", "string") | Convert to title case.]
Case("Title", "string")
[19g Case("Upper", "string") | Convert to upper case.]
Case("Upper", "string")
[19g Esc(?+string+, ?+c+) | The characters of string are processed as if c is the escape character.]
Esc(?+string+, ?+c+)
[19g Eval("string") | Evaluates string as an expression and returns results.]
Eval("string")
[19g Fill("string1", "string2") | Combines two strings. Fill("0000", 12) yields "0012"]
Fill("string1", "string2")
[19g Find("string", "searchstring", start) | Index of searchstring within string. 0 based start index optional. Returns -1 if not found]
Find("string", "searchstring", start)
[19g Index("string", "searchstring", start) | Index of searchstring within string. 1 based start index optional. Returns -1 if not found]
Index("string", "searchstring", start)
[19g Join("string1", "string2") | Joins two strings. Same as str1 ++ str2]
Join("string1", "string2")
[19g Length(string) | Returns length of string.]
Length("string")
[19g Line("string", 0) | Returns the number of lines in the string.]
Line("string", 0)
[19g Line("string", lineindex) | Scans the string and returns the nth line.  lineindex start at 1.]
Line("string", lineindex)
[19g Match("string", "pattern") | Regular expression match of pattern to string; returns first match.]
Match("string", "pattern")
[19g MatchG("string", "pattern") | Regular expression match of pattern to string; returns all matches.]
MatchG("string", "pattern")
[19g Max("string1", "string2") | Maximum of two strings.]
Max("string1", "string2")
[19g Min("string1", "string2") | Minimum of two strings.]
Min("string1", "string2")
[19g NextWord("string", "variablename", "delims") | Returns the next word as delimited by delims (default blank and tab). variablename returnes the rest of string.]
NextWord("string", "variablename", "delims")
[19g PickString("stringlines", "title") | Selects a string from a list in a dialog.]
PickString("string1\rstring2\rstring3", "title")
[19g Remove("string", count) | Removes characters from string, -count removes from the end.]
Remove("string", count)
[19g Repeat("string", count) | Returns string formed by repeating first argument count times.]
Repeat("string", count)
[19g Replace("string", "strFind", "strReplace") | Returns string with first match of strFind replaced by strReplace. Regular expressions can be used in strFind.(global variable _RegExp_ gets set)]
Replace("string", "strFind", "strReplace")
[19g ReplaceChars("string", "chars") | chars contain search and replacement characters. All occurrences of starting characters replaced by the last character]
ReplaceChars("string", "chars")
[19g ReplaceChars("string", "strFind", "strReplace") | Replaces all occurrences of strFind by strReplace.]
ReplaceChars("string", "strFind", "strReplace")
[19g ReplaceG("string", "strFind", "strReplace") | Returns string with all matches of strFind replaced by strReplace. Regular expressions can be used in strFind.(global variable _RegExp_ gets set)]
ReplaceG("string", "strFind", "strReplace")
[19g Reverse("string") | Reverse string.]
Reverse("string")
[19g RevFind("string", "searchstring", start) | Backword index of last occurrence of searchstring within string. 0 based start index optional. Returns 0 if not found]
RevFind("string", "searchstring", start)
[19g RevIndex("string", "searchstring", start) | Backword index of last occurrence of searchstring within string. 1 based start index optional. Returns 0 if not found]
RevIndex("string", "searchstring", start)
[19g Rotate("string", n, "strPrefix", minLength) | Rotates string n chars to the left. If rotation greater than 0, prefixes the start of the string by strPrefix. If string length is less than or equal to minLength, no rotation is done]
Rotate("string", n, "strPrefix", minLength)
[19g Select("string", charcount) | Get characters from string, use -charcount to get backwords]
Select("string", charcount)
[19g Select("string", startindex, endindex) | Get characters from string, 1 based index]
Select("string", startindex, endindex)
[19g Slice("string", charcount) | Get characters from string, use -charcount to get backwords]
Slice("string", charcount)
[19g Slice("string", startindex, endindex) | Get characters from string, 0 based index]
Slice("string", startindex, endindex)
[19g Squeeze("string") | Replace all runs of two or more repeated characters by the same single character.]
Squeeze("string")
[19g Squeeze("string", "charlist") | Replace runs of two or more repeated characters of charlist by the same single character.]
Squeeze("string", "charlist")
[19g StrColl("string1", "string2") | Compare two strings using local collating sequence, case sensewtive. Returns: -1(first less than second), 0(first equals second), 1(otherwise)]
StrColl("string1", "string2")
[19g StrIColl("string1", "string2") | Compare two strings using local collating sequence, case insensewtive. Returns: -1(first less than second), 0(first equals second), 1(otherwise)]
StrIColl("string1", "string2")
[19g Translate("string", "fromchars", "tochars") | If found in string, any characters occuring in fromchars replaced by corresponding ones in tochars.]
Translate("string", "fromchars", "tochars")
[19g Trim("string") | Remove blank characters from end of string]
Trim("string")
[19g Trim("string", "trimchars", n) | Remove characters listed in trimchars from string. n = 1(remove from start) | 2(removes from end) | 3(removes from both)]
Trim("string", "trimchars", 1|2|3)
[19g Word("string", 0, "delims") | Returns the number of words in the string; delims is seperator character (default blank and tab)]
Word("string", 0, "delims")
[19g Word("string", n, "delims") | Scans the string and returns the nth word; delims is seperator character (default blank and tab)]
Word("string", n, "delims")
[19g string.Empty | Returns 1 if string is empty. Same as string.Length==0]
string.Empty
[19g string.NumLines | Returns the number of lines in the string. Same as string.Line(0)]
string.NumLines
[19g str.NumWords | Returns the number of words in the string. Same as string.Word(0)]
str.NumWords
[19g variable -x, -y  | Returns the part of variable from x to y counting backwords.(last char is -1)]
variable[-x, -y]
[19g variable -x  | Returns the xth chracter of variable counting backwords.(last char is -1)]
variable[-x]
[19g variable x, y  | Returns the part of variable value from x to y.(zero based)]
variable[x, y]
[19g variable x, y = "string" | Replaces the part from x to y by string.(zero based)]
variable[x, y] = "string"
[19g variable x  = "string" | Replaces xth character of variable by string.(zero based)]
variable[x] = "string"
[19g variable x  | Returns the xth chracter of variable.(zero based)]
variable[x]
[19g MAIL.Clean_String("string", "chars_to_remove") | cleans a string of unwanted characters, chars_to_remove optional (default chars=?'&<>"_ )]
MAIL.Clean_String("string", "chars_to_remove")
[19g MISCPLUGIN.Is_Alpha("string") | Check if the supplied string is Alphabetic (A-Z, a-z).]
MISCPLUGIN.Is_Alpha("string")
[19g MISCPLUGIN.Is_AlphaNum("string") | Check if the supplied string is AlphaNumeric (A&#x2013;Z, a&#x2013;z, 0&#x2013;9).]
MISCPLUGIN.Is_AlphaNum("string")
[19g MISCPLUGIN.Is_ASCII("string") | Check if the supplied string is ASCII character (0x00&#x2013;0x7F).]
MISCPLUGIN.Is_ASCII("string")
[19g MISCPLUGIN.Is_ControlChar("string") | Check if the supplied string is Control Character (0x00&#x2013;0x1F, 0x7F).]
MISCPLUGIN.Is_ControlChar("string")
[19g MISCPLUGIN.Is_HexDigit("string") | Check if the supplied string is Hexadecimal digit (A-F, a-f, 0-9).]
MISCPLUGIN.Is_HexDigit("string")
[19g MISCPLUGIN.Is_Int("string") | Check if the supplied string is Integer (+/- 0-9).]
MISCPLUGIN.Is_Int("string")
[19g MISCPLUGIN.Is_LowerCase("string") | Check if the supplied string is LowerCase letter (a-z).]
MISCPLUGIN.Is_LowerCase("string")
[19g MISCPLUGIN.Is_LU("string") | Check if the supplied string is Letter or Underscore.]
MISCPLUGIN.Is_LU("string")
[19g MISCPLUGIN.Is_LUD("string") | Check if the supplied string is Letter, Underscore or Digit.]
MISCPLUGIN.Is_LUD("string")
[19g MISCPLUGIN.Is_Printable("string") | Check if the supplied string is Printable Character except space.]
MISCPLUGIN.Is_Printable("string")
[19g MISCPLUGIN.Is_PrintableSpace("string") | Check if the supplied string is Printable Character including space (0x21 - 0x7E).]
MISCPLUGIN.Is_PrintableSpace("string")
[19g MISCPLUGIN.Is_Punct("string") | Check if the supplied string is Punctuation Character.]
MISCPLUGIN.Is_Punct("string")
[19g MISCPLUGIN.Is_UpperCase("string") | Check if the supplied string is UpperCase letter (A&#x2013;Z).]
MISCPLUGIN.Is_UpperCase("string")
[19g MISCPLUGIN.Is_WsChar("string") | Check if the supplied string is White-Space character (0x09&#x2013;0x0D, 0x20).]
MISCPLUGIN.Is_WsChar("string")

[19h   SCRIPT - Debugging |G ]
[19h _BreakPoints_ | Break At edit box (enter breakpoints) is stored and loaded from the global variable _BreakPoints_.]
_BreakPoints_
[19h ;b!= | Breakpoint]
;b!=
[19h ;b! if (expr) | The breakpoint is taken only if the expression if true.]
;b! if (expr)
[19h AllGlobals | Returns a string with the names of all global variables, one name per line.]
AllGlobals
[19h AllStatics | Returns a string with the names of all static variables for the script in which the function is used, one name per line.]
AllStatics
[19h ScriptCallStack | Returns multiline string with a line per active script. (current line number and name@startlabel)]
ScriptCallStack
[19h Exec.Debug("action") | Debug separate (secondary) PowerPro processes.]
Exec.Debug("Common|AutoShow|CommandStart")
[19h Exec.Debug("action Off") | Stop debugging separate (secondary) PowerPro processes.]
Exec.Debug("Common|AutoShow|CommandStart Off")
[19h Exec.ScriptDebug(n) | n = -1(reverse debugging state) | 0(debugging off) | 1(debugging on}]
Exec.ScriptDebug(-1|0|1)
[19h Exec.ScriptDebug("Suspend") | Suspend debugging.]
Exec.ScriptDebug("Suspend")
[19h Exec.ScriptTrace("action keywords") | Trace script execution performance by listing the execution time of each line.]
Exec.ScriptTrace("On|Off|Reverse Header|New|NoBuffer|NoAutoClose")
[19h *Script Debug | Write following text or expression to a debug window.]
*Script Debug
[19h WIN.Debug(sz1, sz2) | Arguments are joined with separating blank (max.500 char) and shown in a debug window.]
WIN.Debug(sz1, sz2)
[19h WIN.DebugClear | Clear debug windows.]
WIN.DebugClear
[19h WIN.DebugShow(sz1, sz2) | Arguments are joined with separating blank (max.500 char) and shown in a foreground debug window.]
WIN.DebugShow(sz1, sz2)
[19h WIN.SetDebug(n) | n = 0(pause debug output) | 1(resume output). Also selects where debug output is written.]
WIN.SetDebug(0|1|"Screen|Gile|GileNew|Both|BothNew")

[19i    EVENT |G ]
[19i EVENT.Count(e) | Returns the number of intervals remaining for an event scheduled with a count. Same as e.Count]
EVENT.Count(e)
[19i EVENT.CountThis | Returns the number of intervals remaining for the event. Used in the command assigned to an event when it is created.]
EVENT.CountThis
[19i EVENT.Create(interval_sec, repeat, "command", "expr", maxtimes) | Execute command every sec.(if optional expr true, execute maxtimes)]
EVENT.Create(interval_sec, repeat, "command", "expr", maxtimes)
[19i EVENT.Createms(interval_ms, repeat, "command", "expr", maxtimes) | Same as EVENT.Create, only interval in milliseconds. The minimum is 20 ms.]
EVENT.Createms(interval_ms, repeat, "command", "expr", maxtimes)
[19i EVENT.Destroy(e) | Removes event e and returns 0. Same as e.Destroy]
EVENT.Destroy(e)
[19i EVENT.DestroyAll | Removes all active events.]
EVENT.DestroyAll
[19i EVENT.DestroyThis | Removes the command. Used in the command assigned to an event when it is created.]
EVENT.DestroyThis
[19i EVENT.Exists(e) | Returns 1 if e is a valid event; 0 otherwise. Same as e.Exists]
EVENT.Exists(e)
[19i EVENT.Message(countdown, "command", "message", "title", ontop, x, y) | Create a message box, count in sec. command executes when 0 or with StartNow button]
EVENT.Message(countdown, "command", "message", "title", 0|1, x, y)
[19i EVENT.Ran(e) | Returns the number of command executions for the event, including the current one, if an execution is underway. Same as e.Ran]
EVENT.Ran(e)
[19i EVENT.RanThis | May be used only in the command assigned to an event when it is created. Returns the number of command executions for the event, including the current one.]
EVENT.RanThis
[19i EVENT.Remaining(e) | Returns the number of cmd executions remaining based on the maxtimes. Same as e.Remaining]
EVENT.Remaining(e)
[19i EVENT.RemainingThis | Returns the number of command executions remaining based on the maxtimes. Used only in the command assigned to an event when it is created.]
EVENT.RemainingThis
[19i EVENT.This | Returns the event handle. Used in the command assigned to an event when it is created.]
EVENT.This

[19j    Other Plugins |G ]
[19j COM.Config(ini_file_path) | specify a configuration ini file]
COM.Config(ini_file_path)
[19j COM.Create_Object("prog_id") | create a COM object]
COM.Create_Object("Word.Application|Excel.Application|Scripting.FileSystemObject|Python.Interpreter|Internet Explorer|WScript.Network")
[19j COM.Destroy(object_handle) | tell the COM plugin to let go of a previously issued object_handle]
COM.Destroy(object_handle)
[19j COM.End_With() | terminate COM.With]
COM.End_With()
[19j COM.Enumerator_Next(enumerator_handle) | return the next item in the collection from which the enumerator_handle was obtained]
COM.Enumerator_Next(enumerator_handle)
[19j COM.Enumerator_Reset(enumerator_handle) | reset the enumerator to the beginning of the collection it counts]
COM.Enumerator_Reset(enumerator_handle)
[19j COM.Error_Dialog_Off | turn PowerPro script error dialog off]
COM.Error_Dialog_Off
[19j COM.Error_Dialog_On | turn PowerPro script error dialog on ]
COM.Error_Dialog_On
[19j COM.Get_Accessible_Children(handle_to_accessible_object, name, role) | Returns either a, or all of, the children of an IAccessible object]
COM.Get_Accessible_Children(handle_to_accessible_object, name, role)
[19j COM.Get_Accessible_Object(hwnd, objectType) | will attempt to obtain an IAccessible interface]
COM.Get_Accessible_Object(hwnd, objectType)
[19j COM.Get_Enumerator(object_handle) | get an enumerator for a COM collection]
COM.Get_Enumerator(object_handle)
[19j COM.Get_Interface("source") | get an interface to a COM object, can retrieve a pointer to a COM object's interface, using the object's CLSID and IID]
COM.Get_Interface("CLSID|IID")
[19j COM.Get_Object("source") | return an object_handle, attaching to a running COM server if there is one]
COM.Get_Object("prog_id|file_name|window_handle")
[19j COM.Get_Object_Description(object_handle, option(s), function) | return a list of an object's functions and properties]
COM.Get_Object_Description(object_handle, option(s), function)
[19j COM.Get_Object_Description(object_handle, option(s), function) | return a list of an object's functions and properties]
COM.Get_Object_Description(IAccessible_handle, option(s),  childID)
[19j COM.Get_Property(object_handle, property, arg1, arg2) | get a property of a COM object]
COM.Get_Property(object_handle, property, arg1, arg2)
[19j COM.Get_Property_Typed(object_handle, property, type_spec, arg1, arg2) | get a property of a COM object]
COM.Get_Property_Typed(object_handle, property, type_spec, arg1, arg2)
[19j COM.LocalCopy(handle) | prevent automatic release of local handles]
COM.LocalCopy(handle)
[19j COM.Method(object_handle, method, arg1, arg2) | invoke a method on a COM object]
COM.Method(object_handle, method, arg1, arg2)
[19j COM.Method_Typed(object_handle, method, type_spec, arg1, arg2) | invoke a method on a COM object]
COM.Method_Typed(object_handle, method, type_spec, arg1, arg2)
[19j COM.Next(enumerator_handle) | return the next item in the collection from which the enumerator_handle was obtained]
COM.Next(enumerator_handle)
[19j COM.Release(object_handle) | tell the COM plugin to let go of a previously issued object_handle]
COM.Release(object_handle)
[19j COM.Release_All | release all handles to all COM objects]
COM.Release_All
[19j COM.Reset(enumerator_handle) | reset the enumerator to the beginning of the collection it counts]
COM.Reset(enumerator_handle)
[19j COM.Return_Unicode_Strings(flag)) | set whether handles to unicode strings are recognised]
COM.Return_Unicode_Strings(0|1)
[19j COM.Returns_Nothing | determine what if anything all other services return via the calling form]
COM.Returns_Nothing()
[19j COM.Returns_Status | determine what if anything all other services return via the calling form]
COM.Returns_Status()
[19j COM.Returns_Values | determine what if anything all other services return via the calling form]
COM.Returns_Values()
[19j COM.Set_Arg_Types(type_spec, persistent) | specify types of parameters of subsequent call(s) to method, Get_Property, Set_Property]
COM.Set_Arg_Types(type_spec, persistent)
COM.Set_Arg_Types("retry"|"noretry")
[19j COM.Set_Property(object_handle, property, arg1, arg2) | set a property of a COM object]
COM.Set_Property(object_handle, property, arg1, arg2)
[19j COM.Set_Property_Typed(object_handle, property, type_spec, arg1, arg2, new_value) | set a property of a COM object]
COM.Set_Property_Typed(object_handle, property, type_spec, arg1, arg2, new_value)
[19j COM.Set_Skipped_Arg_Marker(marker) | override the default "~~" whose meaning is "skip this parameter"]
COM.Set_Skipped_Arg_Marker(marker)
[19j COM.Unicode_Args_Allowed(flag)) | set whether handles to unicode strings are recognised]
COM.Unicode_Args_Allowed(0|1)
[19j COM.Unicode_Status() | Returns a string of two characters, first 0|1 indicates if unicode arguments are allowed, second 0|1 indicates if BSTRs are returned as handles to unicode strings]
COM.Unicode_Status()
[19j COM.Unload | releases all handles to com objects then remove com.dll]
COM.Unload
[19j COM.Version | return plugin version number as four digit number]
COM.Version
[19j COM.With(object_handle, sub_object_specifier) | set the context for subsequent calls to Method, Method_Typed, Get_Property, Get_Property_Typed, Set_Property, Set_Property_Typed services]
COM.With(object_handle, sub_object_specifier)

[20    SOUND & MEDIA |G ]
[20  Volume | Current master volume (0 - 255)]
Volume
[20  Muted | Set 1 if muted sound; set 0 otherwise.]
Muted
[20  CDCurTrack | Current CD track.]
CDCurTrack
[20  CDLastTrack | Last CD track.]
CDLastTrack
[20 Exec.CD("action") | CD playing actions]
Exec.CD("Play|Stop|PauseResume|Eject|Close|Next|Previous")
[20 Exec.Mute | Mute sounds, run again to reverse.]
Exec.Mute
[20 Exec.VolumeAll n | Set volume for all playback, n is 0 to 255. Use + or - in front of n to adjust relative to current setting.]
Exec.VolumeAll 0-255
[20 Exec.VolumeWav n | Set .wav volume; n is 0 to 15. Use + or - in front of number to adjust relative to current setting (not for Windows Vista).]
Exec.VolumeWav 0-15
[20 MCI("command cdaudio parameters") | MCI provides device-independent capabilities for controlling A/V peripherals. command and parameters are described in MS documentation of MCI]
MCI("command cdaudio parameters")
[20 AU3.CDTray("drive", "action") | ]
AU3.CDTray("drive", "action")
[20 GETSYSTEMPERFORMANCEDATA.Beep(frequency, duration) | Beep the internal speaker. frequency in Hz, duration in ms.]
GETSYSTEMPERFORMANCEDATA.Beep(frequency, duration)
[20 LINEINC.GetVolume | Returns current volume as a number from between 0 - 100.]
LINEINC.GetVolume
[20 LINEINC.MuteOff | Turn off Line In mute.]
LINEINC.MuteOff
[20 LINEINC.MuteOn | Mute Line In.]
LINEINC.MuteOn
[20 LINEINC.MuteStatus | Queries status of Line In mute. Returns 1 if muted, 0 if not muted.]
LINEINC.MuteStatus
[20 LINEINC.SetVolume(volume) | Set volume of Line In, should  be a number from between 0 - 100.]
LINEINC.SetVolume(0-100)
[20 MP3PLUGIN.GetAlbum | ]
MP3PLUGIN.GetAlbum
[20 MP3PLUGIN.GetArtist | ]
MP3PLUGIN.GetArtist
[20 MP3PLUGIN.GetComments | ]
MP3PLUGIN.GetComments
[20 MP3PLUGIN.GetTitle | ]
MP3PLUGIN.GetTitle
[20 MP3PLUGIN.GetTrack | ]
MP3PLUGIN.GetTrack
[20 MP3PLUGIN.SetAlbum | ]
MP3PLUGIN.SetAlbum
[20 MP3PLUGIN.SetArtist | ]
MP3PLUGIN.SetArtist
[20 MP3PLUGIN.SetComments | ]
MP3PLUGIN.SetComments
[20 MP3PLUGIN.SetTitle | ]
MP3PLUGIN.SetTitle
[20 MP3PLUGIN.SetTrack | ]
MP3PLUGIN.SetTrack
[20 WIN.Beep(freq, dur) | Uses internal speaker to produce tone at frequency freq for dur milliseconds.]
WIN.Beep(freq, dur)
[20 WIN.MessageBeep("type") | Produces defined system sound.]
WIN.MessageBeep("OK|Hand|Exclamation|Question")

[22    SYSTEM |G ]
[22  ACDC | A if running on ac power, D otherwise.]
ACDC
[22  BatteryPercent | Percent battery power left.]
BatteryPercent
[22  DefaultPrinter | Name of default printer]
DefaultPrinter
[22 IsUserAdmin | Returns 1 if PowerPro running as admin, 0 otherwise.]
IsUserAdmin
[22 PMem | Percent free memory]
PMem
[22 PerfCount | Returns the Windows performance counter, 64 bit integer.]
PerfCount
[22 PerfFreq | The frequency, in counts per second, that PerfCount is incremented, 64 bit integer.]
PerfFreq
[22 ProcessCount | Count of active processes.]
ProcessCount
[22 ThreadCount | Count of active threads.]
ThreadCount
[22 Uptime | Number of seconds Windows has been running.]
Uptime
[22 UserName | The name of the currently signed-on user]
UserName
[22 WindowsVersion | 4 blank-separated numbers: major version, minor version, build, platform id.]
WindowsVersion
[22 Exec.SetAutoMinMemory(interval, minmemory, maxmemory) | Control how PowerPro Set its memory. Default Exec.SetAutoMinMemory(1, -1, -1).]
Exec.SetAutoMinMemory(interval, minmemory, maxmemory)
[22 Exec.EmptyRecycleBin | Empty RecycleBin]
Exec.EmptyRecycleBin
[22 Shutdown.Dialog | Show the windows exit dialog.]
Shutdown.Dialog
[22 Shutdown.Hibernate | Hibernate the system.]
Shutdown.Hibernate
[22 Shutdown.LockWorkStation | Sign off user and lock workstation.]
Shutdown.LockWorkStation
[22 Shutdown.LogOff | Logoff from the system.]
Shutdown.LogOff
[22 Shutdown.Monitor On/Off/Stanby | Set monitor power.]
Shutdown.Monitor On|Off|Stanby
[22 Shutdown.Reboot | Reboot the system.]
Shutdown.Reboot
[22 Shutdown.Restart | Restart the system.]
Shutdown.Restart
[22 Shutdown.Standby | Standby the system.]
Shutdown.Standby
[22 Shutdown.Suspend | Suspend the system.]
Shutdown.Suspend
[22 Shutdown.Windows | Shutdown the system.]
Shutdown.Windows
[22 AU.Shutdown(action) | Perform various types of shutdown.action = 0(logoff) | 1(shutdown) | 2(reboot) | 4(force) | 8(Shutdown and power off) - use total of of the numbers]
AU.Shutdown(0|+1|+2|+4|+8)
[22 AU3.IsAdmin() | Check if the current user has administrator privileges]
AU3.IsAdmin()
[22 AU3.Shutdown(flags) | Shut down the system. flags = 0(Logoff) + 1(Shutdown) + 2(Reboot) + 4(Force) + 8(Power down)]
AU3.Shutdown(0+1+2+4+8)
[22 BIGMEM.BigMem("AvailPage") | Available page memory in megabytes.]
BIGMEM.BigMem("AvailPage")
[22 BIGMEM.BigMem("AvailPhys") | Available physical memory in megabytes.]
BIGMEM.BigMem("AvailPhys")
[22 BIGMEM.BigMem("AvailVirtual") | Available virtual memory in megabytes.]
BIGMEM.BigMem("AvailVirtual")
[22 BIGMEM.BigMem("Percent") | Available physical memory in percent.]
BIGMEM.BigMem("Percent")
[22 BIGMEM.BigMem("TotalPage") | Total page memory in megabytes.]
BIGMEM.BigMem("TotalPage")
[22 BIGMEM.BigMem("TotalPhys") | Total physical memory in megabytes.]
BIGMEM.BigMem("TotalPhys")
[22 BIGMEM.BigMem("TotalVirtual") | Total virtual memory in megabytes.]
BIGMEM.BigMem("TotalVirtual")
[22 GETSYSTEMPERFORMANCEDATA.Get_Cpu_Usage | Returns % CPU usage. Make two consecutive calls.]
GETSYSTEMPERFORMANCEDATA.Get_Cpu_Usage
[22 GETSYSTEMPERFORMANCEDATA.Get_Free_Page_File | Returns available space in page file in kilobytes.]
GETSYSTEMPERFORMANCEDATA.Get_Free_Page_File
[22 GETSYSTEMPERFORMANCEDATA.Get_Free_Physical_Memory | Returns available free RAM in kilobytes.]
GETSYSTEMPERFORMANCEDATA.Get_Free_Physical_Memory
[22 GETSYSTEMPERFORMANCEDATA.Get_Free_Virtual_Memory | Returns total amount of available virtual memory in kilobytes.]
GETSYSTEMPERFORMANCEDATA.Get_Free_Virtual_Memory
[22 GETSYSTEMPERFORMANCEDATA.Get_Total_Page_File | Returns total space in page file in kilobytes.]
GETSYSTEMPERFORMANCEDATA.Get_Total_Page_File
[22 GETSYSTEMPERFORMANCEDATA.Get_Total_Physical_Memory | Returns total RAM in kilobytes.]
GETSYSTEMPERFORMANCEDATA.Get_Total_Physical_Memory
[22 GETSYSTEMPERFORMANCEDATA.Get_Total_Virtual_Memory | Returns total virtual memory in kilobytes.]
GETSYSTEMPERFORMANCEDATA.Get_Total_Virtual_Memory
[22 MISCPLUGIN.Get_UserName("ipaddress", timeout) | Return the user's name of the local PC or of a PC given it's IP address. both optional]
MISCPLUGIN.Get_UserName("ipaddress", timeout)
[22 MISCPLUGIN.Set_TaskBar("action") | Enable/Disable the window's taskbar.]
MISCPLUGIN.Set_TaskBar("0|1")
[22 MBM.Get_Mbm_Info(temp_sensor_index, voltage_sensor_index, fan_sensor_index) | Read motherboard sensors. MBM5 should be installed in the system]
MBM.Get_Mbm_Info(temp_sensor_index, voltage_sensor_index, fan_sensor_index)
Debug &(MBM_Temp) &(MBM_Voltage) &(MBM_Fan)
[22 MBM.Unload | Unload the plugin .]
MBM.Unload
[22 PERF.AutoUpdate(interval_ms) | Auto refresh interval. (Default 1000 ms) You can also set AutoUpdate to 0 and use PERF.RefreshCounters and an event or timer to refresh the database of counters.]
PERF.AutoUpdate(0|250-5000)
[22 PERF.Browse(depth_count, mflag) | Display perf.counter list. Returns selection then displays depth_count successive values of the selected counter in a Debug window (if nsamp>0)]
PERF.Browse(depth_count, "|multi")
[22 PERF.CloseCounter("perfCounterName") | Close the counter and remove it from the database. Returns: 1(counter found and closed) | 0(otherwise). Use "*" to close all counters.]
PERF.CloseCounter("perfCounterName")
[22 PERF.DefaultDisplayValue("value") | Change default startup value. For several seconds after startup, services may return default value of -1.0]
PERF.DefaultDisplayValue("value")
[22 PERF.ExpandSF("perfCounterName") | If name is a shortform, returns the full counter path it represents]
PERF.ExpandSF("perfCounterName")
[22 PERF.ForcePeriod("value") | Set decimal point char: 0(local setting) | 1(period-default)]
PERF.ForcePeriod(0|1)
[22 PERF.Get("CPU", decimalCount, minChars) | Returns % processor time. If the result has fewer characters than minChars, it is blank padded on the front.(to ensure a consistent width for buttons labels) (PPro version <5.3.21)]
PERF.Get("CPU", decimalCount, minChars)
[22 PERF.Get("Mbytes", decimalCount, minChars) | Returns memory in use. If the result has fewer characters than minChars, it is blank padded on the front.(to ensure a consistent width for buttons labels) (PPro version <5.3.21)]
PERF.Get("Mbytes", decimalCount, minChars)
[22 PERF.Get("FileRead", decimalCount, minChars) | Returns file read bytes/sec. If the result has fewer characters than minChars, it is blank padded on the front.(to ensure a consistent width for buttons labels) (PPro version <5.3.21)]
PERF.Get("FileRead", decimalCount, minChars)
[22 PERF.Get("FileWrite", decimalCount, minChars) | Returns file write bytes/sec. If the result has fewer characters than minChars, it is blank padded on the front.(to ensure a consistent width for buttons labels) (PPro version <5.3.21)]
PERF.Get("FileWrite", decimalCount, minChars)
[22 PERF.Get("NetBytes", decimalCount, minChars) | Returns total bytes/sec over all network interfaces. If the result has fewer characters than minChars, it is blank padded on the front.(to ensure a consistent width for buttons labels) (PPro version <5.3.21)]
PERF.Get("NetBytes", decimalCount, minChars)
[22 PERF.Get("perfCounterName", decimalCount, minChars) | Return latest value for counter. If the result has fewer characters than minChars, it is blank padded on the front.(to ensure a consistent width for buttons labels) (PPro version <5.3.21)]
PERF.Get("perfCounterName", decimalCount, minChars)
[22 PERF.GetMax("perfCounterName", decimalCount, minChars) | Return maximum value for counter. If the result has fewer characters than minChars, it is blank padded on the front.(to ensure a consistent width for buttons labels) (PPro version <5.3.21)]
PERF.GetMax("perfCounterName", decimalCount, minChars)
[22 PERF.GetMean("perfCounterName", decimalCount, minChars) | Return mean value for counter. If the result has fewer characters than minChars, it is blank padded on the front.(to ensure a consistent width for buttons labels) (PPro version <5.3.21)]
PERF.GetMean("perfCounterName", decimalCount, minChars)
[22 PERF.GetMin("perfCounterName", decimalCount, minChars) | Return minimum value for counter. If the result has fewer characters than minChars, it is blank padded on the front.(to ensure a consistent width for buttons labels) (PPro version <5.3.21)]
PERF.GetMin("perfCounterName", decimalCount, minChars)
[22 PERF.GetLastMessage() | Returns last error message]
PERF.GetLastMessage()
[22 PERF.GetOnce("perfCounterName", decimalCount, minChars, wait_ms) | Attempts to return one value of counter. Two samples are taken and the second one used. PowerPro will be unresponsive in the wait time. (default 250 ms)]
PERF.GetOnce("perfCounterName", decimalCount, minChars, wait_ms)
[22 PERF.IsDefaultDisplayValue("value") | Returns: 1(string is the default display value text) | 0(otherwise)]
PERF.IsDefaultDisplayValue("value")
[22 PERF.NoValueYet | Returns the PowerPro floating point number used to signal that the counter has not stabilized, if you ask the returned value to be formatted as a PowerPro number (with "f" for fmt)]
PERF.NoValueYet
[22 PERF.NumCPU | Returns number of CPUs]
PERF.NumCPU
[22 PERF.ReadIni("filePath_INI") | Reads ini file at filepath, overwriting current options and shortforms. (default: perf.ini in current pcf folder) If a relative path, current pcf folder is used]
PERF.ReadIni("filePath_INI")
[22 PERF.RefreshCounters | Refresh all counters in database. You can use with counters being refreshed automatically. Or you can set g_AutoUpdate to 0 and use this service and an event or timer to refresh.]
PERF.RefreshCounters
[22 PERF.ResetStatistics("perfCounterName") | Sets the min, max, mean to current value of perfCounterName]
PERF.ResetStatistics("perfCounterName")
[22 PERF.Verbose(value) | value = 0(no messages-use the GetLastMessage service instead) | 1(show message for basic services-default) | 2(show messages for both basic and advanced services) | 3(show debug information as well as messages)]
PERF.Verbose(0|1|2|3)
[22 PERF.Weight("value") | Used for exponentially smoothed running means. The weight is set as value/100. Default: 0.07]
PERF.Weight(1-25)
[22 REG.Close | Close the plugins connection to the registry.]
REG.Close
[22 REG.Config("filePath_INI") | Specifies a configuration ini file.]
REG.Config("filePath_INI")
[22 REG.Create_Key("hivename", "keypath") | Create a new key.]
REG.Create_Key("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath")
[22 REG.Delete_Key("hivename", "keypath") | Delete a key.]
REG.Delete_Key(["[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath")
[22 REG.Delete_Value("hivename", "keypath", valuename) | Delete a value.]
REG.Delete_Value("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
[22 REG.Enum_Key("hivename", "keypath") | Enumerate all keys within a key. If successful, returns the next key name.]
REG.Enum_Key("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath")
[22 REG.Enum_Keys("hivename", "keypath") | Enumerate all keys within a key. If successful, returns the names of all subkeys]
REG.Enum_Keys("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath")
[22 REG.Enum_Value("hivename", "keypath") | ]
REG.Enum_Value("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath")
[22 REG.Enum_Values("hivename", "keypath") | ]
REG.Enum_Values("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath")
[22 REG.Error_Dialog_Off() | Turn off dialogs appearing when a registry service call goes wrong.]
REG.Error_Dialog_Off()
[22 REG.Error_Dialog_On() | Turn on error dialogs appearing when a registry service call goes wrong.]
REG.Error_Dialog_On()
[22 REG.Expand_String("string") | Expand a string containing environmental variables.]
REG.Expand_String("string")
[22 REG.Get_Binary("hivename", "keypath", "valuename") | Get a REG_BINARY value. BINARY.Version=h, returns handles.]
REG.Get_Binary("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
[22 REG.Get_Binary("varname", "hivename", "keypath", "valuename") | Get a REG_BINARY value. BINARY.Version=v, puts binary blocks into variable.]
REG.Get_Binary("varname", "[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
[22 REG.Get_Dword("hivename", "keypath", "valuename") | Get a REG_DWORD value in decimal.]
REG.Get_Dword(["[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
[22 REG.Get_Multi_String(vector, "hivename", "keypath", "valuename") | return a REG_MULTI_SZvalue]
REG.Get_Multi_String(vector, "[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
[22 REG.Get_Multi_String_Element(vector, "hivename", "keypath", "valuename") | return a single string from within a REG_MULTI_SZvalue]
REG.Get_Multi_String_Element(vector, "[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
[22 REG.Get_String("hivename", "keypath", "valuename") | Get a REG_SZ or REG_EXPAND_SZ value.]
REG.Get_String("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
[22 REG.Get_Value("hivename", "keypath", "valuename") | Get type of the value.]
REG.Get_Value("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
[22 REG.Help | Opens the help file associated with the plugin.]
REG.Help
[22 REG.Returns_Nothing() | Determine what Get_xxx, Enum_xxx, Get_Value and Expand_String services return.]
REG.Returns_Nothing()
[22 REG.Returns_Status() | Determine what Get_xxx, Enum_xxx, Get_Value and Expand_String services return.]
REG.Returns_Status()
[22 REG.Returns_Values() | Determine what Get_xxx, Enum_xxx, Get_Value and Expand_String services return.]
REG.Returns_Values()
[22 REG.Set_Binary("hivename", "keypath", "valuename", "value") | Set a REG_BINARY value.]
REG.Set_Binary("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename", "value")
[22 REG.Set_Delimiter("char") | Set the character uses in ?c...c string delimiting.]
REG.Set_Delimiter("char")
[22 REG.Set_DWord("hivename", "keypath", "valuename", "value") | Set a REG_DWORD value.]
REG.Set_DWord("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename", "value")
[22 REG.Set_Multi_String(vector, "hivename", "keypath", "valuename") | ]
REG.Set_Multi_String(vector, "[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
[22 REG.Set_String("hivename", "keypath", "valuename", "value") | Set a REG_SZ value.]
REG.Set_String("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename", "value")
[22 REG.Set_UnExp_Str("hivename", "keypath", "valuename", "value") | Set a REG_EXPAND_SZ value.]
REG.Set_UnExp_Str("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename", "value")
[22 REG.Unload | Unload the plugin .]
REG.Unload
[22 REG.Version | Returns the plugin version number as four digits.]
REG.Version
[22 WIN.GetPrinters() | Returns multi line string with one printer per line.]
WIN.GetPrinters()
[22 WIN.GetSysColor(systemindex) | Returns single number representing RGB color (red is lowest byte) for system index n (check GetSysColor MS documentation)]
WIN.GetSysColor(systemindex)
[22 WIN.GetSystemMetrics("string") | Calls windows function to access system metrics.]
WIN.GetSystemMetrics("string")
[22 WIN.IsDBCSLeadByte(str) | Returns 1 if first character of str is DBCS lead byte according to current code page.]
WIN.IsDBCSLeadByte("string")
[22 WIN.SetDefaultPrinter("printer") | Set default printer; returns 1 if successful, 0 otherwise.]
WIN.SetDefaultPrinter("printer")
[22 WIN.SetSysColor(systemindex, rgb) | Set system index n color to RGB (red is lowest byte) for system index n (check GetSysColor MS documentation)]
WIN.SetSysColor(systemindex, rgb)
[22 XUTILS.DisableIdleTimers() | Disable operating system system idle and display idle timers.]
XUTILS.DisableIdleTimers()
[22 XUTILS.DisableIdleTimers(1) | Disable screen saver.]
XUTILS.DisableIdleTimers(1)
[22 XUTILS.EjectCD("driveletter") | Eject CD drive. Without parameter ejects the first CD drive.]
XUTILS.EjectCD("driveletter")
[22 XUTILS.EnableIdleTimers() | Enable operating system system idle and display idle timers.]
XUTILS.EnableIdleTimers()
[22 XUTILS.EnableIdleTimers(1) | Enable screen saver.]
XUTILS.EnableIdleTimers(1)
[22 XUTILS.LoadCD("driveletter") | Close door of CD drive. Without parameter closes door of the first CD drive.]
XUTILS.LoadCD("driveletter")
[22 XUTILS.RunAs("filePath", "args", "username", "workFolderPath") | Start an application using given credentials. Asks for credentials.]
XUTILS.RunAs("filePath", "args", "username", "workFolderPath")
[22 XUTILS.SuDo("filePath", "args", "workFolderPath") | Start an application using administrator account. Asks for administrator's password.]
XUTILS.SuDo("filePath", "args", "workFolderPath")

[23    TIME |G ]
[23  Date | Returns todays date as 8 digit string yyyymmdd.]
Date
[23  DayofWeek | Returns day of week as single digit (Sunday is 0, Monday 1, ...)]
DayofWeek
[23  DayofYear | Returns day of year]
DayofYear
[23  LastIdleTime | Returns length of last idle period in which an alarm occurred.]
LastIdleTime
[23  LongDate | Returns todays date in control panel regional long date format.]
LongDate
[23  ShortDate | Returns todays date in control panel regional short date format.]
ShortDate
[23  Time | Returns time as 6 digit string hhmmss]
Time
[23  TimeSec | Returns number of seconds since midnight January 1, 1970]
TimeSec
[23  TimeZone | Returns name of current timezone.]
TimeZone
[23  UnixTime | Returns number of seconds since midnight January 1, 1970]
UnixTime
[23  Uptime | Returns number of seconds Windows has been running]
Uptime
[23  xTime | Returns time in control panel regional time format.]
xTime
[23 Configure.NewReminderMessage | Add a new scheduled alarm message.]
Configure.NewReminderMessage
[23 FormatDate("format", date) | Format a date. date=yyyymmdd or Date]
FormatDate("d,dd,ddd,dddd,M,MM,MMM,MMMM,YY,YYYY", date)
[23 FormatTime("format", time) | Format a time.]
FormatTime("hh,H,HH,m,mm,s,ss,t,tt", time)
[23 Timer("indexchar") | Returns the current value of timer.]
Timer("a|b|...|y|z")
[23 TimerRunning("indexchar") | Returns 1 if timer is running; 0 otherwise]
TimerRunning("a|b|...|y|z")
[23 Timer.Autosave("indexchar") | Change autosave interval of timers to the PCF file, default 300 s, 0 stops autosave.]
Timer.Autosave("a|b|...|y|z")
[23 Timer.Clear("indexchar") | Zero the timer.]
Timer.Clear("a|b|...|y|z")
[23 Timer.Set +/-/* @/$ "indexchar" h m s | Set and start or stop the timer. +(start) | -(stop) | *(toggle), @(add) | $(subtract)]
Timer.Set("[+|-|*][@|$] a|b|...|y|z h m s")
[23 Timer.Start("indexchar") | Start the indicated timers.]
Timer.Start("a|b|...|y|z")
[23 Timer.StartStop("indexchar") | Start the timer if stopped, stop if it is running.]
Timer.StartStop("a|b|...|y|z")
[23 Timer.Stop("indexchar") | Stop the indicated timers.]
Timer.Stop("a|b|...|y|z")
[23 Exec.Alarms("On|Off|Reverse") | Enable or disable schedular.]
Exec.Alarms("On|Off|Reverse")
[23 Exec.Calendar | Show a calendar. Use mouse or arrow keys to navigate.]
Exec.Calendar
[23 Exec.CalcCalendar | Date calculations. Shows two dates/calendars.]
Exec.CalcCalendar
[23 Exec.SchedulerAdd | Add a new scheduled event. Specify date, time and either a command or text.]
Exec.SchedulerAdd
[23 Clip.ShortDate | Put date on clipboard in short format.]
Clip.ShortDate
[23 Clip.LongDate | Put date on clipboard in long format.]
Clip.LongDate
[23 Clip.Time | Put time on clipboard.]
Clip.Time
[23 DATE.AddDays(yyyymmdd, daycount) | Adds daycount days to date yyyymmdd, returns resulting date. Date.AddDays(20021031, 2) results 20021102.]
DATE.AddDays(yyyymmdd, daycount)
[23 DATE.AddSeconds(yyyymmdd, seccount) | Adds a given number of seconds to a date]
DATE.AddSeconds(yyyymmdd, seccount)
[23 DATE.Get | Displays a calendar and returns selected date. Returns 0 if Cancel pressed.]
DATE.Get
[23 DATE.Now | Returns todays date and time as 14 digit string "yyyymmddhhmmss"]
DATE.Now
[23 DATE.Sub(date1, date2) | Returns the number of days between date1 and date2]
DATE.Sub(yyyymmdd, yyyymmdd)
[23 DATE.SubSeconds(date1, date2) | Subtracts two dates, given the number of seconds between them.]
DATE.SubSeconds(yyyymmdd, yyyymmdd)
[23 DATE.Today | Returns todays date, same as PowerPro keyword Date]
DATE.Today
[23 DATE.Unload | Unload the plugin]
DATE.Unload
[23 DATE.WeekDay(yyyymmdd) | Returns the day of the week for a the date; Sunday is day 0.]
DATE.WeekDay(yyyymmdd)
[23 DATE.WeekNum | Returns the week number in the year. (ISO standard)]
DATE.WeekNum
[23 DATE.YearDay(yyyymmdd) | Returns the day in the year for a date.]
DATE.YearDay(yyyymmdd)
[23 MISCPLUGIN.Date_Diff("dayweek", "date1", "date2") | Calculate days or weeks between two dates.]
MISCPLUGIN.Date_Diff("d|w", "yyyymmdd", "yyyymmdd")
[23 MISCPLUGIN.Date_Range("date", "+xD|+xW|+xM|+xY|-xD|-xW|-xM|-xY") | Add or subtract the range x from the given date. D(day) W(week) M(month) Y(year)]
MISCPLUGIN.Date_Range("yyyymmdd", "+xD|+xW|+xM|+xY|-xD|-xW|-xM|-xY")
[23 MISCPLUGIN.ElapsedTime("0") | Initialize for elapsed time count, in milliseconds.]
MISCPLUGIN.ElapsedTime("0")
[23 MISCPLUGIN.ElapsedTime("1") | Return elapsed time after init, in milliseconds.]
MISCPLUGIN.ElapsedTime("1")
[23 MISCPLUGIN.Get_SystemDate("parameter") | Get system date.]
MISCPLUGIN.Get_SystemDate("MDY|DAY|MONTH|GULL|PPRO")
[23 MISCPLUGIN.Set_SystemDate("date") | Modify the system date.]
MISCPLUGIN.Set_SystemDate("yyyymmdd")

[24    WAIT |G ]
[24 Wait.Active(timeout_sec, "caption") | Wait (up to n seconds) until any program with caption is active (foreground).]
Wait.Active(timeout_sec, "caption")
[24 Wait.Activity | Waits until mouse or keyboard activity. Starts detection after 3 sec.]
Wait.Activity
[24 Wait.Alt | Wait until alt key is pressed.]
Wait.Alt
[24 Wait.Ctrl | Wait until ctrl key is pressed.]
Wait.Ctrl
[24 Wait.Done | ]
Wait.Done
[24 Wait.Done("captionlist") | Waits until a window that matches the list is visible.]
Wait.Done("captionlist")
[24 Wait.For(timeout_ms) | Wait continues for timeout_ms milliseconds.]
Wait.For(timeout_ms)
[24 Wait.For(timeout_ms, "expression") | Wait continues for timeout_ms milliseconds or until the expression becomes true.]
Wait.For(timeout_ms, "expression")
[24 Wait.For("expression") | Wait continues until the expression becomes true.]
Wait.For("expression")
[24 Wait.ForInterval("expression") | Wait continues for the number of milliseconds given by expression.]
Wait.ForInterval("expression")
[24 Wait.Message(timeout_secs, "text") | Shows message with text, optionally waits timeout_secs seconds to close it automatically.]
Wait.Message(timeout_secs, "text")
[24 Wait.NoActive(timeout_sec, "caption") | Wait (up to timeout_sec seconds) until program with caption is not active.]
Wait.NoActive(timeout_sec, "caption")
[24 Wait.NoAlt | Wait until alt key is not pressed.]
Wait.NoAlt
[24 Wait.NoCtrl | Wait until ctrl key is not pressed.]
Wait.NoCtrl
[24 Wait.NoModem | Wait until there are no active Internet connections.]
Wait.NoModem
[24 Wait.NoSaver | Wait until screen saver is not running.]
Wait.NoSaver
[24 Wait.NoShift| Wait until shift key is not pressed.]
Wait.NoShift
[24 Wait.NoWindow(timeout_sec, "caption") | Wait until program with caption exits.]
Wait.NoWindow(timeout_sec, "caption")
[24 Wait.Path(timeout_sec, "pathtoprog") | Wait (up to timeout_sec seconds) until any program executed from pathtoprog is running.]
Wait.Path(timeout_sec, "pathtoprog")
[24 Wait.Quit | terminate all outstanding waits.]
Wait.Quit
[24 Wait.Ready | Waits until the last file launched by PowerPro is ready for input.]
Wait.Ready
[24 Wait.Ready("captionlist") | Waits 10 seconds or until window selected by captionlist is ready for input.]
Wait.Ready("captionlist")
[24 Wait.Saver | Wait until screen saver is running.]
Wait.Saver
[24 Wait.Shift | Wait until shift key is pressed.]
Wait.Shift
[24 Wait.Sleep(timeout_ms) | wait timeout_ms milliseconds. PowerPro will be unresponsive during the wait.]
Wait.Sleep(timeout_ms)
[24 Wait.Until ... | Cannot be used in nested scripts or with Do(). Monitored independently.]
Wait.Until
[24 Wait.Until(timeout_ms) | Wait continues for timeout_ms milliseconds.]
Wait.Until(timeout_ms)
[24 Wait.Until(timeout_ms, "expression") | Wait continues for timeout_ms milliseconds or until the expression becomes true.]
Wait.Until(timeout_ms, "expression")
[24 Wait.Until("expression") | Wait continues until the expression becomes true.]
Wait.Until("expression")
[24 Wait timeout_sec | wait timeout_sec seconds (must be less than or equal to 30). Equivalent to Wait.Until(n000).]
Wait timeout_sec
[24 Wait timeout_sec Modem | Waits (up to timeout_sec seconds) until there is an active Internet connection.]
Wait timeout_sec Modem
[24 Wait.Window(timeout_sec, "caption") | Wait (up to timeout_sec seconds) until any program with caption is running.]
Wait.Window(timeout_sec, "caption")
[24 AU.Sleep(timeout_ms) | Wait for an amount of time (ms).]
AU.Sleep(timeout_ms)
[24 AU.SetWinDelay(timeout_ms) | Change the amount of time that AutoIt pauses after performing a WinWait-type function. (Default 500ms)]
AU.SetWinDelay(timeout_ms)
[24 AU.WinWait("caption", "windowText", timeout_ms) | Wait until the specified window exists (or the function times out). timeout_ms = 0 waits indefinitely.]
AU.WinWait("caption", "windowText", timeout_ms)
[24 AU.WinWaitActive("caption", "windowText", timeout_ms) | Wait until the specified window is active (or the function times out). timeout_ms = 0 waits indefinitely.]
AU.WinWaitActive("caption", "windowText", timeout_ms)
[24 AU.WinWaitClose("caption", "windowText", timeout_ms) | Wait until the specified window doesn't exist (or the function times out). timeout_ms = 0 waits indefinitely.]
AU.WinWaitClose("caption", "windowText", timeout_ms)
[24 AU.WinWaitNotActive("caption", "windowText", timeout_ms) | Wait until the specified window is not active (or the function times out). timeout_ms = 0 waits indefinitely.]
AU.WinWaitNotActive("caption", "windowText", timeout_ms)
[24 AU3.RunWait("filepath", "workDir", showFlags) | Run a program and pause script execution until the program finishes. Returns PID of the process. workDir (and rest) optional. showFlags default is 1]
AU3.RunWait("filepath", "workDir", "SW_HIDE|SW_MINIMIZE|SW_MAXIMIZE")
[24 AU3.ProcessWait("processName", timeout_ms) | Pause script execution until a given process exists. processName is process name without the full path. Requires the file PSAPI.DLL. timeout_ms optional (default 0)]
AU3.ProcessWait("processName", timeout_ms)
[24 AU3.ProcessWaitClose("processName_or_PID", timeout_ms) | Pause script execution until a given process does not exist. processName is name without the full path or PID of the process. timeout_ms optional (default 0)]
AU3.ProcessWaitClose("processName_or_PID", timeout_ms)
[24 AU3.Sleep(timeout_ms) | Pause script.]
AU3.Sleep(timeout_ms)
[24 AU3.WinWait("caption", "windowText", timeout_sec) | Pause execution of the script until the requested window exists. Returns 0(timeout) | 1(otherwise). windowText (and rest) optional]
AU3.WinWait("caption", "windowText", timeout_sec)
[24 AU3.WinWaitActive("caption", "windowText", timeout_sec) | Pause until the requested window is active. Returns 0(timeout) | 1(otherwise). windowText (and rest) optional]
AU3.WinWaitActive("caption", "windowText", timeout_sec)
[24 AU3.WinWaitClose("caption", "windowText", timeout_ms) | Pause until the requested window does not exist. Returns 0(timeout) | 1(otherwise). windowText (and rest) optional]
AU3.WinWaitClose("caption", "windowText", timeout_ms)
[24 AU3.WinWaitNotActive("caption", "windowText", timeout_ms) | Pause until the requested window is not active. Returns 0(timeout) | 1(otherwise). windowText (and rest) optional]
AU3.WinWaitNotActive("caption", "windowText", timeout_ms)
[24 MISCPLUGIN.Wait_Window("caption", timeout_ms, untilactive, "childcontrollabel") | Equivalent to *Wait VisibleWindow with faster response. timeout_ms (and rest) optional. Case insensitive match for control labels (Wildcards allowed)]
MISCPLUGIN.Wait_Window("caption", timeout_ms, 0|1, "childcontrollabel")
[24 MISCPLUGIN.Sleep(timeout_ms) | Equivalent to *Wait Sleep but PowerPro is responsive throughout the wait.]
MISCPLUGIN.Sleep(timeout_ms)

[25    WINDOW |G ]
[25  LastTrayID | Tray icon ID of last tray icon button pressed.]
LastTrayID
[19h *Script Close "commandlist" | End all programs listed in command list.]
*Script Close "commandlist"
[*Script CloseForce "commandlist" | End all programs listed in command list, forces them closed, possibly losing data.]
*Script CloseForce "commandlist"
[25  Exec.AutoScroll | Start automatic scrolling.]
Exec.AutoScroll
[25  Exec.ScrollWindow | Scroll the window under the mouse.]
Exec.ScrollWindow
[25  Exec.ScrollWithMouse | Start manual scrolling.]
Exec.ScrollWithMouse
[25 AU3.WinMenuSelectItem("caption", "windowText", "menuName", "menuItem1", "menuItem2", "menuItem3", "menuItem4", "menuItem5", "menuItem6") | Select a menu item of a window. Use & for underlined chars: &File]
AU3.WinMenuSelectItem("caption", "windowText", "menuName", "menuItem1", "menuItem2", "menuItem3", "menuItem4", "menuItem5", "menuItem6")

[26    WINDOW - Dimensions |G ]
[26  Window("Left", param) | Returns left coordinate.]
Window("Left", "captionlist|Active|Under|Taskbar")
[26  Window("Top", param) | Returns top coordinate.]
Window("Top", "captionlist|Active|Under|Taskbar")
[26  Window("Bottom", param) | Returns bottom coordinate.]
Window("Bottom", "captionlist|Active|Under|Taskbar")
[26  Window("Right", param) | Returns right coordinate.]
Window("Right", "captionlist|Active|Under|Taskbar")
[26  Window("Height", param) | Returns height.]
Window("Height", "captionlist|Active|Under|Taskbar")
[26  Window("Width", param) | Returns width.]
Window("Width", "captionlist|Active|Under|Taskbar")
[26  Window.Position(x, y, w, h, "spec") | Set a window's position and size.]
Window.Position(x, y, w, h, "captionlist|Active|ActiveBar|All|AutoRun|Menu|Menu Hidden|Menu TrayMin|Menux|Under|Under Parent")
[26  Window.Size("spec") | Size specified window by moving mouse, click any mouse button to stop.]
Window.Size("captionlist|Active|ActiveBar|All|AutoRun|captionlist|Menu|Menu Hidden|Menu TrayMin|Menux|Under|Under Parent")
[26 AU3.WinGetClientSizeHeight("windowTitle", "windowText") | Returns the height of the window's client area, 0 for minimized windows, 1 if not found. windowText optional.]
AU3.WinGetClientSizeHeight("windowTitle", "windowText")
[26 AU3.WinGetClientSizeWidth("windowTitle", "windowText") | Returns the width of the window's client area, 0 for minimized windows, 1 if not found. windowText optional.]
AU3.WinGetClientSizeWidth("windowTitle", "windowText")
[26 AU3.WinGetPosX("windowTitle", "windowText") | Returns the X coordinate of the window, negative numbers for minimized windows, 1 if not found. Use "windowTitle"="Program Manager" for the size of the desktop. "windowText" optional.]
AU3.WinGetPosX("windowTitle", "windowText")
[26 AU3.WinGetPosY("windowTitle", "windowText") | Returns the Y coordinate of the window, negative numbers for minimized windows, 1 if not found. Use "windowTitle"="Program Manager" for the size of the desktop. "windowText" optional.]
AU3.WinGetPosY("windowTitle", "windowText")
[26 AU3.WinGetPosHeight("windowTitle", "windowText") | Returns the height of the window, negative numbers for minimized windows, 1 if not found. Use "windowTitle"="Program Manager" for the size of the desktop. "windowText" optional.]
AU3.WinGetPosHeight("windowTitle", "windowText")
[26 AU3.WinGetPosWidth("windowTitle", "windowText") | Returns the width of the window, negative numbers for minimized windows, 1 if not found. Use "windowTitle"="Program Manager" for the size of the desktop. "windowText" optional.]
AU3.WinGetPosWidth("windowTitle", "windowText")
[26 WIN.Bottom("captionlist"|handle) | Returns bottom window coordinate of first window matching captionlist.]
WIN.Bottom("captionlist"|handle)
[26 WIN.ClientHeight("captionlist"|handle) | Returns client height of first window matching captionlist.]
WIN.ClientHeight("captionlist"|handle)
[26 WIN.ClientToScreen(child_window_handle, x, y) | Translates client coordinates to screen coordinates by child window handle.]
WIN.ClientToScreen(child_window_handle, x, y)
[26 WIN.ClientWidth("captionlist"|handle) | Returns client width of first window matching captionlist.]
WIN.ClientWidth("captionlist"|handle)
[26 WIN.DisplayRectFromHandle(handle, workflag, default) | Gets display rectangle which includes most of window handle, returns 4 blank-separated integers.]
WIN.DisplayRectFromHandle(handle, workflag, default)
[26 WIN.DisplayRectFromName(monitorName, screen|workarea) | Returns screen rectangle as 4 blank-separated integers (left top right bottom). digits 0-9 are arbitrary and could be changed by Windows at reboot]
WIN.DisplayRectFromName("Main|Sec|0-9, 0|1)
[26 WIN.DisplayRectFromPoint(x, y, screen|workarea, default) | Returns screen rectangle as 4 blank-separated integers (left top right bottom). default = 0(returns "" if no overlapping screen) | 1(returns main screen if window h not on a screen) | 2(returns closest screen)]
WIN.DisplayRectFromPoint(x, y, 0|1, 0|1|2)
[26 WIN.GetClientRect("captionlist"|handle) | Returns the client rectangle of the first window matching captionlist.]
WIN.GetClientRect("captionlist"|handle)
[26 WIN.GetDisplayRect(monitorindex, onlyworkarea) | Returns screen rectangle as four blank separated integers: left, top, right, bottom. monitorindex of multiple displays is arbitrary and could be changed by Windows on each boot.]
WIN.GetDisplayRect(0-9, 0|1)
[26 WIN.GetRect("captionlist"|handle) | Returns the rectangle of the first window matching captionlist.]
WIN.GetRect("captionlist"|handle)
[26 WIN.GetWorkarea() | Returns screen work area (area outside visible Taskbar)]
WIN.GetWorkarea()
[26 WIN.Height("captionlist"|handle) | Returns height of first window matching captionlist.]
WIN.Height("captionlist"|handle)
[26 WIN.Left("captionlist"|handle) | Returns left window coordinate of first window matching captionlist.]
WIN.Left("captionlist"|handle)
[26 WIN.MakeRect(left, top, right, bottom) | Builds rect structure from four numbers.]
WIN.MakeRect(left, top, right, bottom)
[26 WIN.MapPoints(rect1, rect2, ptsIn) | ptsIn contains one or more point as blank separated numbers. These are mapped from coordinate system in rect1 to coordinate system in rect2. ("0 0 1000 1000", Win.GetWorkarea,"0 0 250 250") maps to upper left quarter of work area.]
WIN.MapPoints(rect1, rect2, ptsIn)
[26 WIN.Move("captionlist"|handle, "x y") | Set the window position of first window matching captionlist]
WIN.Move("captionlist"|handle, "x y")
[26 WIN.Move("captionlist"|handle, x, y) | Moves first window matching captionlist to position x, y.]
WIN.Move("captionlist"|handle, x, y)
[26 WIN.Right("captionlist"|handle) | Returns right window coordinate of first window matching captionlist.]
WIN.Right("captionlist"|handle)
[26 WIN.ScreenToClient(handle, x, y) | Translates screen coordinates to client coordinates by child window handle.]
WIN.ScreenToClient(handle, x, y)
[26 WIN.SetPos10000("captionlist", relativeto, left, top, right, bottom) | Set position of window matching captionlist. Position relative to full (s)creen/(w)ork area.]
WIN.SetPos10000("captionlist"|handle, "s|w", left, top, right, bottom)
[26 WIN.SetRect("captionlist"|handle, "left top right bottom") | Set the size and position of the first window matching captionlist.]
WIN.SetRect("captionlist"|handle, "left top right bottom")
[26 WIN.SetWorkArea() | Set screen work area to full size of physical screen.]
WIN.SetWorkArea()
[26 WIN.SetWorkArea("left top right bottom") | Set the work area according to the four blanks separated integers.]
WIN.SetWorkArea("left top right bottom")
[26 WIN.SetWorkArea(left, top, right, bottom) | Set the screen work area.]
WIN.SetWorkArea(left, top, right, bottom)
[26 WIN.Size("captionlist"|handle, "w h") | Set the window size of first window matching captionlist]
WIN.Size("captionlist"|handle, "w h")
[26 WIN.Size("captionlist"|handle, w, h) | Set the window size of first window matching captionlist]
WIN.Size("captionlist"|handle, w, h)
[26 WIN.Top("captionlist"|handle) | Returns top window coordinate of first window matching captionlist.]
WIN.Top("captionlist"|handle)
[26 WIN.Width("captionlist"|handle) | Returns width first window matching captionlist.]
WIN.Width("captionlist"|handle)

[27    WINDOW - Handles |G ]
[27 AU3.WinGetHandle("windowTitle", "windowText") | Returns a string containing the window handle value. For use with the advanced WinTitleMatchMode. windowText optional.]
AU3.WinGetHandle("windowTitle", "windowText")
[27 AU3.WinList("windowTitle", "windowText") | Returns a 2D array containing the window titles and handles. The number of entries is in element 0,0)]
AU3.WinList("windowTitle", "windowText")
AU3.WinList("[CLASS:Notepad]", "windowText")
AU3.WinList("[ALL]", "windowText")
[27 WIN.Active | Returns main window handle of active window.]
WIN.Active
[27 WIN.GetFocus() | Returns handle of window with focus; may be a child window.]
WIN.GetFocus()
[27 WIN.Handle("captionlist"|handle) | Returns window handle of first window matching "captionlist"|handle.]
WIN.Handle("captionlist"|handle)
[27 WIN.Handle("captionlist"|handle, "windowText") | Returns handle of child window of first top window matching "captionlist"|handle containing windowText.]
WIN.Handle("captionlist"|handle, "windowText")
[27 WIN.HandleFromID("captionlist"|handle, id) | Returns handle for child window with id and parent "captionlist"|handle.]
WIN.HandleFromID("captionlist"|handle, id)
[27 WIN.HandleFromIndex("captionlist"|handle, childindex) | Returns handle of child window of main window matching "captionlist"|handle where child window has index number childindex.]
WIN.HandleFromIndex("captionlist"|handle, childindex)
[27 WIN.HandleFromPoint(x, y) | Returns handle of window under screen position x,y; could be a child window.]
WIN.HandleFromPoint(x, y)
[27 WIN.HandleList("captionlist", hidden) | Returns blank separated list of window handles matching captionlist. inv = 1(hidden) | 2(hidden with blank captions)]
WIN.HandleList("captionlist", |1|2)
[27 WIN.MainHandleFromPoint(x, y) | Returns window handle of main (parent) window at under screen position x,y.]
WIN.MainHandleFromPoint(x, y)
[27 WIN.Menu("captionlist", param) | Show menu of all active windows matching captionlist and returns handle of selected one. param optional.]
WIN.Menu("captionlist", "Hidden|TrayMin|OnlyHidden")
[27 WIN.MainUnder | Returns window handle of main (parent) window under mouse.]
WIN.MainUnder
[27 WIN.Under | Returns window handle of window under mouse (may be child window).]
WIN.Under

[28    WINDOW - Information |G ]
[28  Caption | Caption (title) of current foreground window.]
Caption
[28  CaptionUnder | Caption of window under the mouse.]
CaptionUnder
[28  CurrentDir | Path to working folder of current foreground window.]
CurrentDir
[28  EXEFileName | File name (no path, no .exe) of EXE file for current foreground window.]
EXEFileName
[28  EXEFullPath | Full path to EXE name for current foreground window.]
EXEFullPath
[28  LastActiveHandle | Handle to last window selected by active button.]
LastActiveHandle
[28  LastAutoRunHandle | Handle to last window selected by autorun item.]
LastAutoRunHandle
[28  string.Anywindow | Returns 1 if string (must not be a window handle) matches any window, 0 otherwise.]
string.Anywindow
[28  string.ActiveWindow | Returns 1 if string (must not be a window handle) matches active window, 0 otherwise.]
string.ActiveWindow
[28  string.VisibleWindow | Returns 1 if string (must not be a window handle) matches any visible window, 0 otherwise.]
string.VisibleWindow
[28  ActiveWindow("captionlist") | Result is 1 if caption list matches the currently active window.]
ActiveWindow("captionlist")
[28  AnyWindow("captionlist") | Result is 1 if caption list matches any window, including hidden.]
AnyWindow("captionlist")
[28  Exec.WindowInfo | Shows/hides a small window showing mouse position and window size.]
Exec.WindowInfo
[28  ProcessID("=exename|fullpath") | ProcessID of program from full path or =exename without .exe]
ProcessID("=exename|fullpath")
[28  VisibleWindow("captionlist") | Result is 1 if caption list matches any visible window.]
VisibleWindow("captionlist")
[28  Window("AnyWindow", param) | Returns anywindow]
Window("AnyWindow", "captionlist|Active|Under|Taskbar")
[28  Window("Caption", param) | Returns caption text]
Window("Caption", "captionlist|Active|Under|Taskbar")
[28  Window("ExeName", param) | Returns exename]
Window("ExeName", "captionlist|Active|Under|Taskbar")
[28  Window("ExeFullPath", param) | Returns exefullpath]
Window("ExeFullPath", "captionlist|Active|Under|Taskbar")
[28  Window("Class", param) | Returns window class]
Window("Class", "captionlist|Active|Under|Taskbar")
[28  Window("Minimized", param) | Returns minimized state]
Window("Minimized", "captionlist|Active|Under|Taskbar")
[28  Window("Maximized", param) | Returns maximized state]
Window("Maximized", "captionlist|Active|Under|Taskbar")
[28  Window("Visible", param) | Returns visible state]
Window("Visible", "captionlist|Active|Under|Taskbar")
[28  Window("Topmost", param) | Returns topmost state]
Window("Topmost", "captionlist|Active|Under|Taskbar")
[28  Window("VisibleWindow", param) | Returns if window visible]
Window("VisibleWindow", "captionlist|Active|Under|Taskbar")
[28  Window("FirstWindow", param) | Returns firstwindow]
Window("FirstWindow", "captionlist|Active|Under|Taskbar")
[28 AU.DetectHiddenText(toogle) | Hidden text on windows can cause problems when trying to script them. This command tells AutoIt whether or not to detect hidden text. 0(disable) | 1(enable)]
AU.DetectHiddenText(0|1)
[28 AU.IfWinActive("windowTitle", "windowText") | Checks if a given window is currently active. Returns 1(active), 0(otherwise)]
AU.IfWinActive("windowTitle", "windowText")
[28 AU.IfWinExist("windowTitle", "windowText") | Checks if a given window exists (in any state). Returns 1(exists), 0(otherwise)]
AU.IfWinExist("windowTitle", "windowText")
[28 AU.WinGetActiveTitle | Return the title of the current active window]
AU.WinGetActiveTitle
[28 AU3.ProcessExists("processName_or_PID") | Check if specified process exists. processName_or_PID is name without the full path or PID of the process. Requires the file PSAPI.DLL]
AU3.ProcessExists("processName_or_PID")
[28 AU3.WinActive("windowTitle", "windowText") | Returns 1 if specified window exists and is currently active, 0 otherwise. windowText optional]
AU3.WinActive("windowTitle", "windowText")
[28 AU3.WinExists("windowTitle", "windowText") | Checks to see if a specified window exists. windowText optional]
AU3.WinExists("windowTitle", "windowText")
[28 AU3.WinGetCaretPosX() | Returns X coordinate of the caret in the foreground window. See CaretCoordMode for options.]
AU3.WinGetCaretPosX()
[28 AU3.WinGetCaretPosY() | Returns Y coordinate of the caret in the foreground window. See CaretCoordMode for options.]
AU3.WinGetCaretPosY()
[28 AU3.WinGetClassList("windowTitle", "windowText") | Returns linefeed separated classes of a window. windowText optional.]
AU3.WinGetClassList("windowTitle", "windowText")
[28 AU3.WinGetProcess("windowTitle", "windowText") | Returns the Process ID (PID) associated with a window.	windowText optional]
AU3.WinGetProcess("windowTitle", "windowText")
[28 AU3.WinGetState("windowTitle", "windowText") | Returns the state of a given window: 1(exists), 2(visible), 4(enabled), 8(active), 16(minimized), 32(maximized). use BitAND() to examine. windowText optional.]
AU3.WinGetState("windowTitle", "windowText")
[28 AU3.WinGetText("windowTitle", "windowText") | Returns the text from a window. Use WinGetText("") to get the active window's text. windowText optional.]
AU3.WinGetText("windowTitle", "windowText")
[28 AU3.WinGetTitle("windowTitle", "windowText") | Returns the full title from a window. Returns  0 if no title match. windowText optional.]
AU3.WinGetTitle("windowTitle", "windowText")
[28 AU3.WinList("windowTitle", "windowText") | Returns a 2D array containing the window titles and handles. The number of entries is in element 0,0)]
AU3.WinList("windowTitle", "windowText")
AU3.WinList("[CLASS:Notepad]", "windowText")
AU3.WinList("[ALL]", "windowText")
[28 PPGEORGY.Get_Input_Locale("kkkk:s, kkkk:s, ....)" | Returns the current keyboard layout of the active window.]
PPGEORGY.Get_Input_Locale("kkkk:s, kkkk:s, ....)
[28 WIN.Area(x, y) | Returns area name of window under x y coordinates (eg CLIENT, CAPTION, MAXBUTTON)]
WIN.Area(x, y)
;;=====================================
;; STRINGS RETURNED FROM WIN.Area(x, y)

;; BORDER      In the border of a window that does not have a sizing border.
;; BOTTOM      In the lower horizontal border of the window.
;; BOTTOMLEFT  In the lower-left corner of the window border.
;; BOTTOMRIGHT In the lower-right corner of the window border.
;; CAPTION     In a title-bar area.
;; CLIENT      In a client area.
;; GROWBOX     In a size box.
;; HSCROLL     In the horizontal scroll bar.
;; LEFT        In the left border of the window.
;; MAXBUTTON   In a Maximize button.
;; MENU        In a menu area.
;; MINBUTTON   In a Minimize button.
;; CLOSE       In a Close button.
;; NOWHERE     On the screen background or on a dividing line between windows.
;; REDUCE      In a Minimize button.
;; RIGHT       In the right border of the window.
;; SYSMENU     In a Control menu or in a Close button in a child window.
;; TOP         In the upper horizontal border of the window.
;; TOPLEFT     In the upper-left corner of the window border.
;; TOPRIGHT    In the upper-right corner of the window border.
;; TRANSPARENT In a window currently covered by another window.
;; VSCROLL     In the vertical scroll bar.
;;=====================================
[28 WIN.Caption("captionlist"|handle) | Returns window caption of first window matching captionlist.]
WIN.Caption("captionlist"|handle)
[28 WIN.CaptionListAss("captionlist"|handle) | Returns window caption list as of first window matching captionlist.]
WIN.CaptionListAss("captionlist"|handle)
[28 WIN.Class("captionlist"|handle) | returns window class of first window matching captionlist.]
WIN.Class("captionlist"|handle)
[28 WIN.Enabled("captionlist"|handle) | Returns 1 if first window matching captionlist is enabled, 0 otherwise.]
WIN.Enabled("captionlist"|handle)
[28 WIN.ExeName("captionlist"|handle) | Returns exe name (no file extension)of exe of first window matching captionlist.]
WIN.ExeName("captionlist"|handle)
[28 WIN.ExePath("captionlist"|handle) | Returns full path to exe of first window matching captionlist.]
WIN.ExePath("captionlist"|handle)
[28 WIN.Exists(handle) | Returns 1 if handle is a valid window handle (may be a child window); 0 otherwise.]
WIN.Exists(handle)
[28 WIN.FullScreen(1) | Returns 1 if any window of the same process as the foreground window.]
WIN.FullScreen(1)
[28 WIN.FullScreen() | Returns 1 if foreground window is full screen; 0 otherwise.]
WIN.FullScreen("captionlist"|handle)
[28 WIN.GetFocus() | Returns handle of window with focus; may be a child window.]
WIN.GetFocus()
[28 WIN.GetLanguage("captionlist"|handle) | Returns an integer representing current language being used by first window matching captionlist.]
WIN.GetLanguage("captionlist"|handle)
[28 WIN.GetProcessID(handle) | Returns the process id of the process for the window with handle.]
WIN.GetProcessID(handle)
[28 WIN.GetText(handle) | Issues WM_GETTEXT to window with handle; the receiving window may return its text.]
WIN.GetText(handle)
[28 WIN.GetWorkingDir("captionlist"|handle) | Gets working directory of window matching captionlist.]
WIN.GetWorkingDir("captionlist"|handle)
[28 WIN.HasCaption("captionlist"|handle) | Returns 1 if first window matching captionlist has a caption, 2 if toolbar caption, 0 otherwise.]
WIN.HasCaption("captionlist"|handle)
[28 WIN.Matches(handle, captionlist) | Returns true if main window with handle matches captionlist.]
WIN.Matches(handle, captionlist)
[28 WIN.Maxable("captionlist"|handle) | Returns 1 if first window matching captionlist has maximize box, 0 otherwise.]
WIN.Maxable("captionlist"|handle)
[28 WIN.Maxxed("captionlist"|handle) | Returns 1 if first window matching captionlist is maximized, 0 otherwise.]
WIN.Maxxed("captionlist"|handle)
[28 WIN.Minable("captionlist"|handle) | Returns 1 if first window matching captionlist has minimize box, 0 otherwise.]
WIN.Minable("captionlist"|handle)
[28 WIN.Minned("captionlist"|handle) | Returns 1 if first window matching captionlist is minimized, 0 otherwise.]
WIN.Minned("captionlist"|handle)
[28 WIN.Owner(handle) | Returns the owner of the window with handle]
WIN.Owner(handle)
[28 WIN.Parent(handle) | Returns the parent of the window with handle]
WIN.Parent(handle)
[28 WIN.Resizable("captionlist"|handle) | Returns 1 if first window matching captionlist is resizable, 0 otherwise.]
WIN.Resizable("captionlist"|handle)
[28 WIN.Rolled("captionlist"|handle) | Returns 1 if first window matching captionlist is rolled up, 0 otherwise.]
WIN.Rolled("captionlist"|handle)
[28 WIN.ToolWindow("captionlist"|handle) | Returns 1 if first window matching captionlist is toolwindow, 0 otherwise.]
WIN.ToolWindow("captionlist"|handle)
[28 WIN.TopMost("captionlist"|handle) | Returns 1 if first window matching captionlist is topmost, 0 otherwise.]
WIN.TopMost("captionlist"|handle)
[28 WIN.TrayMinned("captionlist"|handle) | Returns 1 if first window matching captionlist is tray minned, 0 otherwise.]
WIN.TrayMinned("captionlist"|handle)
[28 WIN.Visible("captionlist"|handle) | Returns 1 if first window matching captionlist exists, 0 if hidden exists, empty string otherwise.]
WIN.Visible("captionlist"|handle)
[28 WIN.VisibleOwner(handle) | Returns the owner of the window with handlehan if it is visible and not zero-sized.]
WIN.VisibleOwner(handle)

[29    WINDOW - Manipulation |G ]
[29  SendMessage | Predefined variable, set by the result of Window.SendMessage call]
SendMessage
[29  Exec.HideWindow | Show a dialog allowing you to pick a window to hide.]
Exec.HideWindow
[29  Exec.Tile("param") | Tiles active windows. r(rows) | c(columns), t(equal-sized rectangles)]
Exec.Tile("r|c|t")
[29  Exec.RestoreLastMin | Restore last minimized window.]
Exec.RestoreLastMin
[29  Window.AutoMin("spec") | Minimize window to tray if window matches AutoTrayMin on Window Control tab, ordinary minimize otherwise.]
Window.AutoMin("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.Back("spec") | Send window to bottom of stack of displayed windows.]
Window.Back("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.BackShow("spec") | Send window to back if it is foremost/activate if it is not.]
Window.BackShow("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.Center("spec") | Center specified window(s).]
Window.Center("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.Close("spec") | Close specified bar(s) or window(s).]
Window.Close("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.Close2("spec") | Close the window using a different technique than Close.]
Window.Close2("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.Close_("spec") | Close specified bar(s) or window(s) without error message.]
Window.Close_("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.CloseForce("spec") | Forces the window to close, you may lose unsaved information.]
Window.CloseForce("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.Hide("spec") | Make specified window(s) invisible.]
Window.Hide("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.HideShow("spec") | Toggle visible state]
Window.HideShow("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.Max("spec") | Maximize specified window(s).]
Window.Max("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.MaxNormal("spec") | Maximize normal window/make maximized window normal.]
Window.MaxNormal("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.Min("spec") | Minimize specified window(s).]
Window.Min("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.MinMemory("spec") | Optimize memory working set (NT only)]
Window.MinMemory("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.MinRestore("spec") | Restore minimized window/minimize otherwise.]
Window.Normal("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.Move("spec") | Move specified window by moving mouse, click any mouse button to stop.]
Window.Move("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.Normal("spec") | Show specified window(s) in normal state.]
Window.Normal("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.NotTop("spec") | Remove OnTop status of specified window(s).]
Window.NotTop("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.OnTop("spec") | Make specified window(s) OnTop.]
Window.OnTop("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.PostMessage(m, w, l, "spec") | Does PostMessage(h, m, w, l) where h is selected window]
Window.PostMessage(m, w, l, "captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.Rollup("spec") | Roll up the window to caption/show if it is already rolled-up.]
Window.Rollup("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.SendMessage(m, w, l, "spec") | Does SendMessage(h, m, w, l) where h is selected window, variable SendMessage is set to result of the SendMessage call]
Window.SendMessage(m, w, l, "captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.SetPriority("priority", "spec") | Set process priority of selected window.]
Window.SetPriority("Idle|Below|Normal|Above|High", "captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.Show("spec") | Activate the window and show it if hidden.]
Window.Show("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.TopNotTop("spec") | Reverse OnTop status of specified window(s).]
Window.TopNotTop("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.Trans(level, "spec") | Make window transparent (W2K, XP only)]
Window.Trans(level, "captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.TransMouse(level, "spec") | make window transparent, put on top and make all mouse clicks pass through (W2K, XP only)]
Window.TransMouse(level, "captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29  Window.TrayMin("spec") | Minimize specified window(s) to tray.]
Window.TrayMin("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[29 AU.SetTitleMatchMode(matchType) | Alter the way that AutoIt matches window titles in functions. matchType = 1(partial match from the beginning-default) | 2(partial match in any part)]
AU.SetTitleMatchMode(1|2)
[29 AU.WinActivate("windowTitle", "windowText") | activate a specified window.]
AU.WinActivate("windowTitle", "windowText")
[29 AU.WinClose("windowTitle", "windowText") | Close a specified window]
AU.WinClose("windowTitle", "windowText")
[29 AU.WinHide("windowTitle", "windowText") | Hide a specified window]
AU.WinHide("windowTitle", "windowText")
[29 AU.WinKill("windowTitle", "windowText") | Forceably close a specified window]
AU.WinKill("windowTitle", "windowText")
[29 AU.WinMaximize("windowTitle", "windowText") | Maximize a specified window]
AU.WinMaximize("windowTitle", "windowText")
[29 AU.WinMinimize("windowTitle", "windowText") | Minimize a specified window]
AU.WinMinimize("windowTitle", "windowText")
[29 AU.WinMinimizeAll | Minimize all windows]
AU.WinMinimizeAll
[29 AU.WinMinimizeAllUndo | Undo a previous AUTOIT_WinMinimizeAll call]
AU.WinMinimizeAllUndo
[29 AU.WinMove("windowTitle", "windowText", x, y, width, height) | Move/resize a specified window. Use -1 to keep same width/height.]
AU.WinMove("windowTitle", "windowText", x, y, width, height)
[29 AU.WinRestore("windowTitle", "windowText") | Restore a window from a minimized state]
AU.WinRestore("windowTitle", "windowText")
[29 AU.WinSetTitle("windowTitle", "windowText", "title") | Change the title of a specified window.]
AU.WinSetTitle("windowTitle", "windowText", "title")
[29 AU.WinShow("windowTitle", "windowText") | Show a specified window previously hidden]
AU.WinShow("windowTitle", "windowText")
[29 AU3.ProcessClose("processName_or_PID") | Terminates a named process. processName is process name with extension, without the path or PID. Requires the file PSAPI.DLL]
AU3.ProcessClose("processName_or_PID")
[29 AU3.ProcessExists("processName_or_PID") | Check if specified process exists. processName_or_PID is name without the full path or PID of the process. Requires the file PSAPI.DLL]
AU3.ProcessExists("processName_or_PID")
[29 AU3.ProcessSetPriority("processName", priority) | Changes the priority of a process. priority = 0(Idle/Low) | 1(Below Normal) | 2(Normal) | 3(Above Normal) | 4(High) | 5(Realtime)]
AU3.ProcessSetPriority("processName", 0|1|2|3|4|5)
[29 AU3.ProcessWait("processName", timeout_ms) | Pause script execution until a given process exists. processName is process name without the full path. Requires the file PSAPI.DLL. timeout_ms optional (default 0)]
AU3.ProcessWait("processName", timeout_ms)
[29 AU3.ProcessWaitClose("processName_or_PID", timeout_ms) | Pause script execution until a given process does not exist. processName is name without the full path or PID of the process. timeout_ms optional (default 0)]
AU3.ProcessWaitClose("processName_or_PID", timeout_ms)
[29 AU3.Run("filePath", "workFolder", showFlag) | Run a program. workFolder (default null) and showFlag (default 1) optional]
AU3.Run("filePath", "workFolder", showFlag)
[29 AU3.RunAs("user", "domain", "password", logon_flag, "filePath", "workFolder", showFlag) | Run a program. logon_flag = 0(do not load user profile) | 1(load user profile-default) | 2(use for net credentials only). workFolder (default null) and showFlag (default 1) optional]
AU3.RunAs("user", "domain", "password", 0|1|2, "filePath", "workFolder", showFlag)
[29 AU3.RunAsWait("user", "domain", "password", logon_flag, "filePath", "workFolder", showFlag) | Run a program and pause script until the program finishes. logon_flag = 0(do not load user profile) | 1(load user profile-default) | 2(use for net credentials only). workFolder (default null) and showFlag (default 1) optional]
AU3.RunAsWait("user", "domain", "password", 0|1|2, "filePath", "workFolder", showFlag)
[29 AU3.RunAsSet("user", "domain", "password", "options") | ]
AU3.RunAsSet("user", "domain", "password", "options")
[29 AU3.RunWait("filepath", "workDir", showFlags) | Run a program and pause script until the program finishes. Returns PID of the process. workDir (and rest) optional. showFlags default is 1]
AU3.RunWait("filepath", "workDir", "SW_HIDE|SW_MINIMIZE|SW_MAXIMIZE")
[29 AU3.WinActivate("windowTitle", "windowText") | Activate (give focus to) a window. windowText optional]
AU3.WinActivate("windowTitle", "windowText")
[29 AU3.WinClose("windowTitle", "windowText") | Closes a window. windowText optional]
AU3.WinClose("windowTitle", "windowText")
[29 AU3.WinKill("windowTitle", "windowText") | Force close a window.]
AU3.WinKill("windowTitle", "windowText")
[29 AU3.WinMenuSelectItem("windowTitle", "windowText", "menuName", "menuItem1", "menuItem2", "menuItem3", "menuItem4", "menuItem5", "menuItem6") | Select a menu item of a window. Use & for underlined chars: &File]
AU3.WinMenuSelectItem("windowTitle", "windowText", "menuName", "menuItem1", "menuItem2", "menuItem3", "menuItem4", "menuItem5", "menuItem6")
[29 AU3.WinMinimizeAll() | Minimize all windows]
AU3.WinMinimizeAll()
[29 AU3.WinMinimizeAllUndo() | Undo a previous WinMinimizeAll function]
AU3.WinMinimizeAllUndo()
[29 AU3.WinMove("windowTitle", "windowText", intX, intY, intWidth, intHeight) | Move/resize a window. has no effect on minimized windows, but works on hidden windows. If multiple windows match the criteria, the most recently active window is used. intWidth optional (default -1), intHeight optional (default -1)]
AU3.WinMove("windowTitle", "windowText", intX, intY, intWidth, intHeight)
[29 AU3.WinSetOnTop("windowTitle", "windowText", onTop) | Change a window's 'Always On Top' attribute. onTop = 0(normal) | 1(ontop)]
AU3.WinSetOnTop("windowTitle", "windowText", 0|1)
[29 AU3.WinSetState("windowTitle", "windowText", "state") | Change the state of a window. If multiple windows match the criteria, the most recently active window is used.]
AU3.WinSetState("windowTitle", "windowText", "SW_HIDE|SW_SHOW|SW_MINIMIZE|SW_MAXIMIZE|SW_RESTORE")
[29 AU3.WinSetTitle("windowTitle", "windowText", "title") | Change the title of a window. If multiple windows match the criteria, the title of most recently active window is changed.]
AU3.WinSetTitle("windowTitle", "windowText", "title")
[29 AU3.WinSetTrans("windowTitle", "windowText", level) | Set transparency of a window]
AU3.WinSetTrans("windowTitle", "windowText", 0-255)
[29 MISCPLUGIN.MinAll("action") | Invoke the shell's minimize all function.]
MISCPLUGIN.MinAll(["0|1"])
[29 MISCPLUGIN.Set_ActWnd("caption") | Bringsan existing window to foreground. Same as Window.Show("caption")]
MISCPLUGIN.Set_ActWnd("caption")
[29 WIN.Back("captionlist"|handle) | Sends window to back (bottom) of visible windows.]
WIN.Back("captionlist"|handle)
[29 WIN.Close("captionlist"|handle) | Closes first window matching "captionlist"|handle.]
WIN.Close("captionlist"|handle)
[29 WIN.CloseForce("captionlist"|handle) | Kills first window matching "captionlist"|handle, unsaved information is lost.]
WIN.CloseForce("captionlist"|handle)
[29 WIN.DropFile("captionlist"|handle, "filepath") | Simulates drag and drop of file onto first window matching "captionlist"|handle. Does not work for all programs.]
WIN.DropFile("captionlist"|handle, "filepath")
[29 WIN.Enable("captionlist"|handle, enabled) | Enables window matching "captionlist"|handle if flag is anystring not starting with 0; disables otherwise.]
WIN.Enable("captionlist"|handle, 0|1)
[29 WIN.Flash("captionlist"|handle) | Flashes Taskbar button for first window matching "captionlist"|handle until it is foreground]
WIN.Flash("captionlist"|handle)
[29 WIN.Flash("captionlist"|handle, flashCount) | Flashes Taskbar button for first window matching "captionlist"|handle up to flashCount times]
WIN.Flash("captionlist"|handle, flashCount)
[29 WIN.Hide("captionlist"|handle) | Hides first visible window matching "captionlist"|handle.]
WIN.Hide("captionlist"|handle)
[29 WIN.Maximize("captionlist"|handle) | Maximizes first visible window matching "captionlist"|handle.]
WIN.Maximize("captionlist"|handle)
[29 WIN.Minimize("captionlist"|handle) | Minimizes first visible window matching "captionlist"|handle.]
WIN.Minimize("captionlist"|handle)
[29 WIN.OnTop("captionlist"|handle) | Toogle topmost state.]
WIN.OnTop("captionlist"|handle)
[29 WIN.OnTop("captionlist"|handle, topmost) | Set window topmost state. flag = 0(normal) | 1(topmost)]
WIN.OnTop("captionlist"|handle, 0|1)
[29 WIN.PostMessage("captionlist"|handle, "msg", wp, lp) | Posts message msg to first window matching "captionlist"|handle.]
WIN.PostMessage("captionlist"|handle, "msg", wp, lp)
[29 WIN.RectToFile("left top right bottom", "filepath", resizeWidth, resizeHeight) | Capture screen to BMP filepath. Resize optional.]
WIN.RectToFile("left top right bottom", "filepath", resizeWidth, resizeHeight)
[29 WIN.ResetFocus(maxwait_ms) | If PowerPro bar or Taskbar icon is foreground, makes previous window foreground.]
WIN.ResetFocus(maxwait_ms)
[29 WIN.Restore("captionlist"|handle) | Restore first visible window matching "captionlist"|handle.]
WIN.Restore("captionlist"|handle)
[29 WIN.RollUp("captionlist"|handle) | Rolls up window matching "captionlist"|handle; unrolls if already is rolled up.]
WIN.RollUp("captionlist"|handle)
[29 WIN.SendCopyData("captionlist"|handle, "dword", "string") | Sends wm_copydata to first window matching "captionlist"|handle, with dwdata=dword and lpdata=string.]
WIN.SendCopyData("captionlist"|handle, "dword", "string")
[29 WIN.SendMessage("captionlist"|handle, "msg", wp, lp) | Sends message msg to first window matching "captionlist"|handle; both wp and lp are sent as DWORDs.]
WIN.SendMessage("captionlist"|handle, "msg", wp, lp)
[29 WIN.SendMessageStr("captionlist"|handle, "msg", wp, str) | Sends message msg to first window matching "captionlist"|handle; lp is sent as pointer to str.]
WIN.SendMessageStr("captionlist"|handle, "msg", wp, str)
[29 WIN.SendMessageStrRemote("captionlist"|handle, "msg", wp, str) | Sends message msg to first window matching "captionlist"|handle; lp is sent as pointer to str which is used for output.]
WIN.SendMessageStrRemote("captionlist"|handle, "msg", wp, str)
[29 WIN.SetFocus(handle) | Set focus and foreground to window with handle, may be a child window.]
WIN.SetFocus(handle)
[29 WIN.SetText("captionlist"|handle, "newtext") | Issues WM_SETTEXT which may set the text of the window matching "captionlist"|handle to newtext.]
WIN.SetText("captionlist"|handle, "newtext")
[29 WIN.SetTool("captionlist"|handle, flag) | Changes toolwindow style of first window. Toolbar style windows (narrow caption) are not shown on the taskbar. flag = 0(clear) | 1(set), -1(toggle)]
WIN.SetTool("captionlist"|handle, -1|0|1)
[29 WIN.Show("captionlist"|handle, flag) | Show first window matching "captionlist"|handle. flag = omitted(Use PowerPro internal window activation process) | 1(restore if icon and show) | 2(ignore icon state, just show) | 3(set foreground only)]
WIN.Show("captionlist"|handle, |1|2|3)
[29 WIN.ShowNA("captionlist"|handle) | Shows the window matching "captionlist"|handle but does not activate it.]
WIN.ShowNA("captionlist"|handle)
[29 WIN.TerminateProcess(processID) | Kills process with PID.]
WIN.TerminateProcess(processID)
[29 WIN.ToFile("captionlist"|handle, "filepath", resizeWidth, resizeHeight, client_part_only) | Capture window to BMP filepath. Resize to width and height (optional). client_part_only = 1(capture only client portion)]
WIN.ToFile("captionlist"|handle, "filepath", resizeWidth, resizeHeight, 0|1)
[29 WIN.Trans("captionlist"|handle, level) | Makes window matching "captionlist"|handle transparent level (0-295)]
WIN.Trans("captionlist"|handle, 0-295)
[29 WIN.Trans("captionlist"|handle, -level) | Toggle transparency state of window matching "captionlist"|handle]
WIN.Trans("captionlist"|handle, -0-295)
[29 WIN.TransMouse("captionlist"|handle, level) | Makes window matching "captionlist"|handle transparent (0-295). Mouse clicks go through window]
WIN.TransMouse("captionlist"|handle, 0-295)
[29 WIN.TransMouse("captionlist"|handle, -level) | Toggle transparency state of window matching "captionlist"|handle. Mouse clicks go through window]
WIN.TransMouse("captionlist"|handle, -0-295)
[29 WIN.TrayMin("captionlist"|handle) | Tray minimizes first window matching "captionlist"|handle; restores if already in tray.]
WIN.TrayMin("captionlist"|handle)

[30    WINDOW - Childs |G]
[30 AU3.WinGetClassList("windowTitle", "windowText") | Returns linefeed separated classes of a window. windowText optional.]
AU3.WinGetClassList("windowTitle", "windowText")
[30 WIN.ClientToScreen(child_window_handle, x, y) | Translates client coordinates to screen coordinates by child window handle.]
WIN.ClientToScreen(child_window_handle, x, y)
[30 WIN.ChildHandleList("captionlist"|handle, "text") | Returns blank separated list of child window handles. text = omitted(all) | c=classname(only those child windows of class classname) | windowtext(only windows with window text matching windowtext)]
WIN.ChildHandleList("captionlist"|handle, |"c=classname"|"windowtext")
[30 WIN.ChildTextByID("captionlist"|handle, id) | Returns the text child window with id of first window matching "captionlist"|handle.]
WIN.ChildTextByID("captionlist"|handle, id)
[30 WIN.ChildTextByIndex("captionlist"|handle, childindex) | Returns the text in the index th childwindow of first window matching "captionlist"|handle.]
WIN.ChildTextByIndex("captionlist"|handle, childindex)
[30 WIN.Handle("captionlist"|handle, "windowText") | Returns handle of child window of first top window matching "captionlist"|handle containing windowText.]
WIN.Handle("captionlist"|handle, "windowText")
[30 WIN.HandleFromID("captionlist"|handle, id) | Returns handle for child window with id and parent "captionlist"|handle.]
WIN.HandleFromID("captionlist"|handle, id)
[30 WIN.HandleFromIndex("captionlist"|handle, childindex) | Returns handle of child window of main window matching "captionlist"|handle where child window has index number childindex.]
WIN.HandleFromIndex("captionlist"|handle, childindex)
[30 WIN.IDFromHandle(handle) | Returns window id for child window with handle]
WIN.IDFromHandle(handle)
[30 WIN.IndexFromHandle(handle) | Returns index of child window with handle]
WIN.IndexFromHandle(handle)
[30 WIN.Parent(handle) | Returns the parent of the window with handle]
WIN.Parent(handle)
[30 WIN.Parent(handle, 1) | Returns the top level parent of the window with handle]
WIN.Parent(handle, 1)
[30 WIN.ScreenToClient(handle, x, y) | Translates screen coordinates to client coordinates by child window handle.]
WIN.ScreenToClient(handle, x, y)
[30 GETCWTXT.Get_Text | Retrieve the text of specified child windows. Max.314 chars.]
cw_index  = childIndex
cw_parent = "windowTitle"
*Exec Plugin GETCWTXT Get_Text
result    = cw_text
[30 MISCPLUGIN.Get_WindowText("caption", childnumber, "parameter") | Retrieves the text of specified child window. parameter optional]
MISCPLUGIN.Get_WindowText("caption", childnumber, "toclip|win=vis|win=hid|win=all|pump=1|Sep=x")
[30 MISCPLUGIN.GetChHandle("caption", childindex) | Get child handle by index number.]
MISCPLUGIN.GetChHandle("caption", childindex)
[30 MISCPLUGIN.GetFocus("index|handle|class|text") | Returns the child control of the foreground window that has the focus.]
MISCPLUGIN.GetFocus(["1|2|3|4"])
[30 MISCPLUGIN.GetIndNum("handle") | Returns index number of a given child handle.]
MISCPLUGIN.GetIndNum("handle")
[30 MISCPLUGIN.Is_ChEnable("caption", "parameter") | Determine if a child control of a window is enabled/disabled. parameter optional]
MISCPLUGIN.Is_ChEnable("caption", "I=index|H=handle|L=label")
[30 MISCPLUGIN.Is_TextInWin("caption", "text", "status") | Loop through all controls in the window and find the control that contains text. status optional]
MISCPLUGIN.Is_TextInWin("caption", "text", "win=vis|win=hid|win=all")
[30 MISCPLUGIN.SetFocus("caption", index|"handle") | Set the focus to a specific child conrol.]
MISCPLUGIN.SetFocus("caption", index|"hwnd=xxxxx")

[31    WINDOW - Controls |G]
[AU3.ControlClick("windowtitle", "windowtext", controlID, "button", clickCount, x, y) | Send a mouse click command to a given control. Returns: 0(failure) | 1(success). button (and rest) optional. button default Left. clickCount default 1. x, y position to click within the control default center.)
AU3.ControlClick("windowtitle", "windowtext", controlID, "|Left|Middle|Right", clickCount, x, y)
[AU3.ControlCommand("windowTitle", "windowText", controlID, "IsVisible", "") | Returns 1 if Control is visible, 0 otherwise]
AU3.ControlCommand("windowTitle", "windowText", controlID, "IsVisible", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "IsEnabled", "") | Returns 1 if Control is enabled, 0 otherwise]
AU3.ControlCommand("windowTitle", "windowText", controlID, "IsEnabled", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "ShowDropDown", "") | Drop a ComboBox]
AU3.ControlCommand("windowTitle", "windowText", controlID, "ShowDropDown", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "HideDropDown", "") | UNdrop a ComboBox]
AU3.ControlCommand("windowTitle", "windowText", controlID, "HideDropDown", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "AddString", "string") | Add a string to the end in a ListBox or ComboBox]
AU3.ControlCommand("windowTitle", "windowText", controlID, "AddString", "string")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "DelString", occurrence) | Delete a string according to occurrence (returned by AU3.FindString) in a ListBox or ComboBox]
AU3.ControlCommand("windowTitle", "windowText", controlID, "DelString", occurrence)
[AU3.ControlCommand("windowTitle", "windowText", controlID, "FindString", "string") | Returns occurrence ref of the exact string in a ListBox or ComboBox]
AU3.ControlCommand("windowTitle", "windowText", controlID, "FindString", "string")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "SetCurrentSelection", occurrence) | Set selection to occurrence (returned by AU3.FindString) ref in a ListBox or ComboBox]
AU3.ControlCommand("windowTitle", "windowText", controlID, "SetCurrentSelection", occurrence)
[AU3.ControlCommand("windowTitle", "windowText", controlID, "SelectString", "string") | Set selection according to string in a ListBox or ComboBox]
AU3.ControlCommand("windowTitle", "windowText", controlID, "SelectString", "string")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "IsChecked", "") | Returns 1 if Button is checked, 0 otherwise]
AU3.ControlCommand("windowTitle", "windowText", controlID, "IsChecked", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "Check", "") | Check radio or check Button]
AU3.ControlCommand("windowTitle", "windowText", controlID, "Check", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "UnCheck", "") | Uncheck radio or check Button]
AU3.ControlCommand("windowTitle", "windowText", controlID, "UnCheck", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "GetCurrentLine", "") | Returns the line # where the caret is in an Edit]
AU3.ControlCommand("windowTitle", "windowText", controlID, "GetCurrentLine", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "GetCurrentCol", "") | Returns the column # where the caret is in an Edit]
AU3.ControlCommand("windowTitle", "windowText", controlID, "GetCurrentCol", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "GetCurrentSelection", "") | Returns name of the currently selected item in a ListBox or ComboBox]
AU3.ControlCommand("windowTitle", "windowText", controlID, "GetCurrentSelection", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "GetLineCount", "") | Returns # of lines in an Edit]
AU3.ControlCommand("windowTitle", "windowText", controlID, "GetLineCount", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "GetLine", lineIndex) | Returns text at line lineIndex passed of an Edit]
AU3.ControlCommand("windowTitle", "windowText", controlID, "GetLine", lineIndex)
[AU3.ControlCommand("windowTitle", "windowText", controlID, "GetSelected", "") | Returns selected text of an Edit]
AU3.ControlCommand("windowTitle", "windowText", controlID, "GetSelected", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "EditPaste", "string") | Paste the 'string' at the Edit's caret position]
AU3.ControlCommand("windowTitle", "windowText", controlID, "EditPaste", "string")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "CurrentTab", "") | Returns the current Tab shown of a SysTabControl32]
AU3.ControlCommand("windowTitle", "windowText", controlID, "CurrentTab", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "TabRight", "") | Move to the next tab to the right of a SysTabControl32]
AU3.ControlCommand("windowTitle", "windowText", controlID, "TabRight", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "TabLeft", "") | Move to the next tab to the left of a SysTabControl32]
AU3.ControlCommand("windowTitle", "windowText", controlID, "TabLeft", "")
[AU3.ControlDisable("windowTitle", "windowText", controlID) | Disable or "grays-out" a control. Returns: 0(failure) | 1(success)]
AU3.ControlDisable("windowTitle", "windowText", controlID)
[AU3.ControlEnable("windowTitle", "windowText", controlID) | Enable a "grayed-out" control. Returns: 0(failure) | 1(success)]
AU3.ControlEnable("windowTitle", "windowText", controlID)
[AU3.ControlFocus("windowTitle", "windowText", controlID) | Set input focus to a given control on a window]
AU3.ControlFocus("windowTitle", "windowText", controlID)
[AU3.ControlGetFocus("windowTitle", "windowText") | Returns the ControlRef# of the control that has keyboard focus within a specified window]
AU3.ControlGetFocus("windowTitle", "windowText")
[AU3.ControlGetHandle("windowTitle", "windowText", controlID) | Retrieve the internal handle of a control]
AU3.ControlGetHandle("windowTitle", "windowText", controlID)
[AU3.ControlGetPosHeight("windowTitle", "windowText", controlID) | Retrieve the height of a control]
AU3.ControlGetPosHeight("windowTitle", "windowText", controlID)
[AU3.ControlGetPosWidth("windowTitle", "windowText", controlID) | Retrieve the width of a control]
AU3.ControlGetPosWidth("windowTitle", "windowText", controlID)
[AU3.ControlGetPosX("windowTitle", "windowText", controlID) | Returns the X coordinate of the control]
AU3.ControlGetPosX("windowTitle", "windowText", controlID)
[AU3.ControlGetPosY("windowTitle", "windowText", controlID) | Returns the Y coordinate of the control]
AU3.ControlGetPosY("windowTitle", "windowText", controlID)
[AU3.ControlGetText("windowTitle", "windowText", controlID) | Retrieve text from a control]
U3.ControlGetText("windowTitle", "windowText", controlID)
[AU3.ControlHide("windowTitle", "windowText", controlID) | Hide a control]
AU3.ControlHide("windowTitle", "windowText", controlID)
[AU3.ControlListView("windowTitle", "windowText", controlID, "DeSelect", indexFrom, indexTo) | Deselect one or more items of ListView32 control. 0 based index]
AU3.ControlListView("windowTitle", "windowText", controlID, "DeSelect", indexFrom, indexTo)
[AU3.ControlListView("windowTitle", "windowText", controlID, "FindItem", "findString", indexSubItem) | Returns the item index (0 based) of the string in ListView32 control. Returns -1 if the string is not found. subItem optional]
AU3.ControlListView("windowTitle", "windowText", controlID, "FindItem", "findString", indexSubItem)
[AU3.ControlListView("windowTitle", "windowText", controlID, "GetItemCount") | Returns the number of list items of ListView32 control]
AU3.ControlListView("windowTitle", "windowText", controlID, "GetItemCount")
[AU3.ControlListView("windowTitle", "windowText", controlID, "GetSelected", allItems) | Returns a string containing the item index (0 based) of selected items of ListView32 control. allItems = 0(only the first selected item-defasult) | 1(all the selected items are returned delimited by |)]
AU3.ControlListView("windowTitle", "windowText", controlID, "GetSelected", 0|1)
[AU3.ControlListView("windowTitle", "windowText", controlID, "GetSelectedCount") | Returns the number of items that are selected in ListView32 control]
AU3.ControlListView("windowTitle", "windowText", controlID, "GetSelectedCount")
[AU3.ControlListView("windowTitle", "windowText", controlID, "GetSubItemCount") | Returns the number of subitems in ListView32 control]
AU3.ControlListView("windowTitle", "windowText", controlID, "GetSubItemCount")
[AU3.ControlListView("windowTitle", "windowText", controlID, "GetText", index, indexSubItem) | Returns the text of a given item/subitem in ListView32 control. 0 based index]
AU3.ControlListView("windowTitle", "windowText", controlID, "GetText", index, indexSubItem)
[AU3.ControlListView("windowTitle", "windowText", controlID, "IsSelected", index) | Returns: 1(item is selected) | 0(otherwise). 0 based index]
AU3.ControlListView("windowTitle", "windowText", controlID, "IsSelected", index)
[AU3.ControlListView("windowTitle", "windowText", controlID, "Select", indexFrom, indexTo) | Select one or more items of ListView32 control. 0 based index]
AU3.ControlListView("windowTitle", "windowText", controlID, "Select", indexFrom, indexTo)
[AU3.ControlListView("windowTitle", "windowText", controlID, "SelectAll") | Select all items in ListView32 control.]
AU3.ControlListView("windowTitle", "windowText", controlID, "SelectAll")
[AU3.ControlListView("windowTitle", "windowText", controlID, "SelectClear") | Clear the selection of all items in ListView32 control]
AU3.ControlListView("windowTitle", "windowText", controlID, "SelectClear")
[AU3.ControlListView("windowTitle", "windowText", controlID, "SelectInvert") | Invert the current selection in ListView32 control]
AU3.ControlListView("windowTitle", "windowText", controlID, "SelectInvert")
[AU3.ControlListView("windowTitle", "windowText", controlID, "ViewChange", "view") | Change the current view of ListView32 control]
AU3.ControlListView("windowTitle", "windowText", controlID, "ViewChange", "List|Details|SmallIcons|LargeIcons")
[AU3.ControlMove("windowTitle", "windowText", controlID, x, y, width, height) | Move a control within a window. New width and height of window optional (default -1)]
U3.ControlMove("windowTitle", "windowText", controlID, x, y, width, height)
[AU3.ControlSend("windowTitle", "windowText", controlID, "string", mode) | Send a string of characters to a control. mode(optional) = 0(string contains special characters like + to indicate SHIFT and {LEFT} to indicate left arrow-default) | 1(send raw keys)]
AU3.ControlSend("windowTitle", "windowText", controlID, "string", 0|1)
[AU3.ControlSetText("windowTitle", "windowText", controlID, "controlText") Set text of a control.|
AU3.ControlSetText("windowTitle", "windowText", controlID, "controlText")
[AU3.ControlShow("windowTitle", "windowText", controlID) | Show a control that was hidden]
AU3.ControlShow("windowTitle", "windowText", controlID)
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "Check", "item") | Check an item in TreeView32 control (if the item supports it)]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "Check", "item")
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "Collapse", "item") |Collapse an item to hide its children in TreeView32 control]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "Collapse", "item")
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "Exists", "item") | Returns 1 if an item exists, otherwise 0 in TreeView32 control]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "Exists", "item")
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "Expand", "item") | Expand an item to show its children in TreeView32 control]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "Expand", "item")
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "GetItemCount", "item") | Returns the number of children for a selected item in TreeView32 control]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "GetItemCount", "item")
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "GetSelected", index) | Returns the item reference of the current selection using the text reference of the item (or optional index reference if index = 1)]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "GetSelected", |1)
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "GetText", "item") | Returns the text of an item in TreeView32 control]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "GetText", "item")
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "IsChecked") | Returns the state of an item: 1(checked) | 0(unchecked) | -1(not a checkbox)]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "IsChecked")
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "Select", "item") | Select an item in TreeView32 control]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "Select", "item")
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "Uncheck", "item") | Uncheck an item in TreeView32 control (if the item supports it)]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "Uncheck", "item")
[AU3.StatusbarGetText("windowTitle", "windowText", index) | Retrieve text from a standard StatusBar control. windowText optional, index optional (default 1)]
AU3.StatusbarGetText("windowTitle", "windowText", index)

[34    OPERATORS |G ]
[34 ++ | Join two strings.]
 ++
[34 == | Result is 1 if values are equal; 0 otherwise.]
 ==
[34 === | Result is 1 if values are equal; 0 otherwise. Always compares as string.]
 ===
[34 += | Add a value to a variable.]
 +=
[34 -= | Subtract a value from a variable.]
 -=
[34 *= | Multiply a value to a variable.]
 *=
[34 /= | Divide a value to a variable.]
 /=
[34 %= | Mod a value to a variable.]
 %=
[34 << | Shift bits of number left.]
 <<
[34 >> | Shift bits of number right.]
 >>
[34 <<= | Shift a value to a variable.]
 <<=
[34 >>= | Shift a value to a variable.]
 >>=
[34 ++= | Join a value to a variable.]
 +=
[34 ! | Result is 1 if following expression is 0; else 0.]
 !
[34 != | Result is 1 if values are not equal; 0 otherwise.]
 !=
[34 !== | Result is 1 if values are not equal; 0 otherwise. Always compares as string.]
 !==
[34 & | Result is bitwise AND of both values.]
 &
[34 && | Result is 1 if both values are non zero; 0 otherwise.]
 &&
[34 AND | Result is 1 if both values are non zero; 0 otherwise.]
 AND
[34 OR | Result is 1 if either value is non zero; 0 otherwise.]
 OR
[34 NOT(expr) | Result is 1 if following expression is zero or empty string; else 0.]
NOT(expr)
[34 EQ | == Result is 1 if values are equal; 0 otherwise.]
 EQ
[34 GE | >= Result is 1 if first value is greater than or equal to second; 0 otherwise.]
 GE
[34 GT | > Result is 1 if first value is greater than second; 0 otherwise.]
 GT
[34 LE | <= Result is 1 if first value is less than or equal to second; 0 otherwise.]
 LE
[34 LT | < Result is 1 if first value is less than second value; 0 otherwise.]
 LT
[34 NE | != Result is 1 if values are not equal; 0 otherwise.]
 NE
[34 XOR | ^^ Result is 1 if one value is 1 and the other 0; 0 otherwise.]
 XOR
[34 ^ | Result is bitwise XOR of both values.]
 ^
[34 ^^ | Result is 1 if one value is 1 and the other 0; 0 otherwise.]
 ^^
[34 | | Result is bitwise OR of both values.]
 |
[34 || | Result is 1 if either value is non zero; 0 otherwise.]
 ||
[34 ;;+ | Create multi-line strings by ending a line with ???delim.]
 ;;+
[34 \& | Expression follows character (replace t by whatever character you use)]
\&
[34 \" | double quote]
\"
[34 \(expr) | Replaced by the value of the expression. Equivalient to 'abc'++(expr)++'xyz']
\(expr)
[34 \\ | backslash]
\\
[34 \c | comma]
\c
[34 \n | newline]
\n
[34 \r | carriage return]
\r
[34 \t | tab]
\t
[34 \x## | \x followed by 2 hexadecimal digits is replaced by the ASCII character.]
\x##
[34 \d### | \d followed by 3 decimal is replaced by the ASCII character.]
\d###

; SORTED KEYWORDS (initiate "Show clips" when cursor inside or after a keyword - without dot)

; *
[*Clip Capture | Toggle capture off/on. Optionally add folder name.]
*Clip Capture
[*Clip ClearClipboard | Clear clipboard.]
*Clip ClearClipboard
[*Clip ClearRecent | Clear recent list of captured clips.]
*Clip ClearRecent
[*Clip Copy | Send Ctrl-C to foreground window for copy.]
*Clip Copy
[*Clip CopyThenToFile | Send Ctrl+C then copy clipboard to file.]
*Clip CopyThenToFile fullpathtofile
[*Clip Cut | Send Ctrl-X to foreground window for cut.]
*Clip Cut
[*Clip Delete | Delete selected entry from clipboard history.]
*Clip Delete
[*Clip File | Copy file to clipboard.]
*Clip File
[*Clip FileIPaste | Copy file to clipboard then paste using Ctrl+Ins]
*Clip FileIPaste fullpathtofile
[*Clip FilePaste | Copy file to clipboard then paste using Ctrl+V.]
*Clip FilePaste fullpathtofile
[*Clip Menu | Show menu of clips, select an entry to put on clipboard.]
*Clip Menu
[*Clip MenuIPaste | Show menu of clips then paste selected entry using Ctrl+Ins.]
*Clip MenuIPaste
[*Clip MenuPaste | Show menu of clips then paste selected entry with Ctrl+V.]
*Clip MenuPaste
[*Clip Paste | Send Ctrl-V to foreground window for paste.]
*Clip Paste
[*Clip ShortDate | Put date on clipboard in short format.]
*Clip ShortDate
[*Clip LongDate | Put date on clipboard in long format.]
*Clip LongDate
[*Clip Reattach | Put PowerPro at front of applications tracking clipboard.]
*Clip Reattach
[*Clip Time | Put time on clipboard.]
*Clip Time
[*Clip Text | Put following text on clipboard.]
*Clip Text text
[*Clip TextAppend | Append following text to clipboard. if no text, newline appended.]
*Clip TextAppend text
[*Clip TextPaste | Put entered text on clipboard regardless off CapsLock state and then paste with Ctrl+V]
*Clip TextPaste text
[*Clip ToFile | Copy clipboard to text file.]
*Clip ToFile fullpathtofile
[*Clip ToFileAppend | Append clipboard to text file.]
*Clip ToFileAppend fullpathtofile
[*Control Edit keywords "text" | Textbox control]
*Control Edit AutoHScroll AutoVScroll HScrollBar VScrollBar Center Left Right LowerCase UpperCase MultiLine NoHideSel Number Password ReadOnly ClientEdge "text" AutoFile AutoURL AutoURLHistory AutoURLMRU AutoAppend_Off AutoAppend_On AutoSuggest_Off AutoSuggest_On
[*Control Button keywords "label" | Button control]
*Control Button Center RightButton Bottom VCenter Top MultiLine ClientEdge "label"
[*Control Button AutoCheckBox PushLike keywords "label" | Toggle Button control (Returns 0, 1)]
*Control Button AutoCheckBox PushLike Center RightButton Bottom VCenter Top MultiLine ClientEdge "label"
[*Control Button AutoCheckBox keywords "label" | 2-state check box control (Returns 0, 1)]
*Control Button AutoCheckBox Center RightButton Bottom VCenter Top MultiLine ClientEdge "label"
[*Control Button AutoTriState keywords "label" | 3-state check box control (Returns 0, 1, 2)]
*Control Button AutoTriState Center RightButton Bottom VCenter Top MultiLine ClientEdge "label"
[*Control ComboxBox DropDown keywords | DropDownCombo control (Editable dropdown)]
*Control ComboxBox DropDown AutoHScroll LowerCase UpperCase Sort ClientEdge Scroll Border "item1|item2|..."
[*Control ComboxBox DropDownList keywords | DropDownList control (Non-editable dropdown)]
*Control ComboxBox DropDownList AutoHScroll LowerCase UpperCase Sort ClientEdge Scroll Border "title|item1|item2|..."
[*Control ComboxBox keywords | ListBox control]
*Control ComboxBox Height:xxx AutoHScroll LowerCase UpperCase NoIntegralHeight Sort ClientEdge Scroll Border "title|item1|item2|..."
[*Control Slider (value) lowerbound upperbound ticfrequency keywords | Slider control]
*Control Slider (value) lowerbound upperbound ticfrequency Vertical Noticks Left Right Bottom Top Both Clientedge
[*Control Progress (value) lowerbound upperbound keywords | Progress Bar control]
*Control Progress (value) lowerbound upperbound Vertical
[*Control IE "url" | Browser control, navigates to the URL.]
*Control IE "url"
[*Control IE "folderpath" | Explorer control, navigates to the folder path.]
*Control IE "folderpath"
[*Control {guid} | An attempt is made to load a COM control with the GUID.]
*Control {guid}
[*Control {.progid} | An attempt is made to load a COM control with the ProgID.]
*Control {.progid}
[*Format BarVerticalLine | Draw a vertical line in a bar.]
*Format BarVerticalLine
[*Format Context captionlist | Start a menu section or shows a bar depending on the active window.]
*Format Context captionlist
[*Format ContextIf expression | Start a menu section or shows a bar depending on the active window.]
*Format ContextIf expression
[*Format Drag | Drag bar with this button.]
*Format Drag
[*Format EndContext | End portion of menu depending on active window.]
*Format EndContext
[*Format EndSubBar |]
*Format EndSubBar
[*Format EndSubMenu | End the submenu. You can nest submenus up to 4 levels deep.]
*Format EndSubMenu
[*Format Item | Change colors and text associated with menu or bar item.]
*Format Item
[*Format MaxColumn n | Max.number of rows in a column.]
*Format MaxColumn n
[*Format NewBarRow | Start a new row in a bar.]
*Format NewBarRow
[*Format NewBarRowLine | Start a new row in a bar and draw separator line.]
*Format NewBarRowLine
[*Format NewColumn | Start a new column in a menu.]
*Format NewColumn
[*Format NewColumnLine | Start a new column with a separating vertical line.]
*Format NewColumnLine
[*Format Separator | Insert a horizontal separator in a menu.]
*Format Separator
[*Format StartSubBar | Following items in the list appear in a submenu.]
*Format StartSubBar
[*Format StartSubMenu | Following items in the list appear in a submenu, max.4 levels deep.]
*Format StartSubMenu
[*Keys {browser_back}{browser_forward}{browser_refresh}{browser_stop}{browser_search}{browser_favorites}{browser_home} | Send the corresponding special key on the keyboard.]
*Keys {browser_back}{browser_forward}{browser_refresh}{browser_stop}{browser_search}{browser_favorites}{browser_home}
[*Keys {volume_mute}{volume_down}{volume_up}{media_next_track}{media_prev_track}{media_stop}{media_play_pause} | Send the corresponding special key on the keyboard.]
*Keys {volume_mute}{volume_down}{volume_up}{media_next_track}{media_prev_track}{media_stop}{media_play_pause}
[*Keys {launch_mail}{launch_media_select}{launch_app1}{launch_app2} | Send the corresponding special key on the keyboard.]
*Keys {launch_mail}{launch_media_select}{launch_app1}{launch_app2}
[*Keys {Time} | Send time in Windows format.]
*Keys {time}
[*Keys {DateShort}{DateLong} | Send date in Windows short/long format.]
*Keys {DateShort}{DateLong}
[*Keys {PrevShort}{NextShort} | Send previous day/next day date short format.]
*Keys {PrevShort}{NextShort}
[*Keys {FileMenu "filepath"} | User selects the keys to be sent from a TXT file menu.]
*Keys {FileMenu "filepath"}
[*Keys {From "filepath"} | Get key commands from text in a TXT file.]
*Keys {From "filepath"}
[*Keys {To ...} | Only works with visible windows, always leaves the focus at the target window.]
*Keys {To title}
[*Keys {To *} | Send the keys to the active window. Only visible windows. Focus stays at target.]
*Keys {To *}
[*Keys {To +...} | Wait for the specified window to be ready (max. 3 sec)]
*Keys {To +}
[*Keys {To -...} | Sleep a short time before sending the keys.]
*Keys {To -}
[*Keys {To =filepath} | Sends keys to program run from filepath.]
*Keys {To =filepath}
[*Keys {To ActiveBar} | Send the keys to last window referenced by an Active bar button.]
*Keys {To ActiveBar}
[*Keys {To Autorun} | Send the keys to last window matched by autorun command list.]
*Keys {To Autorun}
[*Keys {To None} | No check if window is available; makes keys available in keyboard buffer only.]
*Keys {To None}
[*Keys {To ^...} | Avoids the error message, if the {To xxx} window is not found.]
*Keys {To ^}
[*Keys {To filepath} | Write key commands to a file.]
*Keys {To filepath}
[*Keys {To caption_list} | Send the keys to the first window found matching the captionlist.]
*Keys {To caption_list}
[*Keys {To folder} | Sends the folder path c:\path to an open/save dialog (XP only)]
*Keys {To folder}
[*Keys {To title} | Sends keys to window with caption title. Can use * at both ends.]
*Keys {To title}
[*Keys {ToAny ...} | For both hidden and visible windows, returns the focus to the current window.]
*Keys {ToAny }
[*Keys {ToAny *} | Send the keys to the active window.]
*Keys {ToAny *}
[*Keys {ToAny +...} | Wait for the specified window to be ready (max. 3 sec)]
*Keys {ToAny +}
[*Keys {ToAny -...} | Sleep a short time before sending the keys.]
*Keys {ToAny -}
[*Keys {ToAny ...} | Only works with visible windows, always leaves the focus at the target window.]
*Keys {ToAny title}
[*Keys {ToAny =filepath} | Sends keys to program run from filepath.]
*Keys {ToAny =filepath}
[*Keys {ToAny ActiveBar} | Send the keys to last window referenced by an Active bar button.]
*Keys {ToAny ActiveBar}
[*Keys {ToAny Autorun} | Send the keys to last window matched by autorun command list.]
*Keys {ToAny Autorun}
[*Keys {ToAny None} | No check if window is available; makes keys available in keyboard buffer only.]
*Keys {ToAny None}
[*Keys {ToAny ^...} | Avoids the error message, if the {ToAny xxx} window is not found.]
*Keys {ToAny ^}
[*Keys {ToAny filepath} | Write key commands to a file.]
*Keys {ToAny filepath}
[*Keys {ToAny caption_list} | Send the keys to the first window found matching the captionlist.]
*Keys {ToAny caption_list}
[*Keys {ToAny folderpath} | Sends the folderpath to an open/save dialog (XP only)]
*Keys {ToAny folderpath}
[*Keys {ToAny title} | Sends keys to window with caption title. Can use * at both ends.]
*Keys {ToAny title}
[*Macro | *Macro command can only be used with hot keys.]
*Macro
[*Menu Explorer sort command | Show folders recently accessed with Explorer.]
*Menu Explorer "Name/Date" "command"
[*Menu Folder folderpath | Create a menu from a folder.]
*Menu Folder folderpath
[*Menu Recent | Show a menu of recently executed commands.]
*Menu Recent
[*Menu RecentCommands | Displays a menu of the last 10 programs you have run by any means. (only, if "Track windows for *Menu RecentCommands" is checked in Command Lists >Setup >All Menus)]
*Menu RecentCommands
[*Menu Show commandlist | Show a COMMAND LIST as a menu. Use *Format to insert submenus and separators.]
*Menu Show commandlist CenterUnderMouse|CenterScreen|Offset nn2|Screen nn2|HorButton|HorButtonCenter|VerButton|Cursor
[*Menu ShowAtButton commandlist | Show a COMMAND LIST as a menu aligned to last button pressed.]
*Menu ShowAtButton commandlist
[*Menu ShowAtCursor commandlist | Show a COMMAND LIST as a menu aligned to text cursor.]
*Menu ShowAtCursor commandlist
[*Menu ShowFile strFilePath | Show a file as a menu which can contain *Format commands.]
*Menu ShowFile strFilePath
[*Menu StartMenu | Show Windows start menu at mouse cursor. Alternatively, *Menu Folder StartMenu.]
*Menu StartMenu
[*Menu Tray | Show tray icons as menu.]
*Menu Tray
[*Message n text | Shows message with text, optionally waits n seconds to close]
*Message n text
[*Script Assign | Assign a string or number to a variable.]
*Script Assign
[*Script Close "commandlist" | End all programs listed in command list.]
*Script Close "commandlist"
[*Script CloseForce "commandlist" | End all programs listed in command list, forces them closed, possibly losing data.]
*Script CloseForce "commandlist"
[*Script Debug | Write following text or expression to a debug window.]
*Script Debug
[*Script Flag | Assign a value to a flag.]
*Script Flag
[*Script Jump label | Jumps to a @ label in a script, similar to Goto in Perl.]
*Script Jump label
[*Script Path path1 path2 | Set the search path for scripts.]
*Script Path path1 path2
[*Script Quit | End execution of a script. Similar to die() in Perl or PHP.]
*Script Quit
[*Script Quit All | End execution of a script, end any calling scripts too]
*Script Quit All
[*Script Run commandlist | Run a script from command list (only left commands are used)]
*Script Run commandlist
[*Script RunFile strFilePath | Run a script from a file.]
*Script RunFile strFilePath
; _
[_AutoInit_ | This function is automatically called once when the script file is loaded.]
_AutoInit_
[_BreakPoints_ | Break At edit box (enter breakpoints) is stored and loaded from the global variable _BreakPoints_.]
_BreakPoints_
[_exit_ | Used for File.RunCallBack, File.WatchFolder, Event.Message output.]
_Exit_
[_file_ | Selected file, in the commands for a context menu, folder buttons, menu folder, and for files dropped on buttons.]
_File_
[_exit_ | Used for File.WatchFolder output.]
_Folder_
[_LastError_ | Set to the error message whenever any error occurs.]
_LastError_
[_PickedLine_ | index of the last string chosen from a PickFile or PickString dialog or set after Menu command to 0(menu dismissed without selection) | 1(item picked)]
_PickedLine_
[_RegExp_ | Regular expression result. 0(full match), 1(partial match), 2(no match), 8(error-invalid pattern), 9(error-empty string or pattern)]
_RegExp_
; A
[Abs(x) | Absolute value of number.]
Abs(x)
[ACDC | A if running on ac power, D otherwise.]
ACDC
[Active | Predefined command list script name. Set non standard icons or colors for active buttons (only, if checked or gray checked in Command Lists >Setup >Special Lists)]
Active
[ActiveWindow | Returns 1 if string (must not be a window handle) matches active window, 0 otherwise.]
string.ActiveWindow
[ActiveWindow("captionlist") | Result is 1 if caption list matches the currently active window.]
ActiveWindow("captionlist")
[Anywindow | Returns 1 if string (must not be a window handle) matches any window, 0 otherwise.]
string.Anywindow
[AnyWindow("captionlist") | Result is 1 if caption list matches any window, including hidden.]
AnyWindow("captionlist")
[AllDeskNames | All desktop names, as multi-line string with one name per line.]
AllDeskNames
[AllGlobals | String with the names of all global variables, one name per line.]
AllGlobals
[AllPProProcessName | Blank-separated string of all currently running PowerPro processes.]
AllPProProcessName
[AllStatics | String with the names of all static variables for the script in which the function is used, one name per line.]
AllStatics
[Alt | Returns pressed keys: 1(left Alt), 2(right Alt), 3(both)]
Alt
[Arg(n) | Returns nth argument in the call to the script.]
Arg(n)
[Assign("var1", "var2") | Assigns second string to variable name given by first string.]
Assign("var1", "var2")
[AU.BlockInput(toogle) | Will prevent any user input via the mouse or keyboard. toggle = 0(enable) | 1(block)]
AU.BlockInput(0|1)
[AU.DetectHiddenText(toogle) | Hidden text on windows can cause problems when trying to script them. This command tells AutoIt whether or not to detect hidden text. 0(disable) | 1(enable)]
AU.DetectHiddenText(0|1)
[AU.IfWinActive("caption", "windowText") | Checks if a given window is currently active. Returns 1(active), 0(otherwise)]
AU.IfWinActive("caption", "windowText")
[AU.IfWinExist("caption", "windowText") | Checks if a given window exists (in any state). Returns 1(exists), 0(otherwise)]
AU.IfWinExist("caption", "windowText")
[AU.INIDelete("filepath", "section", "key") | Delete a specified value from a standard .INI file. '.\myfile.ini' to indicate a file in the current working directory.]
AU.INIDelete("file", "section", "key")
[AU.INIRead("filepath", "section", "key", "value") | Read a specified value from a standard .INI file.]
AU.INIRead("file", "section", "key", "value")
[AU.INIWrite("filepath", "section", "key", "value") | Write a specified value to a standard .INI file.]
AU.INIWrite(strFile, strSection, strKey, "value")
[AU.LeftClick(x, y) | Simulates a mouse left-click at a given coordinate relative to the currently active window. Run the command twice for double click.]
AU.LeftClick(x, y)
[AU.LeftClickDrag(xFrom, yFrom, xTo, yTo) | Simulates a mouse left-click-drag operation. Coordinates are relative to the currently active window]
AU.LeftClickDrag(xFrom, yFrom, xTo, yTo)
[AU.MouseGetPosx | Returns the X coordinate of the mouse pointer relative to the currently active window.]
AU.MouseGetPosx
[AU.MouseGetPosy | Returns the Y coordinate of the mouse pointer relative to the currently active window.]
AU.MouseGetPosy
[AU.MouseMove(x, y) | Moves the mouse pointer to the specified coordinates relative to the currently active window.]
AU.MouseMove(x, y)
[AU.RightClick(x, y) | Simulates a mouse right-click at a given coordinate relative to the currently active window. Run the command twice for double click.]
AU.RightClick(x, y)
[AU.RightClickDrag(xFrom, yFrom, xTo, yTo) | Simulates a mouse left-click-drag operation. Coordinates are relative to the currently active window]
AU.RightClickDrag(xFrom, yFrom, xTo, yTo)
[AU.Send("keys") | Sends keystrokes to the currently active window.]
AU.Send("keys")
[AU.SetCapslockState(toggle) | Set the state of the CAPSLOCK key to either on or off. toggle = 0(off) | 1(on)]
AU.SetCapslockState(0|1)
[AU.SetKeyDelay(value) | Alter the amount of time (ms) that AutoIt pauses between each simulated keypress. (Default 20ms)]
AU.SetKeyDelay(value)
[AU.SetStoreCapslockMode(toggle) | By default, at the start of a 'Send' command AutoIt will store the state of the CAPSLOCK key; at the end of the 'Send' command this status will be restored. Use this command to turn off this behaviour. toggle = 1(store/restore), 0(ignore)]
AU.SetStoreCapslockMode(0|1)
[AU.SetTitleMatchMode(matchType) | Alter the way that AutoIt matches window titles in functions. matchType = 1(partial match from the beginning-default) | 2(partial match in any part)]
AU.SetTitleMatchMode(1|2)
[AU.SetWinDelay(timeout_ms) | Change the amount of time that AutoIt pauses after performing a WinWait-type function. (Default 500ms)]
AU.SetWinDelay(timeout_ms)
[AU.Shutdown(flag) | This function can perform various types of shutdown on all Windows operating systems. 0=logoff, 1=shutdown, 2=reboot, 4=force, 8=Shutdown and power off (use total of them)]
AU.Shutdown(flag)
[AU.Sleep(timeout_ms) | Wait for an amount of time (ms).]
AU.Sleep(timeout_ms)
[AU.WinActivate("caption", "windowText") | activate a specified window.]
AU.WinActivate("caption", "windowText")
[AU.WinClose("caption", "windowText") | Close a specified window]
AU.WinClose("caption", "windowText")
[AU.WinGetActiveTitle | Return the title of the current active window]
AU.WinGetActiveTitle
[AU.WinHide("caption", "windowText") | Hide a specified window]
AU.WinHide("caption", "windowText")
[AU.WinKill("caption", "windowText") | Forceably close a specified window]
AU.WinKill("caption", "windowText")
[AU.WinMaximize("caption", "windowText") | Maximize a specified window]
AU.WinMaximize("caption", "windowText")
[AU.WinMinimize("caption", "windowText") | Minimize a specified window]
AU.WinMinimize("caption", "windowText")
[AU.WinMinimizeAll | Minimize all windows]
AU.WinMinimizeAll
[AU.WinMinimizeAllUndo | Undo a previous AUTOIT_WinMinimizeAll call]
AU.WinMinimizeAllUndo
[AU.WinMove("caption", "windowText", x, y, width, height) | Move/resize a specified window. Use -1 to keep same width/height.]
AU.WinMove("caption", "windowText", x, y, width, height)
[AU.WinRestore("caption", "windowText") | Restore a window from a minimized state]
AU.WinRestore("caption", "windowText")
[AU.WinSetTitle("caption", "windowText", "title") | Change the title of a specified window.]
AU.WinSetTitle("caption", "windowText", "title")
[AU.WinShow("caption", "windowText") | Show a specified window previously hidden]
AU.WinShow("caption", "windowText")
[AU.WinWait("caption", "windowText", timeout_ms) | Wait until the specified window exists (or the function times out). timeout_ms = 0 waits indefinitely.]
AU.WinWait("caption", "windowText", timeout_ms)
[AU.WinWaitActive("caption", "windowText", timeout_ms) | Wait until the specified window is active (or the function times out). timeout_ms = 0 waits indefinitely.]
AU.WinWaitActive("caption", "windowText", timeout_ms)
[AU.WinWaitClose("caption", "windowText", timeout_ms) | Wait until the specified window doesn't exist (or the function times out). timeout_ms = 0 waits indefinitely.]
AU.WinWaitClose("caption", "windowText", timeout_ms)
[AU.WinWaitNotActive("caption", "windowText", timeout_ms) | Wait until the specified window is not active (or the function times out). timeout_ms = 0 waits indefinitely.]
AU.WinWaitNotActive("caption", "windowText", timeout_ms)
[AU3.AutoItSetOption("option", value) | Change the operation of various AutoIt functions and parameters. See AutoItX.chm for details.]
AU3.AutoItSetOption("CaretCoordMode|MouseClickDelay|MouseClickDownDelay|MouseClickDragDelay|MouseCoordMode|PixelCoordMode|SendAttachMode|SendCapslockMode|SendKeyDelay|SendKeyDownDelay|WinDetectHiddenText|WinSearchChildren|WinTextMatchMode|WinTitleMatchMode|WinWaitDelay", value)
[AU3.BlockInput(intFlag) | ]
AU3.BlockInput(intFlag)
[AU3.CDTray("drive", "action") | ]
AU3.CDTray("drive", "action")
[AU3.ClipGet() | Returns a string containing the text on the clipboard.]
AU3.ClipGet()
[AU3.ClipPut("text") | Write text to the clipboard.]
AU3.ClipPut("text")
[AU3.ControlClick("windowtitle", "windowtext", controlID, "button", clickCount, x, y) | Send a mouse click command to a given control. Returns: 0(failure) | 1(success). button (and rest) optional. button default Left. clickCount default 1. x, y position to click within the control default center.)
AU3.ControlClick("windowtitle", "windowtext", controlID, "|Left|Middle|Right", clickCount, x, y)
[AU3.ControlCommand("windowTitle", "windowText", controlID, "IsVisible", "") | Returns 1 if Control is visible, 0 otherwise]
AU3.ControlCommand("windowTitle", "windowText", controlID, "IsVisible", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "IsEnabled", "") | Returns 1 if Control is enabled, 0 otherwise]
AU3.ControlCommand("windowTitle", "windowText", controlID, "IsEnabled", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "ShowDropDown", "") | Drop a ComboBox]
AU3.ControlCommand("windowTitle", "windowText", controlID, "ShowDropDown", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "HideDropDown", "") | UNdrop a ComboBox]
AU3.ControlCommand("windowTitle", "windowText", controlID, "HideDropDown", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "AddString", "string") | Add a string to the end in a ListBox or ComboBox]
AU3.ControlCommand("windowTitle", "windowText", controlID, "AddString", "string")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "DelString", occurrence) | Delete a string according to occurrence (returned by AU3.FindString) in a ListBox or ComboBox]
AU3.ControlCommand("windowTitle", "windowText", controlID, "DelString", occurrence)
[AU3.ControlCommand("windowTitle", "windowText", controlID, "FindString", "string") | Returns occurrence ref of the exact string in a ListBox or ComboBox]
AU3.ControlCommand("windowTitle", "windowText", controlID, "FindString", "string")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "SetCurrentSelection", occurrence) | Set selection to occurrence (returned by AU3.FindString) ref in a ListBox or ComboBox]
AU3.ControlCommand("windowTitle", "windowText", controlID, "SetCurrentSelection", occurrence)
[AU3.ControlCommand("windowTitle", "windowText", controlID, "SelectString", "string") | Set selection according to string in a ListBox or ComboBox]
AU3.ControlCommand("windowTitle", "windowText", controlID, "SelectString", "string")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "IsChecked", "") | Returns 1 if Button is checked, 0 otherwise]
AU3.ControlCommand("windowTitle", "windowText", controlID, "IsChecked", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "Check", "") | Check radio or check Button]
AU3.ControlCommand("windowTitle", "windowText", controlID, "Check", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "UnCheck", "") | Uncheck radio or check Button]
AU3.ControlCommand("windowTitle", "windowText", controlID, "UnCheck", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "GetCurrentLine", "") | Returns the line # where the caret is in an Edit]
AU3.ControlCommand("windowTitle", "windowText", controlID, "GetCurrentLine", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "GetCurrentCol", "") | Returns the column # where the caret is in an Edit]
AU3.ControlCommand("windowTitle", "windowText", controlID, "GetCurrentCol", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "GetCurrentSelection", "") | Returns name of the currently selected item in a ListBox or ComboBox]
AU3.ControlCommand("windowTitle", "windowText", controlID, "GetCurrentSelection", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "GetLineCount", "") | Returns # of lines in an Edit]
AU3.ControlCommand("windowTitle", "windowText", controlID, "GetLineCount", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "GetLine", lineIndex) | Returns text at line lineIndex passed of an Edit]
AU3.ControlCommand("windowTitle", "windowText", controlID, "GetLine", lineIndex)
[AU3.ControlCommand("windowTitle", "windowText", controlID, "GetSelected", "") | Returns selected text of an Edit]
AU3.ControlCommand("windowTitle", "windowText", controlID, "GetSelected", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "EditPaste", "string") | Paste the 'string' at the Edit's caret position]
AU3.ControlCommand("windowTitle", "windowText", controlID, "EditPaste", "string")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "CurrentTab", "") | Returns the current Tab shown of a SysTabControl32]
AU3.ControlCommand("windowTitle", "windowText", controlID, "CurrentTab", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "TabRight", "") | Move to the next tab to the right of a SysTabControl32]
AU3.ControlCommand("windowTitle", "windowText", controlID, "TabRight", "")
[AU3.ControlCommand("windowTitle", "windowText", controlID, "TabLeft", "") | Move to the next tab to the left of a SysTabControl32]
AU3.ControlCommand("windowTitle", "windowText", controlID, "TabLeft", "")
[AU3.ControlDisable("windowTitle", "windowText", controlID) | Disable or "grays-out" a control. Returns: 0(failure) | 1(success)]
AU3.ControlDisable("windowTitle", "windowText", controlID)
[AU3.ControlEnable("windowTitle", "windowText", controlID) | Enable a "grayed-out" control. Returns: 0(failure) | 1(success)]
AU3.ControlEnable("windowTitle", "windowText", controlID)
[AU3.ControlFocus("windowTitle", "windowText", controlID) | Set input focus to a given control on a window]
AU3.ControlFocus("windowTitle", "windowText", controlID)
[AU3.ControlGetFocus("windowTitle", "windowText") | Returns the ControlRef# of the control that has keyboard focus within a specified window]
AU3.ControlGetFocus("windowTitle", "windowText")
[AU3.ControlGetHandle("windowTitle", "windowText", controlID) | Retrieve the internal handle of a control]
AU3.ControlGetHandle("windowTitle", "windowText", controlID)
[AU3.ControlGetPosHeight("windowTitle", "windowText", controlID) | Retrieve the height of a control]
AU3.ControlGetPosHeight("windowTitle", "windowText", controlID)
[AU3.ControlGetPosWidth("windowTitle", "windowText", controlID) | Retrieve the width of a control]
AU3.ControlGetPosWidth("windowTitle", "windowText", controlID)
[AU3.ControlGetPosX("windowTitle", "windowText", controlID) | Returns the X coordinate of the control]
AU3.ControlGetPosX("windowTitle", "windowText", controlID)
[AU3.ControlGetPosY("windowTitle", "windowText", controlID) | Returns the Y coordinate of the control]
AU3.ControlGetPosY("windowTitle", "windowText", controlID)
[AU3.ControlGetText("windowTitle", "windowText", controlID) | Retrieve text from a control]
U3.ControlGetText("windowTitle", "windowText", controlID)
[AU3.ControlHide("windowTitle", "windowText", controlID) | Hide a control]
AU3.ControlHide("windowTitle", "windowText", controlID)
[AU3.ControlListView("windowTitle", "windowText", controlID, "DeSelect", indexFrom, indexTo) | Deselect one or more items of ListView32 control. 0 based index]
AU3.ControlListView("windowTitle", "windowText", controlID, "DeSelect", indexFrom, indexTo)
[AU3.ControlListView("windowTitle", "windowText", controlID, "FindItem", "findString", indexSubItem) | Returns the item index (0 based) of the string in ListView32 control. Returns -1 if the string is not found. subItem optional]
AU3.ControlListView("windowTitle", "windowText", controlID, "FindItem", "findString", indexSubItem)
[AU3.ControlListView("windowTitle", "windowText", controlID, "GetItemCount") | Returns the number of list items of ListView32 control]
AU3.ControlListView("windowTitle", "windowText", controlID, "GetItemCount")
[AU3.ControlListView("windowTitle", "windowText", controlID, "GetSelected", allItems) | Returns a string containing the item index (0 based) of selected items of ListView32 control. allItems = 0(only the first selected item-defasult) | 1(all the selected items are returned delimited by |)]
AU3.ControlListView("windowTitle", "windowText", controlID, "GetSelected", 0|1)
[AU3.ControlListView("windowTitle", "windowText", controlID, "GetSelectedCount") | Returns the number of items that are selected in ListView32 control]
AU3.ControlListView("windowTitle", "windowText", controlID, "GetSelectedCount")
[AU3.ControlListView("windowTitle", "windowText", controlID, "GetSubItemCount") | Returns the number of subitems in ListView32 control]
AU3.ControlListView("windowTitle", "windowText", controlID, "GetSubItemCount")
[AU3.ControlListView("windowTitle", "windowText", controlID, "GetText", index, indexSubItem) | Returns the text of a given item/subitem in ListView32 control. 0 based index]
AU3.ControlListView("windowTitle", "windowText", controlID, "GetText", index, indexSubItem)
[AU3.ControlListView("windowTitle", "windowText", controlID, "IsSelected", index) | Returns: 1(item is selected) | 0(otherwise). 0 based index]
AU3.ControlListView("windowTitle", "windowText", controlID, "IsSelected", index)
[AU3.ControlListView("windowTitle", "windowText", controlID, "Select", indexFrom, indexTo) | Select one or more items of ListView32 control. 0 based index]
AU3.ControlListView("windowTitle", "windowText", controlID, "Select", indexFrom, indexTo)
[AU3.ControlListView("windowTitle", "windowText", controlID, "SelectAll") | Select all items in ListView32 control.]
AU3.ControlListView("windowTitle", "windowText", controlID, "SelectAll")
[AU3.ControlListView("windowTitle", "windowText", controlID, "SelectClear") | Clear the selection of all items in ListView32 control]
AU3.ControlListView("windowTitle", "windowText", controlID, "SelectClear")
[AU3.ControlListView("windowTitle", "windowText", controlID, "SelectInvert") | Invert the current selection in ListView32 control]
AU3.ControlListView("windowTitle", "windowText", controlID, "SelectInvert")
[AU3.ControlListView("windowTitle", "windowText", controlID, "ViewChange", "view") | Change the current view of ListView32 control]
AU3.ControlListView("windowTitle", "windowText", controlID, "ViewChange", "List|Details|SmallIcons|LargeIcons")
[AU3.ControlMove("windowTitle", "windowText", controlID, x, y, width, height) | Move a control within a window. New width and height of window optional (default -1)]
U3.ControlMove("windowTitle", "windowText", controlID, x, y, width, height)
[AU3.ControlSend("windowTitle", "windowText", controlID, "string", mode) | Send a string of characters to a control. mode(optional) = 0(string contains special characters like + to indicate SHIFT and {LEFT} to indicate left arrow-default) | 1(send raw keys)]
AU3.ControlSend("windowTitle", "windowText", controlID, "string", 0|1)
[AU3.ControlSetText("windowTitle", "windowText", controlID, "controlText") Set text of a control.|
AU3.ControlSetText("windowTitle", "windowText", controlID, "controlText")
[AU3.ControlShow("windowTitle", "windowText", controlID) | Show a control that was hidden]
AU3.ControlShow("windowTitle", "windowText", controlID)
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "Check", "item") | Check an item in TreeView32 control (if the item supports it)]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "Check", "item")
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "Collapse", "item") |Collapse an item to hide its children in TreeView32 control]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "Collapse", "item")
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "Exists", "item") | Returns 1 if an item exists, otherwise 0 in TreeView32 control]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "Exists", "item")
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "Expand", "item") | Expand an item to show its children in TreeView32 control]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "Expand", "item")
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "GetItemCount", "item") | Returns the number of children for a selected item in TreeView32 control]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "GetItemCount", "item")
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "GetSelected", index) | Returns the item reference of the current selection using the text reference of the item (or optional index reference if index = 1)]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "GetSelected", |1)
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "GetText", "item") | Returns the text of an item in TreeView32 control]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "GetText", "item")
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "IsChecked") | Returns the state of an item: 1(checked) | 0(unchecked) | -1(not a checkbox)]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "IsChecked")
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "Select", "item") | Select an item in TreeView32 control]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "Select", "item")
[AU3.ControlTreeview("windowTitle", "windowText", controlID, "Uncheck", "item") | Uncheck an item in TreeView32 control (if the item supports it)]
AU3.ControlTreeview("windowTitle", "windowText", controlID, "Uncheck", "item")
[AU3.DriveMapAdd("device", "remoteShare", flags, "user", "password") | Map a network drive to device. flags = 0(default) + 1(Persistant mapping) + 8(Show authentication dialog if required). user and password optional]
AU3.DriveMapAdd("D:|...|Z:|LPT1:|*", "\\server\shareFolder", 0+1+8, "user", "password")
[AU3.DriveMapDel("device") | Disconnect a mapped network drive]
AU3.DriveMapDel("D:|...|Z:|LPT1:")
[AU3.DriveMapGet("device") | Retreive the details of a mapped drive]
AU3.DriveMapGet("D:|...|Z:|LPT1:")
[AU3.Error_Dialog_Off | Turn PowerPro script error dialog off.]
AU3.Error_Dialog_Off
[AU3.Error_Dialog_On() | Turn PowerPro script error dialog on.]
AU3.Error_Dialog_On()
[AU3.IniDelete("filename", "section", "key") | ]
AU3.IniDelete("filename", "section", "key")
[AU3.IniRead("filename", "section", "key", "default") | ]
AU3.IniRead("filename", "section", "key", "default")
[AU3.Init() | ]
AU3.Init()
[AU3.IniWrite("filename", "section", "key", "value") | ]
AU3.IniWrite("filename", "section", "key", "value")
[AU3.IsAdmin() | Check if the current user has administrator privileges]
AU3.IsAdmin()
[AU3.MouseClick("button", x, y, clickCount, speed) | Perform a mouse click. x/y coordinates to move the mouse to (default current position). Optional speed = 0(instant) | 1(fastest) - 100(slowest) default 10)]
AU3.MouseClick("Left|Middle|Right", x, y, clickCount, 0-100)
[AU3.MouseClickDrag("button", x1, y1, x2, y2, speed) | Perform a mouse click and drag. x1/y1 from to x2/y2 coordinates. Optional speed = 0(instant) | 1(fastest) - 100(slowest) default 10]
AU3.MouseClickDrag("Left|Middle|Right", x1, y1, x2, y2, 0-100)
[AU3.MouseDown("button") | Perform a mouse down event at the current mouse position. button optional (default "Left")]
AU3.MouseDown("|Left|Middle|Right")
[AU3.MouseGetCursor() | Returns a cursor ID Number of the current Mouse Cursor]
AU3.MouseGetCursor()
[AU3.MouseGetPosX() | Retrieves the current X position of the mouse cursor]
AU3.MouseGetPosX()
[AU3.MouseGetPosY() | Retrieves the current Y position of the mouse cursor]
AU3.MouseGetPosY()
[AU3.MouseMove(x, y, speed) | Moves the mouse pointer. Optional speed = 0(instant) | 1(fastest) - 100(slowest) default 10]
AU3.MouseMove(x, y, 0-100)
[AU3.MouseUp("button") | Perform a mouse up event at the current mouse position]
AU3.MouseUp("Left|Middle|Right")
[AU3.MouseWheel("direction", count) | Move the mouse wheel up or down (XP ONLY). Optional count, default 1]
AU3.MouseWheel("Up|Down", count)
[AU3.Opt("option", value) | Change the operation of various AutoIt functions and parameters. See AutoItX.chm for details.]
AU3.Opt("CaretCoordMode|MouseClickDelay|MouseClickDownDelay|MouseClickDragDelay|MouseCoordMode|PixelCoordMode|SendAttachMode|SendCapslockMode|SendKeyDelay|SendKeyDownDelay|WinDetectHiddenText|WinSearchChildren|WinTextMatchMode|WinTitleMatchMode|WinWaitDelay", value)
[AU3.PixelChecksum(leftX, topY, rightX, bottomY, step_pixel) | Generates a checksum for a region of pixels. Allows to see if something has changed in region (does not tell exactly what). step optional (default 1)]
AU3.PixelChecksum(leftX, topY, rightX, bottomY, step_pixel)
[AU3.PixelGetColor(x, y) | Returns a pixel color according to x,y pixel coordinates]
AU3.PixelGetColor(x, y)
[AU3.PixelSearch(leftX, topY, rightX, bottomY, color, shade, step_pixel) | Search a rectangle of pixels for the pixel color (decimal or HEX). Returns blank separated string with x y coordinates. Indicate the allowed number of shades of variation of red, green and blue (default 0 -exact match). step optional (default 1)]
AU3.PixelSearch(leftX, topY, rightX, bottomY, color, 0-255, step_pixel)
[AU3.ProcessClose("processName_or_PID") | Terminates a named process. processName is process name with extension, without the path or PID. Requires the file PSAPI.DLL]
AU3.ProcessClose("processName_or_PID")
[AU3.ProcessExists("processName_or_PID") | Check if specified process exists. processName_or_PID is name without the full path or PID of the process. Requires the file PSAPI.DLL]
AU3.ProcessExists("processName_or_PID")
[AU3.ProcessSetPriority("processName", priority) | Changes the priority of a process. priority = 0(Idle/Low) | 1(Below Normal) | 2(Normal) | 3(Above Normal) | 4(High) | 5(Realtime)]
AU3.ProcessSetPriority("processName", 0|1|2|3|4|5)
[AU3.ProcessWait("processName", timeout_ms) | Pause script execution until a given process exists. processName is process name without the full path. Requires the file PSAPI.DLL. timeout_ms optional (default 0)]
AU3.ProcessWait("processName", timeout_ms)
[AU3.ProcessWaitClose("processName_or_PID", timeout_ms) | Pause script execution until a given process does not exist. processName is name without the full path or PID of the process. timeout_ms optional (default 0)]
AU3.ProcessWaitClose("processName_or_PID", timeout_ms)
[AU3.RegDeleteKey("key") | ]
AU3.RegDeleteKey("key")
[AU3.RegDeleteVal("key", "value") | ]
AU3.RegDeleteVal("key", "value")
[AU3.RegEnumKey("key", instance) | ]
AU3.RegEnumKey("key", instance)
[AU3.RegEnumVal("key", instance) | ]
AU3.RegEnumVal("key", instance)
[AU3.RegRead("key", "valuename") | ]
AU3.RegRead("key", "valuename")
[AU3.RegWrite("key", "valuename", "type", "value") | ]
AU3.RegWrite("key", "valuename", "type", "value")
[AU3.Run("filePath", "workFolder", showFlag) | Run a program. workFolder (default null) and showFlag (default 1) optional]
AU3.Run("filePath", "workFolder", showFlag)
[AU3.RunAs("user", "domain", "password", logon_flag, "filePath", "workFolder", showFlag) | Run a program. logon_flag = 0(do not load user profile) | 1(load user profile-default) | 2(use for net credentials only). workFolder (default null) and showFlag (default 1) optional]
AU3.RunAs("user", "domain", "password", 0|1|2, "filePath", "workFolder", showFlag)
[AU3.RunAsWait("user", "domain", "password", logon_flag, "filePath", "workFolder", showFlag) | Run a program and pause script until the program finishes. logon_flag = 0(do not load user profile) | 1(load user profile-default) | 2(use for net credentials only). workFolder (default null) and showFlag (default 1) optional]
AU3.RunAsWait("user", "domain", "password", 0|1|2, "filePath", "workFolder", showFlag)
[AU3.RunAsSet("user", "domain", "password", "options") | ]
AU3.RunAsSet("user", "domain", "password", "options")
[AU3.RunWait("filepath", "workDir", showFlags) | Run a program and pause script until the program finishes. Returns PID of the process. workDir (and rest) optional. showFlags default is 1]
AU3.RunWait("filepath", "workDir", "SW_HIDE|SW_MINIMIZE|SW_MAXIMIZE")
[AU3.Send("keys", mode) | Send simulated keystrokes to the active window. mode(optional) = 0(string contains special characters like + to indicate SHIFT and {LEFT} to indicate left arrow-default) | 1(send raw keys)]
AU3.Send("keys", |0|1)
[AU3.Shutdown(flags) | Shut down the system. flags = 0(Logoff) + 1(Shutdown) + 2(Reboot) + 4(Force) + 8(Power down)]
AU3.Shutdown(0+1+2+4+8)
[AU3.Sleep(timeout_ms) | Pause script.]
AU3.Sleep(timeout_ms)
[AU3.StatusbarGetText("windowTitle", "windowText", index) | Retrieve text from a standard StatusBar control. windowText optional, index optional (default 1)]
AU3.StatusbarGetText("windowTitle", "windowText", index)
[AU3.ToolTip("tipText", x, y) | Create a multi-line tooltip anywhere on the screen. If the x and y omitted tip is placed near the mouse cursor. If off screen, repositioned to visible. Tooltip appears until it is cleared/script terminates/it is clicked upon.]
AU3.ToolTip("tipText", x, y)
[AU3.Version | Returns the plugin version number as four digit number.]
AU3.Version
[AU3.WinActive("windowTitle", "windowText") | Returns 1 if specified window exists and is currently active, 0 otherwise. windowText optional]
AU3.WinActive("windowTitle", "windowText")
[AU3.WinActivate("windowTitle", "windowText") | Activate (give focus to) a window. windowText optional]
AU3.WinActivate("windowTitle", "windowText")
[AU3.WinClose("windowTitle", "windowText") | Closes a window. windowText optional]
AU3.WinClose("windowTitle", "windowText")
[AU3.WinExists("windowTitle", "windowText") | Checks to see if a specified window exists. windowText optional]
AU3.WinExists("windowTitle", "windowText")
[AU3.WinGetCaretPosX() | Returns X coordinate of the caret in the foreground window. See CaretCoordMode for options.]
AU3.WinGetCaretPosX()
[AU3.WinGetCaretPosY() | Returns Y coordinate of the caret in the foreground window. See CaretCoordMode for options.]
AU3.WinGetCaretPosY()
[AU3.WinGetClassList("windowTitle", "windowText") | Returns linefeed separated classes of a window. windowText optional.]
AU3.WinGetClassList("windowTitle", "windowText")
[AU3.WinGetClientSizeHeight("windowTitle", "windowText") | Returns the height of the window's client area, 0 for minimized windows, 1 if not found. windowText optional.]
AU3.WinGetClientSizeHeight("windowTitle", "windowText")
[AU3.WinGetClientSizeWidth("windowTitle", "windowText") | Returns the width of the window's client area, 0 for minimized windows, 1 if not found. windowText optional.]
AU3.WinGetClientSizeWidth("windowTitle", "windowText")
[AU3.WinGetHandle("windowTitle", "windowText") | Returns a string containing the window handle value. For use with the advanced WinTitleMatchMode. windowText optional.]
AU3.WinGetHandle("windowTitle", "windowText")
[AU3.WinGetPosX("windowTitle", "windowText") | Returns the X coordinate of the window, negative numbers for minimized windows, 1 if not found. Use "windowTitle"="Program Manager" for the size of the desktop. windowText optional.]
AU3.WinGetPosX("windowTitle", "windowText")
[AU3.WinGetPosY("windowTitle", "windowText") | Returns the Y coordinate of the window, negative numbers for minimized windows, 1 if not found. Use "windowTitle"="Program Manager" for the size of the desktop. windowText optional.]
AU3.WinGetPosY("windowTitle", "windowText")
[AU3.WinGetPosHeight("windowTitle", "windowText") | Returns the height of the window, negative numbers for minimized windows, 1 if not found. Use "windowTitle"="Program Manager" for the size of the desktop. windowText optional.]
AU3.WinGetPosHeight("windowTitle", "windowText")
[AU3.WinGetPosWidth("windowTitle", "windowText") | Returns the width of the window, negative numbers for minimized windows, 1 if not found. Use "windowTitle"="Program Manager" for the size of the desktop. windowText optional.]
AU3.WinGetPosWidth("windowTitle", "windowText")
[AU3.WinGetProcess("windowTitle", "windowText") | Returns the Process ID (PID) associated with a window. windowText optional]
AU3.WinGetProcess("windowTitle", "windowText")
[AU3.WinGetState("windowTitle", "windowText") | Returns the state of a given window: 1(exists), 2(visible), 4(enabled), 8(active), 16(minimized), 32(maximized). use BitAND() to examine. windowText optional.]
AU3.WinGetState("windowTitle", "windowText")
[AU3.WinGetText("windowTitle", "windowText") | Returns the text from a window. Use WinGetText("") to get the active window's text. windowText optional.]
AU3.WinGetText("windowTitle", "windowText")
[AU3.WinGetTitle("windowTitle", "windowText") | Returns the full title from a window. Returns  0 if no title match. windowText optional.]
AU3.WinGetTitle("windowTitle", "windowText")
[AU3.WinKill("windowTitle", "windowText") | Force close a window.]
AU3.WinKill("windowTitle", "windowText")
[AU3.WinList("windowTitle", "windowText") | Returns a 2D array containing the window titles and handles. The number of entries is in element 0,0)]
AU3.WinList("windowTitle", "windowText")
AU3.WinList("[CLASS:Notepad]", "windowText")
AU3.WinList("[ALL]", "windowText")
[AU3.WinMenuSelectItem("windowTitle", "windowText", "menuName", "menuItem1", "menuItem2", "menuItem3", "menuItem4", "menuItem5", "menuItem6") | Select a menu item of a window. Use & for underlined chars: &File]
AU3.WinMenuSelectItem("windowTitle", "windowText", "menuName", "menuItem1", "menuItem2", "menuItem3", "menuItem4", "menuItem5", "menuItem6")
[AU3.WinMinimizeAll() | Minimize all windows]
AU3.WinMinimizeAll()
[AU3.WinMinimizeAllUndo() | Undo a previous WinMinimizeAll function]
AU3.WinMinimizeAllUndo()
[AU3.WinMove("windowTitle", "windowText", intX, intY, intWidth, intHeight) | Move/resize a window. has no effect on minimized windows, but works on hidden windows. If multiple windows match the criteria, the most recently active window is used. intWidth optional (default -1), intHeight optional (default -1)]
AU3.WinMove("windowTitle", "windowText", intX, intY, intWidth, intHeight)
[AU3.WinSetOnTop("windowTitle", "windowText", onTop) | Change a window's 'Always On Top' attribute. onTop = 0(normal) | 1(ontop)]
AU3.WinSetOnTop("windowTitle", "windowText", 0|1)
[AU3.WinSetState("windowTitle", "windowText", "state") | Change the state of a window. If multiple windows match the criteria, the most recently active window is used.]
AU3.WinSetState("windowTitle", "windowText", "SW_HIDE|SW_SHOW|SW_MINIMIZE|SW_MAXIMIZE|SW_RESTORE")
[AU3.WinSetTitle("windowTitle", "windowText", "title") | Change the title of a window. If multiple windows match the criteria, the title of most recently active window is changed.]
AU3.WinSetTitle("windowTitle", "windowText", "title")
[AU3.WinSetTrans("windowTitle", "windowText", level) | Set transparency of a window]
AU3.WinSetTrans("windowTitle", "windowText", 0-255)
[AU3.WinWait("windowTitle", "windowText", timeout_sec) | Pause execution of the script until the requested window exists. Returns 0(timeout) | 1(otherwise). windowText (and rest) optional]
AU3.WinWait("windowTitle", "windowText", timeout_sec)
[AU3.WinWaitActive("windowTitle", "windowText", timeout_sec) | Pause until the requested window is active. Returns 0(timeout) | 1(otherwise). windowText (and rest) optional]
AU3.WinWaitActive("windowTitle", "windowText", timeout_sec)
[AU3.WinWaitClose("windowTitle", "windowText", timeout_ms) | Pause until the requested window does not exist. Returns 0(timeout) | 1(otherwise). windowText (and rest) optional]
AU3.WinWaitClose("windowTitle", "windowText", timeout_ms)
[AU3.WinWaitNotActive("windowTitle", "windowText", timeout_ms) | Pause until the requested window is not active. Returns 0(timeout) | 1(otherwise). windowText (and rest) optional]
AU3.WinWaitNotActive("windowTitle", "windowText", timeout_ms)
; B
[Bar.Close(strBarName) | Close a bar and remove it from memory]
Bar.Close("barname")
[Bar.Format("barname", "autohide", n) | Set interval before automatic hiding to n ms. -n = toggle noautohide/autohide. 0 = noautohide]
Bar.Format("barname", "autohide", n)
[Bar.Format("barname", "back", "file.bmp") | Change the background to file.bmp]
Bar.Format("barname", "back", "file.bmp")
[Bar.Format("barname", "back2", "file.bmp") | Use back and back2 to alternate between two backgrounds each time the command is executed]
Bar.Format("barname", "back2", "file.bmp")
[Bar.Format("barname", "back", "none") | Remove the background of bar]
Bar.Format("barname", "back", "none")
[Bar.Format("barname", "position", n) | Set the bar position to the nth position]
Bar.Format("barname", "position", n)
[Bar.Format("barname", "refresh") | Close and reopen bar]
Bar.Format("barname", "refresh")
[Bar.Hide("barname") | Hide a bar but keep it in memory (for faster reshow)]
Bar.Hide("barname")
[Bar.HideShow("barname") | Hide a bar if visible; show it otherwise]
Bar.HideShow("barname")
[Bar.Keys("barname") | Ready a bar to receive keystrokes that can navigate bar buttons]
Bar.Keys("barname")
[Bar.SelectSubBar("barname") | Show a subbar]
Bar.SelectSubBar("barname")
[Bar.SelectSubBarToButton("barname") | Show a subbar aligned to a bar]
Bar.SelectSubBarToButton("barname")
[Bar.SelectSubBarToMouse("barname") | Show a subbar at the mouse]
Bar.SelectSubBarToMouse("barname")
[Bar.Show("*keyword", "barname") | Show a bar. barname is the name of the command list]
Bar.Show("*vertical|*horizontal|*fromtop|*frombottom|*fromleft|*fromright", "barname")
[Bar.Show("*move", "barname") | Show a bar and positions the mouse over the bar]
Bar.Show("*move", "barname")
[Bar.ToCursor("barname") | Temporarily move bar to text cursor and show it if hidden]
Bar.ToCursor("barname")
[Bar.ToMouse("barname") | Temporarily move bar to mouse and show it if hidden. Floating position only.]
Bar.ToMouse("barname")
[Bar.ToButton(index, "barname") | Temporarily move bar to mouse and show it if hidden. Floating position only.]
Bar.ToButton(index, "barname")
[BatteryPercent | Percent battery power left.]
BatteryPercent
[BEE.Color() | Color picker dialog. Returns RGB color string (eg."128 0 255")]
BEE.Color()
[BEE.File(save|opendialog, "fileFilter") | File open/save dialog. Returns the file path]
BEE.File(0|1, "Text Files(*.txt)|*.txt||")
BEE.File(0|1, "All Files(*.*)|*.*||")
[BEE.Font() | Font picker dialog]
BEE.Font()
fontname   = BEE.FontName()
fontheight = BEE.FontHeight()
fontcolor  = BEE.FontColor()
fontitalic = BEE.FontIA()
fontuline  = BEE.FontUA()
fontstrike = BEE.FontSA()
[BEE.TextOut("message", x, y, "fontName", fontHeight, fontWidth, italic, underline, strikeout, "textColor", "backColor", backOpacity, angle10base) | Display a message until another window is placed over. All except message optional.]
BEE.TextOut("message", x, y, "fontName", fontHeight, fontWidth, 0|1, 0|1, 0|1, "0-255 0-255 0-255", "0-255 0-255 0-255", 1|2, -3600 - 3600)
[BEE.Notice("message", x, y, "fontName", fontHeight, fontWidth, italic, underline, strikeout, "textColor", "backColor", backOpacity, textAlign, timeout_ms, windowColor, transparencyColor) | Display a message for a given time. All except message optional. textAlign = 0(left) | 1(center) | 2(right)]
BEE.Notice("message", x, y, "fontName", fontHeight, fontWidth, 0|1, 0|1, 0|1, "0-255 0-255 0-255", "0-255 0-255 0-255", 0|1|2, timeout_ms, "0-255 0-255 0-255", "0-255 0-255 0-255")
processID = BEE.NoticePID()
threadID  = BEE.NoticeTID()
[BEE.NoticeKill(threadID) | Close Notice dialog]
BEE.NoticeKill(threadID)
[BEE.NoticeHide(threadID) | Hide Notice dialog]
BEE.NoticeHide(threadID)
[BEE.NoticeShow(threadID) | Show Notice dialog]
BEE.NoticeShow(threadID)
[BEE.NoticeMove(threadID, x, y) | Move Notice dialog]
BEE.NoticeMove(threadID, x, y)
[BEE.NoticeOpacitiy(threadID, opacity, red, green, blue) | Change opacity and transparency color of Notice dialog]
BEE.NoticeOpacitiy(threadID, 0-255,  0-255, 0-255, 0-255)
[BEE.NoticeColor(threadID, "target", red, green, blue) | Change color of  Notice dialog. target = ftc(text color) | fbc(back color) | wc(window color)]
BEE.NoticeColor(threadID, "ftc|fbc|wc",  0-255, 0-255, 0-255)
[BEE.NoticeSize(threadID, fontHeight, fontWidth) | Change font size of Notice dialog]
BEE.NoticeSize(threadID, fontHeight, fontWidth)
[BEE.NoticeAttr(threadID, italic, underline, strikeout) | Change font attribute of Notice dialog]
BEE.NoticeAttr(threadID, 0|1, 0|1, 0|1)
[BEE.NoticeAlign(threadID, textAlign) | Font Notice dialog. textAlign = 0(left) | 1(center) | 2(right)]
BEE.NoticeAlign(threadID, 0|1|2)
[BEE.NoticeFont(threadID, "fontName") | Change font of Notice dialog]
BEE.NoticeFont(threadID, "fontName")
[BEE.NoticeMessage(threadID, "message") | Change the Notice message]
BEE.NoticeMessage(threadID, "message")
[BEE.TextDraw("message", x, y, "fontName", fontSize, fontStyle, gradient, "startColor", "closeColor", "outlineColor", outlineThickness, opacity, timeout_ms) | Display an outlined message for a given time. All except message optional. fontStyle = 0(regular) + 1(bold) + 2(italic) + 4(underline) + 8(strikeout), gradient = 0(horizontal) | 1(vertical) | 2(forward diagonal) | 3(backword diagonal)]
BEE.TextDraw("message", x, y, "fontName", fontSize, 0+1+2+4+8, 0|1|2|3, "0-255 0-255 0-255 0-255", "0-255 0-255 0-255 0-255", "0-255 0-255 0-255 0-255", outlineThickness,  0-255, timeout_ms)
processID = BEE.TextDrawPID
threadID  = BEE.TextDrawTID
[BEE.TextDrawKill(threadID) | Close TextDraw dialog]
BEE.TextDrawKill(threadID)
[BEE.TextDrawHide(threadID) | Hide TextDraw dialog]
BEE.TextDrawHide(threadID)
[BEE.TextDrawShow(threadID) | Show TextDraw dialog]
BEE.TextDrawShow(threadID)
[BEE.TextDrawMove(threadID, x, y) | Move TextDraw dialog]
BEE.TextDrawMove(threadID, x, y)
[BEE.TextDrawOpacity(threadID, opacity, red, green, blue) | Change opacity and transparency color of TextDraw dialog]
BEE.TextDrawOpacity(threadID, 0-255,  0-255, 0-255, 0-255)
[BEE.Photo("filepath", x, y, opacity, timeout_ms, transparencyColor) | Display an image for a given time. All except message optional.]
BEE.Photo("filepath", x, y, 0-255, timeout_ms, "0-255 0-255 0-255")
processID = BEE.PhotoPID
threadID  = BEE.PhotoTID
[BEE.PhotoKill(threadID) | Close image dialog]
BEE.PhotoKill(threadID)
[BEE.PhotoHide(threadID) | Hide image dialog]
BEE.PhotoHide(threadID)
[BEE.PhotoShow(threadID) | Show image dialog]
BEE.PhotoShow(threadID)
[BEE.PhotoMove(threadID, x, y) | Move image dialog]
BEE.PhotoMove(threadID, x, y)
[BEE.PhotoOpacity(threadID, opacity, red, green, blue) | Change opacity and transparency color of image dialog]
BEE.PhotoOpacity(threadID, 0-255,  0-255, 0-255, 0-255)
[BIGMEM.BigMem("AvailPage") | Available page memory in megabytes.]
BIGMEM.BigMem("AvailPage")
[BIGMEM.BigMem("AvailPhys") | Available physical memory in megabytes.]
BIGMEM.BigMem("AvailPhys")
[BIGMEM.BigMem("AvailVirtual") | Available virtual memory in megabytes.]
BIGMEM.BigMem("AvailVirtual")
[BIGMEM.BigMem("Percent") | Available physical memory in percent.]
BIGMEM.BigMem("Percent")
[BIGMEM.BigMem("TotalPage") | Total page memory in megabytes.]
BIGMEM.BigMem("TotalPage")
[BIGMEM.BigMem("TotalPhys") | Total physical memory in megabytes.]
BIGMEM.BigMem("TotalPhys")
[BIGMEM.BigMem("TotalVirtual") | Total virtual memory in megabytes.]
BIGMEM.BigMem("TotalVirtual")
[Break | Use to exit a For/EndFor loop without completing.]
Break
[Breakpoint | Execute script lines until this line]
;b!=
[Breakpoint with condition | The breakpoint is taken only if the expression if true.]
;b! if (expr)
[BrowserDomain | Domain in current browser window.]
BrowserDomain
[BrowserSubdomain | Domain and subdomain in current browser window.]
BrowserSubdomain
[BrowserURL("browsername") | URL in current browser window]
BrowserURL("IExplore|Netscape|Firefox|Maxthon|Mozilla")
; C
[Call("filePath@entry", args) | Runs script file given by filePath, optionally entry following lists of args.]
Call("filePath@entry", args)
[Caption | Caption (title) of current foreground window.]
Caption
[CaptionUnder | Caption of window under the mouse.]
CaptionUnder
[Case constant1, constant2 | Case for Select command any number of comma-separated constants.]
Case constant1
	Break
[Case Else | Last Case for Select command,  executed if not any of previous constants match.]
Case Else
	Break
[Case("Acronym", "string") | Creates an acronym from the first character of each word (first letters of each word).]
Case("Acronym", "string")
[Case("ToNum", "string") | Translate characters in the string to space-separated decimal equivalents.]
Case("ToNum", "string")
[Case("ToNumX", "string") | Translate characters in the string to space-separated hexadecimal equivalents.]
Case("ToNumX", "string")
[Case("FromNum", "string") | Translate space-separate decimal numbers to corresponding ASCII character.]
Case("FromNum", "string")
[Case("FromNumX", "string") | Translate space-separate hexadecimal numbers to corresponding ASCII character.]
Case("FromNumX", "string")
[Case("Lower", "string") | Convert to lower case.]
Case("Lower", "string")
[Case("Sentence", "string") | Convert to sentence case.]
Case("Sentence", "string")
[Case("Title", "string") | Convert to title case.]
Case("Title", "string")
[Case("Upper", "string") | Convert to upper case.]
Case("Upper", "string")
[CB("entry", args) | Returns a string that can be used as a callback in dialogs or events using the call function.]
CB("entry", args)
[CBx("entry", args) | Shortform of CB(scriptfolder ++ '/' ++ scriptname ++ '@entry', args)]
CBx("entry", args)
[CDCurTrack | Current CD track.]
CDCurTrack
[CDLastTrack | Last CD track.]
CDLastTrack
[Cl.AddProperties("clname", proplines) | Same as NewProperties, except that properties are added to already existing ones.]
Cl.AddProperties("clname", proplines)
[Cl.ButtonFromPoint(x, y) | Returns zero-based button index under screen coordinates x,y. -1 if not button.]
Cl.ButtonFromPoint(x, y)
[Cl.ButtonUnderMouse() | If PowerPro bar is under mouse, returns zero-based button index. -1 otherwise.]
Cl.ButtonUnderMouse()
[Cl.Close("clname") | Closes bar.]
Cl.Close("clname")
[Cl.Compact() | Compacts PowerPro internal memory used to store strings related to command lists.]
Cl.Compact()
[Cl.CopyProperties(clnameFrom, clnameTo) | Copies all properties from first cl to the second.]
Cl.CopyProperties(clnameFrom, clnameTo)
[Cl.Create("clname") | Creates a new Command List with name given by the clname.]
Cl.Create("clname")
[Cl.Create("clname", 1) | If list clname exists, all of its items are removed, for re-use.]
Cl.Create("clname", 1)
[Cl.Exists("clname") | Returns 1=command list exists in PCF, 2=exists but is not part of the PCF, 0 otherwise.]
Cl.Exists("clname")
[Cl.Export("clname", "filepath", append) | Export clname to filepath. append = 0(overwrite) | 1(append to end of file)]
Cl.Export("clname", "filepath", 0|1)
[Cl.Get("clname") | Returns handle to existing clname (can be used to call other cl services), empty string otherwise.]
Cl.Get("clname")
[Cl.GetBackColor("clname") | Returns background RGB color for ordinary buttons.]
Cl.GetBackColor("clname")
[Cl.GetBackground("clname") | Returns background file name.]
Cl.GetBackground("clname")
[Cl.GetBarHandle(("clname") | Gets window handle for showing bar. This can then be used with win plugin.]
Cl.GetBarHandle("clname")
[Cl.GetClFlag("clname", flagname) | Returns 1 or 0 indicating whether or not the flagname is set for the configuration.]
Cl.GetClFlag("clname", "ToolTips|BarSize|Shadow|MouseThrough|AutoShowBar|MenuIconSmall|ToolTipsMenuText|MenuNoMaxText|TopMost|SameSize|Vertical|3DFrame|Border|No3DColor|TextUnder|TextRotate|TextCenter|RightIcon|TextVertical|BumpWithin|BumpWithin|NoFlicker|NoFlicker|HoverClickMenu|HoverClick|ActiveOnlyThis|Activesubbar|CheckMenu")
[Cl.GetFolderButtons("clname") | Returns the folder buttons file.]
Cl.GetFolderButtons("clname")
[Cl.GetGradient("clname") | Returns the gradient setting 0 to 255.]
Cl.GetGradient("clname")
[Cl.GetHeight("clname") | Returns the default button height.]
Cl.GetHeight("clname")
[Cl.GetHideAfter("clname") | Returns the interval for hiding a list.]
Cl.GetHideAfter("clname")
[Cl.GetHoffset("clname") | Returns the horizontal offset.]
Cl.GetHoffset("clname")
[Cl.GetHoverColor("clname") | Returns background RGB color for hovered-over buttons.]
Cl.GetHoverColor("clname")
[Cl.GetHoverGradient("clname") | Returns the gradient settings as integer 0 to 7.]
Cl.GetHoverGradient("clname")
[Cl.GetHoverTextColor("clname") | Returns text RGB color for hovered-over buttons.]
Cl.GetHoverTextColor("clname")
[Cl.GetIconSize("clname") | Returns the icon size, 0 for none.]
Cl.GetIconSize("clname")
[Cl.GetLastBar() | Returns name of bar where last button was pressed; returns '' if no button yet pressed.]
Cl.GetLastBar()
[Cl.GetLastMenu() | Returns name of command list last displayed as menu.]
Cl.GetLastMenu()
[Cl.GetLastMenuMouse() | Returns R if right command selected from last menu; L otherwise.]
Cl.GetLastMenuMouse()
[Cl.GetLastMenuSel() | Returns index of last command list item selected from last displayed menu; returns '' if nothing selected.]
Cl.GetLastMenuSel()
[Cl.GetLastMouse("barname") | Returns L, R, or M to indicate which mouse button clicked the last button.]
Cl.GetLastMouse("barname")
[Cl.GetLastPressed("barname") | Returns the last pressed button.]
Cl.GetLastPressed("barname")
[Cl.GetLastPressedType("barname") | Returns P=pressed, D=dropped, or h=hovered.]
Cl.GetLastPressedType("barname")
[Cl.GetMaxText("clname") | Returns the maximum text length setting for a command list.]
Cl.GetMaxText("clname")
[Cl.GetNumActive("clname") | Returns the maximum number of active buttons.]
Cl.GetNumActive("clname")
[Cl.GetPosition("clname") | Returns the position name as used in 'Properties' section of the text configuration ini files.]
Cl.GetPosition("clname")
[Cl.GetPressColor("clname") | Returns background RGB color for pressed buttons.]
Cl.GetPressColor("clname")
[Cl.GetPressGradient("clname") | Returns the gradient settings as integer 0-7.]
Cl.GetPressGradient("clname")
[Cl.GetPressTextColor("clname") | Returns text RGB color for pressed buttons.]
Cl.GetPressTextColor("clname")
[Cl.GetRoundBar("clname") | Returns the rounding for bars or buttons.]
Cl.GetRoundBar("clname")
[Cl.GetRoundBtn("clname") | Returns the rounding for bars or buttons.]
Cl.GetRoundBtn("clname")
[Cl.GetRoundWhich("clname") | Returns the rounding for bars or buttons.]
Cl.GetRoundWhich("clname")
[Cl.GetShowIfBump("clname") | Returns the show-if-bump edge name as used in 'Properties' section of the text configuration ini files.]
Cl.GetShowIfBump("clname")
[Cl.GetSlideFrom("clname") | Returns the slide-from direction as used in 'Properties' section of the text configuration ini files.]
Cl.GetSlideFrom("clname")
[Cl.GetTextColor("clname") | Returns text RGB color for ordinary buttons.]
Cl.GetTextColor("clname")
[Cl.GetTransparent("clname") | Returns the transparency setting 0 to 255.]
Cl.GetTransparent("clname")
[Cl.GetVOffset("clname") | Returns the vertical offset.]
Cl.GetVoffset("clname")
[Cl.Hide("clname") | Hides bar.]
Cl.Hide("clname")
[Cl.HideShow("clname") | Reverses hidden/shown status of bar.]
Cl.HideShow("clname")
[Cl.Import("filepath") | Import command list stored in strFilePath (ini format). Same as Configure.ImportCL("filepath").]
Cl.Import("filepath")
[Cl.IsPCF("clname") | Returns 1 or 0 indicating whether or not the command list is kept in the PCF.]
Cl.IsPCF("clname")
[Cl.KeepInPCF(keepflag) | Changes whether command list is saved in PCF, keepflag=1 means it is saved.]
Cl.KeepinPcf(keepflag)
[Cl.Keys("clname") | Readies bar to receive navigation keys.]
Cl.Keys("clname")
[Cl.Length("clname") | Returns the zero-based number of elements in the command list.]
Cl.Length("clname")
[Cl.NameFromIndex(i) | Returns name of i th clist, zero-based numbering; order is arbitrary.]
Cl.NamefromIndex(i)
[Cl.NewProperties("clname", proplines) | Replaces properties for clname with those given in proplines.]
Cl.NewProperties("clname", "\r;;+
Format1 = properties \r;;+
Format2 = properties \r;;+
Format3 = properties \r;;+
Format4 = properties \r;;+
")

;; ===========================================================================
;; ALL PROPERTIES: (Replace above "properties" with below keywords seperated by space then remove this list)
 Back: 0-255 0-255 0-255
 Hover: 0-255 0-255 0-255
 Pressed: 0-255 0-255 0-255
 Text: 0-255 0-255 0-255
 HoverText: 0-255 0-255 0-255
 PressText: 0-255 0-255 0-255
 FontName = fontname
 FontInfo = Weight:400 Size:8
 HoverGradient: 0-7
 HoverGradientReverse
 PressGradient: 0-7
 PressGradientReverse
 Tooltips
 TTItem0
 UseTheme
 IconSize: None|8|12|16|24|32|64|96|133|256
 MaxText: x
 MenuNoMaxText
 MenuIconSmall
 BarIcons
 ToolTipsMenuText
 BackBMP = *|None|filepath
 Position: Floating|Locked|LeftCaption|MiddleCaption|RightCaption|LeftEdgeCurrentSize|RightEdgeCurrentSize|TopEdgeCurrentSize|BottomEdgeCurrentSize|Taskbar|TaskbarNoStart|GixedTopRight|GixedTopRightOffset|GixedTopCenter|GixedTopLeft|GixedBottomLeft|GixedBottomCenter|GixedBottomRight|LeftOfActive|RightOfActive|BelowActive|AboveActive|GixedRightCenter|GixedCenterLeft|LeftEdgeFullScreen|RightEdgeFullScreen|TopEdgeFullScreen|BottomEdgeFullScreen|BelowMenuBar|BelowMenuBar2
 RLeft: -1000000 - 1000000
 RTop: -1000000 - 1000000
 RRight: -1000000 - 1000000
 RBottom: -1000000 - 1000000
 Height: x
 HOffset: x/-x
 VOffset: x/-x
 HideAfter: x
 ShowIfBump: None|NearestEdge|TopEdge|BottomEdge|RightEdge|LeftEdge
 SlideFrom: FromLeft|GromRight|Horizontal|Vertical|GromBottom|GromTop|None
 RoundBar: 1-7
 RoundWhich: 0-4
 Marker
 BumpWithin
 RoundBtn: 0-7
 Border
 3DFrame
 No3DColor
 NoFlicker
 Vertical
 HoverClick
 HoverClickMenu
 Flat
 FlatFlat
 SameSize
 AllVDesks
 TopMost
 BarSize
 PixelBlendOver
 PixelBlendInto
 MouseThrough
 RightIcon
 Shadow
 ActiveSubBar
 Transparent: 0-255
 Gradient: 0-255
 VerticalGradient
 TextVertical
 TextCenter
 TextRotate
 TextUnder
 Monitor: x
 ActiveOnlyThis
 Raised
 CheckMenu
 AutoShowBar
 Left: x
 Top: x
 Right: x
 Bottom: x
;; ===========================================================================
[Cl.NumCLists | Returns number of command lists (including both PCF and nonPCF).]
Cl.NumCLists
[Cl.ReDisplay("clname") | If clname is a bar, redraws it without closing and opening the bar.]
Cl.ReDisplay("clname")
[Cl.Refresh("clname") | If clname is a bar, redraws it by closing and opening the bar.]
Cl.Refresh("clname")
[Cl.RemoveAll("clname") | Remove all items in the command list. clname closed but not destroyed.]
Cl.RemoveAll("clname")
[Cl.SavePCF() | Writes current PCF, ensuring any changes to command lists from the original PCF are saved.]
Cl.SavePCF()
[Cl.SelectSubBar("clname", "@subbarname") | Show named subbar; the @ must be present.]
Cl.Selectsubbar("clname", "@subbarname")
[Cl.SetAsAutorun("clname") | Set clname as the source for autorun command list.]
Cl.SetAsAutorun("clname")
[Cl.SetAsTray("clname") | Set clname as the source for tray icons.]
Cl.SetAsTray("clname")
[Cl.SetBackground("clname", "filepath", noclose) | Set the background to the filepath. noclose = 1 (do not close and re-open bar)]
Cl.SetBackground("clname", "filepath", 0|1)
[Cl.SetHideAfter("clname", interval) | Set the interval for hiding a list. Use 0 for no hide. Use -interval to toggle 'interval/no hide'.]
Cl.SetHideAfter("clname", interval)
[Cl.SetMaxtext("clname", charcount) | Set the maximum number of characters shown on each button or menu item.]
Cl.SetMaxtext("clname", charcount)
[Cl.SetRect("clname", left, top ,right, bottom) | Set position of command list (floating or locked). If already showing, it is moved/resized.]
Cl.SetRect("clname", left, top ,right, bottom)
[Cl.Show("clname") | Show command list as bar.]
Cl.Show("clname")
[Cl.ShowMenu("clname", position) | Show command list as menu. The position argument can be omitted.]
Cl.ShowMenu("clname", "Offset x y|Screen x y|CenterUnderMouse|CenterScreen|HorButton|HorButtonCenter|VerButton|Cursor")
[Cl.ToMouse("clname") | Move bar to mouse. Shows it if not already showing.]
Cl.ToMouse("clname")
[Cl.AddLeft("clname", item_index_or_id, "command", "parameters", "work", "how") | Add the specified command to the commands already present in item]
Cl.AddLeft("clname", itemindex|"itemid", "command", "parameters", "work", "how")
[Cl.AddMiddle("clname", item_index_or_id, "command", "parameters", "work", "how") | Add the specified command to the commands already present in item]
Cl.AddMiddle("clname", itemindex|"itemid", "command", "parameters", "work", "how")
[Cl.AddRight("clname", item_index_or_id, "command", "parameters", "work", "how") | Add the specified command to the commands already present in item]
Cl.AddRight("clname", itemindex|"itemid", "command", "parameters", "work", "how")
[Cl.ClearLeft("clname", item_index_or_id) | Clear left command information.]
Cl.ClearLeft("clname", itemindex|"itemid")
[Cl.ClearMiddle("clname", item_index_or_id) | Clear middle command information.]
Cl.ClearMiddle("clname", itemindex|"itemid")
[Cl.ClearRight("clname", item_index_or_id) | Clear right command information.]
Cl.ClearRight("clname", itemindex|"itemid")
[Cl.CopyFrom("toclname", toindex, "fromclname", fromindex) | Copy information of the item fromindex of fromclname to toindex of toclname]
Cl.CopyFrom("toclname", toindex, "fromclname", fromindex)
[Cl.GetActiveButtons("clname") | Get number of currently visible active buttons.]
Cl.GetActiveButtons("clname")
[Cl.GetBackColor("clname", item_index_or_id) | Returns the back color as RGB values separated by spaces.]
Cl.GetBackColor("clname", itemindex|"itemid")
[Cl.GetFontName("clname", item_index_or_id) | Returns the font name if item has own font.]
Cl.GetFontName("clname", itemindex|"itemid")
[Cl.GetHeight("clname", item_index_or_id) | Returns item height.]
Cl.GetHeight("clname", itemindex|"itemid")
[Cl.GetID("clname", item_index_or_id) | Returns the ID of the item.]
Cl.GetID("clname", itemindex|"itemid")
[Cl.GetIDIndex("clname", "itemid") | Returns the zero-based numeric index of the item in clname with id.]
Cl.GetIDIndex("clname", "itemid")
[Cl.GetIconFile("clname", item_index_or_id) | Returns the icon file name of the item.]
Cl.GetIconFile("clname", itemindex|"itemid")
[Cl.GetIconNumber("clname", item_index_or_id) | Returns the zero-based icon number of the item.]
Cl.GetIconNumber("clname", itemindex|"itemid")
[Cl.GetItem("clname", idorindex) | Returns a handle which can be used to call services on cl items.]
Cl.GetItem("clname", idorindex)
[Cl.GetLabel("clname", item_index_or_id) | Returns the label of the item.]
Cl.GetLabel("clname", itemindex|"itemid")
[Cl.GetLabelIndex("clname", label) | Returns the zero-based numeric index of the item in clname with label.]
Cl.GetLabelIndex("clname", label)
[Cl.GetLabelValue("clname", item_index_or_id) | Returns the label from the specified item; if it is an *Info label, then the current value is returned.]
Cl.GetLabelValue("clname", itemindex|"itemid")
[Cl.GetLeftCmd("clname", item_index_or_id, i) | Returns the ith command of the item Left Command.]
Cl.GetLeftCmd("clname", itemindex|"itemid", i)
[Cl.GetLeftHow("clname", item_index_or_id, i) | Returns the ith how start of the item Left Command. Returns normal, max, min, hide or traymin.]
Cl.GetLeftHow("clname", itemindex|"itemid", i)
[Cl.GetLeftOnTop("clname", item_index_or_id) | Returns setting of on top checkbox for Left command 1 if set, '' otherwise).]
Cl.GetLeftOnTop("clname", itemindex|"itemid")
[Cl.GetLeftParam("clname", item_index_or_id, i) | Returns the ith command parameter of the item Left Command.]
Cl.GetLeftParam("clname", itemindex|"itemid", i)
[Cl.GetLeftSwitchTo("clname", item_index_or_id) | Returns setting of switch to if active checkbox for left command 1 if set, '' otherwise).]
Cl.GetLeftSwitchTo("clname", itemindex|"itemid")
[Cl.GetLeftWork("clname", item_index_or_id, i) | Returns the ith work directory of the item Left Command.]
Cl.GetLeftWork("clname", itemindex|"itemid", i)
[Cl.GetMiddleCmd("clname", item_index_or_id, i) | Returns the ith command of the item Middle Command.]
Cl.GetMiddleCmd("clname", itemindex|"itemid", i)
[Cl.GetMiddleHow("clname", item_index_or_id, i) | Returns the ith how start of the item Middle Command. Returns normal, max, min, hide or traymin.]
Cl.GetMiddleHow("clname", itemindex|"itemid", i)
[Cl.GetMiddleOnTop("clname", item_index_or_id) | Returns setting of on top checkbox for Right command 1 if set, '' otherwise).]
Cl.GetMiddleOnTop("clname", itemindex|"itemid")
[Cl.GetMiddleParam("clname", item_index_or_id, i) | Returns the ith command parameter of the item Middle Command.]
Cl.GetMiddleParam("clname", itemindex|"itemid", i)
[Cl.GetMiddleSwitchTo("clname", item_index_or_id) | Returns setting of switch to if active checkbox for left command 1 if set, '' otherwise).]
Cl.GetMiddleSwitchTo("clname", itemindex|"itemid")
[Cl.GetMiddleWork("clname", item_index_or_id, i) | Returns the ith work directory of the item Middle Command.]
Cl.GetMiddleWork("clname", itemindex|"itemid", i)
[Cl.GetParentList("clname", string) | Returns a handle to the parent clist for the item. Normally used in long expressions.]
Cl.GetParentList("clname", string)
[Cl.GetRightCmd("clname", item_index_or_id, i) | Returns the ith command of the item Right Command.]
Cl.GetRightCmd("clname", itemindex|"itemid", i)
[Cl.GetRightHow("clname", item_index_or_id, i) | Returns the ith how start of the item Right Command. Returns normal, max, min, hide or traymin.]
Cl.GetRightHow("clname", itemindex|"itemid", i)
[Cl.GetRightOnTop("clname", item_index_or_id) | Returns setting of on top checkbox for Middle command 1 if set, '' otherwise).]
Cl.GetRightOnTop("clname", itemindex|"itemid")
[Cl.GetRightParam("clname", item_index_or_id, i) | Returns the ith command parameter of the item Right Command.]
Cl.GetRightParam("clname", itemindex|"itemid", i)
[Cl.GetRightSwitchTo("clname", item_index_or_id) | Returns setting of switch to if active checkbox for left command 1 if set, '' otherwise).]
Cl.GetRightSwitchTo("clname", itemindex|"itemid")
[Cl.GetRightWork("clname", item_index_or_id, i) | Returns the ith work directory of the item Right Command.]
Cl.GetRightWork("clname", itemindex|"itemid", i)
[Cl.GetTextColor("clname", item_index_or_id) | Returns text the color as RGB values separated by spaces.]
Cl.GetTextColor("clname", itemindex|"itemid")
[Cl.GetTooltip("clname", item_index_or_id) | Returns the tooltip of the item.]
Cl.GetTooltip("clname", itemindex|"itemid")
[Cl.GetTooltipValue("clname", item_index_or_id) | Returns the tool tip from the specified item; if it is an *Info tool tip, then the current value is returned.]
Cl.GetTooltipValue("clname", itemindex|"itemid")
[Cl.GetWidth("clname", item_index_or_id) | Returns item width.]
Cl.GetWidth("clname", itemindex|"itemid")
[Cl.Insert("clname", 0) | Inserts a new item at the start of the list; assigns resulting handle.]
Cl.Insert("clname", 0)
[Cl.Insert("clname", Cl.Length("clname")) | Inserts a new item at the end of the list]
Cl.Insert("clname", Cl.Length("clname"))
[Cl.Insert("clname", itemID) | Inserts a new item before the one with id itemID; assigns resulting handle.]
Cl.Insert("clname", itemID)
[Cl.IsEnabled("clname", item_index_or_id) | Returns 1 if item is enabled, 0 otherwise.]
Cl.IsEnabled("clname", itemindex|"itemid")
[Cl.IsIconVisible("clname", item_index_or_id) | Returns 1 if icon is visible, 0 otherwise.]
Cl.IsIconVisible("clname", itemindex|"itemid")
[Cl.IsVisible("clname", item_index_or_id) | Returns 1 if item is visible, 0 otherwise.]
Cl.IsVisible("clname", itemindex|"itemid")
[Cl.LockTo("clname", onoff, "clnameTarget", n1, n2, n3, n4, n5, n6, n7, n8) | onoff = 0 (remove lock), onoff = 1 (lock clname to clnameTarget using eight position values)]
Cl.LockTo("clname", 0|1, "clnameTarget", n1, n2, n3, n4, n5, n6, n7, n8)
[Cl.Remove("clname", item_index_or_id) | Removes the item. Returns a handle if successful.]
Cl.Remove("clname", itemindex|"itemid")
[Cl.RunLeft("clname", item_index_or_id) | Runs the left command of item]
Cl.RunLeft("clname", itemindex|"itemid")
[Cl.RunMiddle("clname", item_index_or_id) | Runs the middle command of item]
Cl.RunMiddle("clname", itemindex|"itemid")
[Cl.RunRight("clname", item_index_or_id) | Runs the right command of item]
Cl.RunRight("clname", itemindex|"itemid")
[Cl.GetIconAbove("clname", item_index_or_id) | Returns offset to the text rectangle from the top of the button.]
Cl.GetIconAbove("clname", itemindex|"itemid")
[Cl.GetIconLeft("clname", item_index_or_id) | Returns offset to icon from left of button; overrides IconPos.]
Cl.GetIconLeft("clname", itemindex|"itemid")
[Cl.GetIconPos("clname", item_index_or_id) | Returns offset to the text rectangle from the top of the button.]
Cl.GetIconPos("clname", itemindex|"itemid")
[Cl.GetIconTop("clname", item_index_or_id) | Returns offset to icon from left of button; overrides IconPos.]
Cl.GetIconTop("clname", itemindex|"itemid")
[Cl.GetImageLeft("clname", item_index_or_id) | Returns starting offset from the left of the image when tiling the image.]
Cl.GetImageLeft("clname", itemindex|"itemid")
[Cl.GetImageTop("clname", item_index_or_id) | Returns starting offset from the top of the image when tiling the image.]
Cl.GetImageTop("clname", itemindex|"itemid")
[Cl.GetNoText("clname", item_index_or_id) | Returns offset to the text rectangle from the top of the button.]
Cl.GetNoText("clname", itemindex|"itemid")
[Cl.GetTextHeight("clname", item_index_or_id) | Returns height of the text rectangle.]
Cl.GetTextHeight("clname", itemindex|"itemid")
[Cl.GetTextHor("clname", item_index_or_id) | Returns offset to the text rectangle from the top of the button.]
Cl.GetTextHor("clname", itemindex|"itemid")
[Cl.GetTextLeft("clname", item_index_or_id) | Returns offset to the text rectangle from the left of the button.]
Cl.GetTextLeft("clname", itemindex|"itemid")
[Cl.GetTextTop("clname", item_index_or_id) | Returns offset to the text rectangle from the top of the button.]
Cl.GetTextTop("clname", itemindex|"itemid")
[Cl.GetTextVer("clname", item_index_or_id) | Returns offset to the text rectangle from the top of the button.]
Cl.GetTextVer("clname", itemindex|"itemid")
[Cl.GetTextWidth("clname", item_index_or_id) | Returns width of the text rectangle.]
Cl.GetTextWidth("clname", itemindex|"itemid")
[Cl.SetIconAbove("clname", item_index_or_id) | Set offset to the text rectangle from the top of the button.]
Cl.SetIconAbove("clname", itemindex|"itemid")
[Cl.SetIconLeft("clname", item_index_or_id) | Set offset to icon from left of button; overrides IconPos.]
Cl.GetIconLeft("clname", itemindex|"itemid")
[Cl.SetIconPos("clname", item_index_or_id) | Set offset to the text rectangle from the top of the button.]
Cl.GetIconPos("clname", itemindex|"itemid")
[Cl.SetIconTop("clname", item_index_or_id) | Set offset to icon from left of button; overrides IconPos.]
Cl.GetIconTop("clname", itemindex|"itemid")
[Cl.SetImageLeft("clname", item_index_or_id) | Set starting offset from the left of the image when tiling the image.]
Cl.GetImageLeft("clname", itemindex|"itemid")
[Cl.SetImageTop("clname", item_index_or_id) | Set starting offset from the top of the image when tiling the image.]
Cl.GetImageTop("clname", itemindex|"itemid")
[Cl.SetNoText("clname", item_index_or_id) | Set offset to the text rectangle from the top of the button.]
Cl.GetNoText("clname", itemindex|"itemid")
[Cl.SetTextHeight("clname", item_index_or_id) | Set height of the text rectangle.]
Cl.GetTextHeight("clname", itemindex|"itemid")
[Cl.SetTextHor("clname", item_index_or_id) | Set offset to the text rectangle from the top of the button.]
Cl.GetTextHor("clname", itemindex|"itemid")
[Cl.SetTextLeft("clname", item_index_or_id) | Set offset to the text rectangle from the left of the button.]
Cl.GetTextLeft("clname", itemindex|"itemid")
[Cl.SetTextTop("clname", item_index_or_id) | SetsSet offset to the text rectangle from the top of the button.]
Cl.GetTextTop("clname", itemindex|"itemid")
[Cl.SetTextVer("clname", item_index_or_id) | Set offset to the text rectangle from the top of the button.]
Cl.GetTextVer("clname", itemindex|"itemid")
[Cl.SetTextWidth("clname", item_index_or_id) | Set width of the text rectangle.]
Cl.GetTextWidth("clname", itemindex|"itemid")
[Cl.GetCtrlHandle("clname", item_index_or_id) | Returns the window handle of a control associated with the button on a toolbar.]
Cl.GetCtrlHandle("clname", itemindex|"itemid")
[Cl.GetCtrlValue("clname", item_index_or_id) | Returns the text displayed by the control; returns 0, 1, 2 for checkboxes.]
Cl.GetCtrlValue("clname", itemindex|"itemid")
[Cl.SetCtrlURL("clname", item_index_or_id, url) | ie control attached to the specified button is navigated to the specified URL.]
Cl.SetCtrlURL("clname", itemindex|"itemid", url)
[Cl.SetCtrlValue("clname", item_index_or_id, "value") | Set the text displayed by the control; use 0, 1, 2 for checkboxes.]
Cl.SetCtrlValue("clname", itemindex|"itemid", "value")
[Cl.SetCtrlFocus("clname", item_index_or_id) | Set the keyboard focus to the button and its control.]
Cl.SetCtrlFocus("clname", itemindex|"itemid")
[Cl.AddCtrlListItem("clname", item_index_or_id, "text", pos) | Adds text at position pos of the combobox control dropdown. Omit pos to add to end.]
Cl.AddCtrlListItem("clname", itemindex|"itemid", "text", pos)
[Cl.ClearCtrlList("clname", item_index_or_id) | Removes all items in the combobox control dropdown.]
Cl.ClearCtrlList("clname", itemindex|"itemid")
[Cl.SetBackColor("clname", item_index_or_id, "colorParameters") | Set the item's background color (only affects buttons, not menu items)]
Cl.SetBackColor("clname", itemindex|"itemid", "colorParameters")
[Cl.SetEnabled("clname", item_index_or_id, enabled) | If enabled is zero or empty, makes the specified item disabled, otherwise enabled.]
Cl.SetEnabled("clname", itemindex|"itemid", 0|1)
[Cl.SetFont("clname", item_index_or_id, "fontname", fontsize) | Set the font as specified. if fontname is empty, the own font is removed.]
Cl.SetFont("clname", itemindex|"itemid", "fontname", fontsize)
[Cl.SetLeftSwitchTo("clname", item_index_or_id, enabled) | Set SwitchTo checkbox for left command.]
Cl.SetLeftSwitchTo("clname", itemindex|"itemid", 0|1)
[Cl.SetMiddleSwitchTo("clname", item_index_or_id, enabled) | Set SwitchTo checkbox for middle command.]
Cl.SetMiddleSwitchTo("clname", itemindex|"itemid", 0|1)
[Cl.SetRightSwitchTo("clname", item_index_or_id, enabled) | Set SwitchTo checkbox for right command.]
Cl.SetRightSwitchTo("clname", itemindex|"itemid", 0|1)
[Cl.SetHeight("clname", item_index_or_id, height) | Set the item height.]
Cl.SetHeight("clname", itemindex|"itemid", height)
[Cl.SetHover("clname", item_index_or_id, hover) | hover = 0 (disabled) | 1 (hover clicks left) | 2 (hover clicks middle) | 3 (hover clicks right)]
Cl.SetHover("clname", itemindex|"itemid", 0|1|2|3)
[Cl.SetIcon("clname", item_index_or_id, "filepath", iconindex) | Set the icon to the specified path and zero-based iconindex]
Cl.SetIcon("clname", itemindex|"itemid", "filepath", iconindex)
[Cl.SetIconVisible("clname", item_index_or_id, visible) | If visible is zero or empty, makes the icon from the specified item invisible, otherwise visible.]
Cl.SetIconVisible("clname", itemindex|"itemid", 0|1)
[Cl.SetID("clname", item_index_or_id, "id") | Set the ID for the specified item.]
Cl.SetID("clname", itemindex|"itemid", "id")
[Cl.SetLeftNormalUser("clname", item_index_or_id, enabled) | Set Normal User checkbox.]
Cl.SetLeftNormalUser("clname", itemindex|"itemid", 0|1)
[Cl.SetMiddleNormalUser("clname", item_index_or_id, enabled) | Set Normal User checkbox.]
Cl.SetMiddleNormalUser("clname", itemindex|"itemid", 0|1)
[Cl.SetRightNormalUser("clname", item_index_or_id, enabled) | Set Normal User checkbox.]
Cl.SetRightNormalUser("clname", itemindex|"itemid", 0|1)
[Cl.SetLabel("clname", item_index_or_id, "label") | Set the label for the specified item.]
Cl.SetLabel("clname", itemindex|"itemid", "label")
[Cl.SetLeftOnTop("clname", item_index_or_id, enabled) | Set OnTop checkbox for left command.]
Cl.SetLeftOnTop("clname", itemindex|"itemid", 0|1)
[Cl.SetMiddleOnTop("clname", item_index_or_id, enabled) | Set OnTop checkbox for middle command.]
Cl.SetMiddleOnTop("clname", itemindex|"itemid", 0|1)
[Cl.SetRightOnTop("clname", item_index_or_id, enabled) | Set OnTop checkbox for right command.]
Cl.SetRightOnTop("clname", itemindex|"itemid", 0|1)
[Cl.SetMultiline("clname", item_index_or_id, enabled) | Set multi-line setting for button label]
Cl.SetMultiline("clname", itemindex|"itemid", 0|1)
[Cl.SetTextColor("clname", item_index_or_id, "colorParameters") | Set the item's text color (only affects buttons, not menu items)]
Cl.SetTextColor("clname", itemindex|"itemid", "colorParameters")
[Cl.SetTooltip("clname", item_index_or_id, "tooltip") | Set the tool tip for the specified item.]
Cl.SetTooltip("clname", itemindex|"itemid", "tooltip")
[Cl.SetVisible("clname", item_index_or_id, visible) | If vis is zero or empty, makes the specified item invisible, otherwise visible.]
Cl.SetVisible("clname", itemindex|"itemid", 0|1)
[Cl.SetWidth("clname", item_index_or_id, width) | Set the item width.]
Cl.SetWidth("clname", itemindex|"itemid", width)
[Cl.SwapWith(("clname", indexto, indexfrom) | Exchanges the information on two items on the same list.]
Cl.SwapWith(("clname", indexto, indexfrom)
[Cl.TaskbarBarUpdate(flag) | Automatic updates of Taskbar bar from cl functions, 0=Stop 1=Restart -1=Reverse]
Cl.TaskbarBarUpdate(flag)
[Class.Define("classname", "baseclass", "public vars : private vars", minvarsize) | Define a class.]
Class.Define("classname", "baseclass", "public vars : private vars", minvarsize)
[Class.Get("classname") | Returns a handle to the class with the name.]
Class.Get("classname")
[Class.Verbose(1) | Ensures 0 objects by class at unload.]
Class.Verbose(1)
[Class.Verbose(2) | Shows trace message for every allocation and free.]
Class.Verbose(2)
[Class.Check | Ensures 0 objects by class.]
Class.Check
[Clip | Returns first line of clipboard text.]
Clip
[Clip.ShortDate | Put date on clipboard in short format.]
Clip.ShortDate
[Clip.LongDate | Put date on clipboard in long format.]
Clip.LongDate
[Clip.Time | Put time on clipboard.]
Clip.Time
[CLIP.Copy | Copy selected text in active window to clipboard.]
CLIP.Copy
[CLIP.Cut | Cut selected text in active window to clipboard.]
CLIP.Cut
[CLIP.Paste | Paste clipboard to active window.]
CLIP.Paste
[CLIP.Append(var) | Append text to the clipboard.]
CLIP.Append(var)
[CLIP.BMPToFile("filepath") | Write the bitmap on the clipboard to the file path.]
CLIP.BMPToFile("filepath")
[CLIP.Clear | Clear the clipboard.]
CLIP.Clear
[CLIP.FromFile("filepath") | Copy file to clipboard.]
CLIP.FromFile("filepath")
[CLIP.FromFileAppend("filepath") | Append file to clipboard.]
CLIP.FromFileAppend("filepath")
[CLIP.Get | Returns the text on the clipboard.]
CLIP.Get
[CLIP.GetHTML | Returns HTML format on clipboard (as PowerPro text string)]
CLIP.GetHTML
[CLIP.GetRTF | Returns rtf text on clipboard (as PowerPro text string)]
CLIP.GetRTF
[CLIP.GetSaveLoadFolder() | Returns default folder for clip.save and clip.load.]
CLIP.GetSaveLoadFolder()
[CLIP.HasFormat("format") | Returns 1 if the specified format is available on the clipboard.]
CLIP.HasFormat("BITMAP|DIB|DIBV5|DIF|ENHMETAFILE|HDROP|LOCALE|METAFILEPICT|OEMTEXT|PALETTE|RIFF|SYLK|TEXT|WAVE|TIFF|UNICODETEXT")
[CLIP.IgnoreNext | Next item added to clipboard will not be captured by PowerPro clip capture.]
CLIP.IgnoreNext
[CLIP.Length | Returns length of clipboard.]
CLIP.Length
[CLIP.ListFormats | Returns a blank-separated list of the formats on the clipboard.]
CLIP.ListFormats
[CLIP.Load("filename", "folderpath") | Load clipboard contents saved by clip.save.]
CLIP.Load(("filename", "folderpath")
[CLIP.Save("filename", "folderpath") | Save contents of clipboard in all formats to filename in folderpath.]
CLIP.Save("filename", "folderpath")
[CLIP.Set("text", capture) | Set the clipboard; If capture=1 this clip will be captured by PowerPro]
CLIP.Set("text", 0|1)
[CLIP.SetHTML("htmltext", plain, capture, onlyhtml) | Set the clipboard to the html text. capture=1 (clip captured by PowerPro), onlyhtml=1 (only the html element of the clipboard is changed)]
CLIP.SetHTML("htmltext", plain, 0|1, 0|1)
[CLIP.SetRTF("rtftext", plain, capture, onlyrtf) | Set the clipboard to the rtf text. capture=1 (clip captured by PowerPro), onlyrtf=1 (only the rtf element of the clipboard is changed)]
CLIP.SetRTF("rtftext", plain, 0|1, 0|1)
[CLIP.SetSaveLoadFolder("folderpath") | Set default folder for clip.save and clip.load.]
CLIP.SetSaveLoadFolder("folderpath")
[CLIP.SetPaste("text") | Set text to the clipboard, then send Ctrl-V.]
CLIP.SetPaste("text")
[CLIP.ToFile("filepath", noErr) | Put clipboard into file filepath. noErr=1 (no error message)]
CLIP.ToFile("filepath", 0|1)
[CLIP.ToFileAppend("filepath", noErr) | Append clipboard to file filepath. noErr=1 (no error message)]
CLIP.ToFileAppend("filepath", 0|1)
[ClipCaptured | Predefined command list script name. Run as a script whenever a clip is captured. (only, if "Run ClipCaptured" is checked in the GUI Control dialog)]
ClipCaptured
[ClipTrackOn | Returns 1 if clip tracking is on; 0 otherwise]
ClipTrackOn
[COM.Config(ini_file_path) | specify a configuration ini file]
COM.Config(ini_file_path)
[COM.Create_Object("prog_id") | create a COM object]
COM.Create_Object("Word.Application|Excel.Application|Scripting.FileSystemObject|Python.Interpreter|Internet Explorer|WScript.Network")
[COM.Destroy(object_handle) | tell the COM plugin to let go of a previously issued object_handle]
COM.Destroy(object_handle)
[COM.End_With() | terminate COM.With]
COM.End_With()
[COM.Enumerator_Next(enumerator_handle) | return the next item in the collection from which the enumerator_handle was obtained]
COM.Enumerator_Next(enumerator_handle)
[COM.Enumerator_Reset(enumerator_handle) | reset the enumerator to the beginning of the collection it counts]
COM.Enumerator_Reset(enumerator_handle)
[COM.Error_Dialog_Off | turn PowerPro script error dialog off]
COM.Error_Dialog_Off
[COM.Error_Dialog_On | turn PowerPro script error dialog on ]
COM.Error_Dialog_On
[COM.Get_Accessible_Children(handle_to_accessible_object, name, role) | Returns either a, or all of, the children of an IAccessible object]
COM.Get_Accessible_Children(handle_to_accessible_object, name, role)
[COM.Get_Accessible_Object(hwnd, objectType) | will attempt to obtain an IAccessible interface]
COM.Get_Accessible_Object(hwnd, objectType)
[COM.Get_Enumerator(object_handle) | get an enumerator for a COM collection]
COM.Get_Enumerator(object_handle)
[COM.Get_Interface("source") | get an interface to a COM object, can retrieve a pointer to a COM object's interface, using the object's CLSID and IID]
COM.Get_Interface("CLSID|IID")
[COM.Get_Object("source") | return an object_handle, attaching to a running COM server if there is one]
COM.Get_Object("prog_id|file_name|window_handle")
[COM.Get_Object_Description(object_handle, option(s), function) | return a list of an object's functions and properties]
COM.Get_Object_Description(object_handle, option(s), function)
[COM.Get_Object_Description(object_handle, option(s), function) | return a list of an object's functions and properties]
COM.Get_Object_Description(IAccessible_handle, option(s),  childID)
[COM.Get_Property(object_handle, property, arg1, arg2) | get a property of a COM object]
COM.Get_Property(object_handle, property, arg1, arg2)
[COM.Get_Property_Typed(object_handle, property, type_spec, arg1, arg2) | get a property of a COM object]
COM.Get_Property_Typed(object_handle, property, type_spec, arg1, arg2)
[COM.LocalCopy(handle) | prevent automatic release of local handles]
COM.LocalCopy(handle)
[COM.Method(object_handle, method, arg1, arg2) | invoke a method on a COM object]
COM.Method(object_handle, method, arg1, arg2)
[COM.Method_Typed(object_handle, method, type_spec, arg1, arg2) | invoke a method on a COM object]
COM.Method_Typed(object_handle, method, type_spec, arg1, arg2)
[COM.Next(enumerator_handle) | return the next item in the collection from which the enumerator_handle was obtained]
COM.Next(enumerator_handle)
[COM.Release(object_handle) | tell the COM plugin to let go of a previously issued object_handle]
COM.Release(object_handle)
[COM.Release_All | release all handles to all COM objects]
COM.Release_All
[COM.Reset(enumerator_handle) | reset the enumerator to the beginning of the collection it counts]
COM.Reset(enumerator_handle)
[COM.Return_Unicode_Strings(flag)) | set whether handles to unicode strings are recognised]
COM.Return_Unicode_Strings(0|1)
[COM.Returns_Nothing | determine what if anything all other services return via the calling form]
COM.Returns_Nothing()
[COM.Returns_Status | determine what if anything all other services return via the calling form]
COM.Returns_Status()
[COM.Returns_Values | determine what if anything all other services return via the calling form]
COM.Returns_Values()
[COM.Set_Arg_Types(type_spec, persistent) | specify types of parameters of subsequent call(s) to method, Get_Property, Set_Property]
COM.Set_Arg_Types(type_spec, persistent)
COM.Set_Arg_Types("retry"|"noretry")
[COM.Set_Property(object_handle, property, arg1, arg2) | set a property of a COM object]
COM.Set_Property(object_handle, property, arg1, arg2)
[COM.Set_Property_Typed(object_handle, property, type_spec, arg1, arg2, new_value) | set a property of a COM object]
COM.Set_Property_Typed(object_handle, property, type_spec, arg1, arg2, new_value)
[COM.Set_Skipped_Arg_Marker(marker) | override the default "~~" whose meaning is "skip this parameter"]
COM.Set_Skipped_Arg_Marker(marker)
[COM.Unicode_Args_Allowed(flag)) | set whether handles to unicode strings are recognised]
COM.Unicode_Args_Allowed(0|1)
[COM.Unicode_Status() | Returns a string of two characters, first 0|1 indicates if unicode arguments are allowed, second 0|1 indicates if BSTRs are returned as handles to unicode strings]
COM.Unicode_Status()
[COM.Unload | releases all handles to com objects then remove com.dll]
COM.Unload
[COM.Version | return plugin version number as four digit number]
COM.Version
[COM.With(object_handle, sub_object_specifier) | set the context for subsequent calls to Method, Method_Typed, Get_Property, Get_Property_Typed, Set_Property, Set_Property_Typed services]
COM.With(object_handle, sub_object_specifier)
[Configure.CommandLists | Start pproconf at the CommandLists tab.]
Configure.CommandLists
[Configure.CommandLists("?barname") | Start pproconf at the CommandLists tab at specified bar. Use (?*"?my bar"*) with spaces in bar names  ]
Configure.CommandLists("?barname")
[Configure.Desktop | Start pproconf at the Desktop tab.]
Configure.Desktop
[Configure.ExportHot("filepath") | Export the hot keys in the current PCF file.]
Configure.ExportHot("filepath")
[Configure.ExportHotMem("filepath") | Export the hot keys in memory.]
Configure.ExportHotMem("filepath")
[Configure.ExportSched("filepath") | Export scheduled events from the current PCF file.]
Configure.ExportSched("filepath")
[Configure.ExportSchedMem("filepath") | Export scheduled events in memory.]
Configure.ExportSchedMem("filepath")
[Configure.GUI | Start pproconf at the GUI tab.]
Configure.GUI
[Configure.ImportCL("filepath") | Import .ini configuration files into running PowerPro. Not saved in the PCF file.]
Configure.ImportCL("filepath")
[Configure.ImportHot("filepath") | Import hot keys/mouse actions. Not saved in the PCF file.]
Configure.ImportHot("filepath")
[Configure.ImportSched("filepath") | Read the scheduled events from text. Not saved in the PCF file.]
Configure.ImportSched("filepath")
[Configure.Key/Mouse | Start pproconf at the Key/Mouse tab.]
Configure.Key/Mouse
[Configure.Media | Start pproconf at the Media tab.]
Configure.Media
[Configure.NewReminderMessage | Add a new scheduled alarm message.]
Configure.NewReminderMessage
[Configure.Rehook | Reset PowerPro's keyboard and mouse hooks.]
Configure.Rehook
[Configure.Restart | Restart PowerPro.]
Configure.Restart
[Configure.Scheduler | Start pproconf at the Scheduler tab.]
Configure.Scheduler
[Configure.Setup | Start pproconf at the main Setup tab.]
Configure.Setup
[Configure.Timers | Start pproconf at the Timers tab.]
Configure.Timers
[Configure.WriteAlltoPCF("filepath") | Write all of configuration, including any imported text files, to a PCF file.]
Configure.WriteAlltoPCF("filepath")
[Context | Predefined command list script name. Used for items which PowerPro will add to Explorer's right click context menus.]
Context
[Context | Set to 0 by PowerPro to indicate the first file ...]
Context
[ContextLast | Set to 1 by PowerPro to indicate the last file is being processed, of a group of selected files to which an Explorer context menu item has been applied.]
ContextLast
[ContextFolder | Predefined command list script name. Used for items which PowerPro will add to Explorer's right click context menus.]
ContextFolder
[Continue | Skip the rest of the iteration of a loop and continue with the next iteration.]
Continue
[ConvertBase("string"|number, fromBase, toBase) | Convert number base. If first argument is number, it will be stored by PowerPro as base 10 string]
ConvertBase("string"|number, fromBase, toBase)
[CRC32("string") | CRC32 of string; use === to compare crc's to force string comparison.]
CRC32("string")
[Ctrl | Returns pressed keys: 1(left Ctrl), 2(right Ctrl), 3(both)]
Ctrl
[CurrentDir | Path to working folder of current foreground window.]
CurrentDir
; D
[Date | Returns todays date as 8 digit string yyyymmdd.]
Date
[DATE.Get | Displays a calendar and returns selected date. Returns 0 if Cancel pressed.]
DATE.Get
[DATE.AddDays(yyyymmdd, daycount) | Adds daycount days to date yyyymmdd, returns resulting date. Date.AddDays(20021031, 2) results 20021102.]
DATE.AddDays(yyyymmdd, daycount)
[DATE.AddSeconds(yyyymmdd, seccount) | Adds a given number of seconds to a date]
DATE.AddSeconds(yyyymmdd, seccount)
[DATE.Get | Displays a calendar and returns selected date. Returns 0 if Cancel pressed.]
DATE.Get
[DATE.Now | Returns todays date and time as 14 digit string "yyyymmddhhmmss"]
DATE.Now
[DATE.Sub(date1, date2) | Returns the number of days between date1 and date2]
DATE.Sub(yyyymmdd, yyyymmdd)
[DATE.SubSeconds(date1, date2) | Subtracts two dates, given the number of seconds between them.]
DATE.SubSeconds(yyyymmdd, yyyymmdd)
[DATE.Today | Returns todays date, same as PowerPro keyword Date]
DATE.Today
[DATE.Unload | Unload the plugin]
DATE.Unload
[DATE.WeekDay(yyyymmdd) | Returns the day of the week for a the date; Sunday is day 0.]
DATE.WeekDay(yyyymmdd)
[DATE.WeekNum | Returns the week number in the year. (ISO standard)]
DATE.WeekNum
[DATE.YearDay(yyyymmdd) | Returns the day in the year for a date.]
DATE.YearDay(yyyymmdd)
[DayofWeek | Returns day of week as single digit (Sunday is 0, Monday 1, ...)]
DayofWeek
[DayofYear | Returns day of year]
DayofYear
[DefaultPrinter | Name of default printer]
DefaultPrinter
[DeskEmpty | 1 if current vdesk empty; 0 otherwise]
DeskEmpty
[DeskName | Name of current virtual desktop.]
DeskName
[DeskNum | Number 1-9 of current virtual desktop.]
DeskNum
[Desktop.HideIcons | Hide all icons on desktop.]
Desktop.HideIcons
[Desktop.HideShowIcons | Hide icons if visible, show them if hidden.]
Desktop.HideShowIcons
[Desktop.HideShowTaskBar | Hide TaskBar if visible, show if hidden.]
Desktop.HideShowTaskBar
[Desktop.HideShowWindows | Hide all desktop windows, show them when next executed.]
Desktop.HideShowWindows
[Desktop.HideTaskBar | ]
Desktop.HideTaskBar
[Desktop.IconTextColor | Set color of text under desktop icons.]
Desktop.IconTextColor
[Desktop.MinShowWindows | Minimize all desktop windows, show them when next executed.]
Desktop.MinShowWindows
[Desktop.Resolution(x, y, colordepth, freq, savetoregistry) | Change the display resolution, color depth, and refresh frequency.]
Desktop.Resolution(x, y, 4|8|16|24, freq, |"NoSave")
[Desktop.Resolution(x1, y1, x2, y2, savetoregistry) | Toggle the display resolution between two settings.]
Desktop.Resolution(x1, y1, x2, y2, |"NoSave")
[Desktop.RestoreIcons | Restore saved desktop icon positions.]
Desktop.RestoreIcons
[Desktop.SaveIcons | Save desktop icon positions.]
Desktop.SaveIcons
[Desktop.SaveIconsGrid(horizspacing, vertspacing, "filename.IconPos") | Align desktop icon positions to a grid and save them. (use 'Advanced' dialog to set PowerPro should always restore saved positions when resolution changes)]
Desktop.SaveIconsGrid(horizspacing, vertspacing, "filename.IconPos")
[Desktop.SetWorkArea | Set size of work area on desktop screen: that is the size of maximized window.]
Desktop.SetWorkArea
[Desktop.ShowIcons | Show desktop icons.]
Desktop.ShowIcons
[Desktop.ShowTaskBar | ]
Desktop.ShowTaskBar
[Desktop.ShowTaskBarAutoHide | Show taskbar; rehide when mouse is moved off taskbar and taskbar is not foreground.]
Desktop.ShowTaskBarAutoHide
[Desktop.TransIconText | Make transparent background for desktop icon text.]
Desktop.TransIconText
[DIALOG.Browse_For_File(dialogHandle, type_and_options, "initialFolderPath", "title", "defaultExtension", "filter", "defaultFileName", "varNameROState") | Dispay "File Open"/"File Save As" dialog. Returns full path to the file chosen. All parameters optional)
DIALOG.Browse_For_File(dialogHandle, "Open|Save|Multiple CreatePrompt|FileCanBeAbsent|PathCanBeAbsent|HideReadonly|Readonly|AllowOverwrite|NoChangeDir|NoDereferenceLinks", "initialFolderPath", "title", "TXT|DOC|BAK|...", "*.TXT;*.DOC;*.BAK;...", "defaultFileName", "varNameROstate")
[DIALOG.Change_Style(dialogHandle|ctrlID, "styles", addstyle) | Change the styles applied to a control/dialog after a dialog is created or run. addstyle = 0(specified styles are removed) | 1(specified styles are added)]
DIALOG.Change_Style(dialogHandle|ctrlID, "SysMenu|MinBox|MaxBox|Centre|CentreMouse|NoBorder|NoDlgFrame|ThickFrame|3D|ModalFrame|Hidden|Tool|ToolWin|Topmost|Draggable", 0|1)
[DIALOG.Choose_Font(dialogHandle|ctrlID, "var_for_colour") | Dispay font choice dialog. Returns a font description compatible with the <font_spec> parameter]
DIALOG.Choose_Font(dialogHandle|ctrlID, "var_for_colour")
[DIALOG.Clear(dialogHandle/ctrlID, item) | Clear dialog. item optional]
DIALOG.Clear(dialogHandle|ctrlID, item)
[DIALOG.Config("filePath_INI") | set location of configuration ini file]
DIALOG.Config("filePath_INI")
[DIALOG.Destroy(dialogHandle|controlhandle) | kill off a dialog and it's data structure]
DIALOG.Destroy(dialogHandle|controlhandle)
[DIALOG.Destroy_Window(dialogHandle, valuetoreturn) | kill off a dialog's window]
DIALOG.Destroy_Window(dialogHandle, valuetoreturn)
[DIALOG.DestroyAll() | terminate all dialogs and their data structures]
DIALOG.DestroyAll()
[DIALOG.Define(x, y, width, height, "caption", "styles", "scriptname", "arg", "events", "actiononclose", "iconpath", iconnumber, "fontspec", "rightclickcommand") | Define a dialog's properties. styles (and rest) optional]
DIALOG.Define(x, y, width, height, "caption", "SysMenu|MinBox|MaxBox|Centre|CentreMouse|NoBorder|NoDlgFrame|ThickFrame|3D|ModalFrame|Hidden|Tool|ToolWin|Topmost|Draggable", "scriptname", "arg", "events", "actiononclose", "iconpath", iconnumber, "fontspec", "rightclickcommand")
[DIALOG.Define_Control(dialogHandle, x, y, width, height, "controltype", "name", textorvar, "styles", "scriptname", "arg", "events", foreground, background, id, "fontspec", "tooltip", "tooltipstyle", "rightclickcommand") | Add a control and it's properties to an existing dialog.]
DIALOG.Define_Control(dialogHandle, x, y, width, height, "Button|Group|CheckBox|3State|RadioButton|Static|EditBox|ListBox|ComboBox|ScrollBar|Spinner|Slider|Progress|DateTime|MonthCal|ActiveX|StatusBar|TabControl|TreeView|RichEdit|Scintilla|ListView|Animation", "name", textorvar, "styles", "scriptname", "arg", "events", foreground, background, "OK|Cancel|Escapable", "fontspec", "tooltip", "Always|Balloon|Centre|SlashIsNL|ShowAfter|ShowAfter:nn|StayOpen:nn|Width:nn", "rightclickcommand")
[DIALOG.Define_Set(dialogHandle, "name", "controltypes", "includedcontrolsanded", "includedcontrolsored", "excludedcontrols") | Creates a set of controls. Returns a handle to the set. name (and rest) optional]
DIALOG.Define_Set(dialogHandle, "name", "controltypes", "includedcontrolsanded", "includedcontrolsored", "excludedcontrols")
[DIALOG.Enable(dialogHandle|ctrlID, action) | Enables/disables a dialog or control.]
DIALOG.Enable(dialogHandle|ctrlID, 0|1)
[DIALOG.Create(dialogHandle, modalmode, ownerhandle) | A prepared dialog comes into existence. modalmode (and rest) optional]
DIALOG.Create(dialogHandle, 0|1|2, ownerhandle)
[DIALOG.Create("definitionfile", modalmode, ownerhandle) | Creates a dialog from a definition file. modalmode (and rest) optional]
DIALOG.Create("definitionfile", 0|1|2, ownerhandle)
[DIALOG.Get_Base(dialogHandle, "iconpath", iconnumber) | Returns index base (0|1-default)]
DIALOG.Get_Base
[DIALOG.Get_LastClicked() | Returns handle of the last control/dialog which responded to a user action by a user-defined mouse click/left click/keyboard shortcut]
DIALOG.Get_LastClicked()
[DIALOG.Get_Value(dialogHandle|ctrlID, "property") | Gets some value from a control or dialog. property optional]
DIALOG.Get_Value(dialogHandle|ctrlID, "Tool|Font|Fonthandle|Hwnd|ID|Type|Name|PrevCtrl|Owner")
[DIALOG.Help | opens the help file associated with the dialog plugin]
DIALOG.Help
[DIALOG.Make_Ctrl_Handle(handle, ctrlID) | Returns a handle to control.]
DIALOG.Make_Ctrl_Handle(handle, ctrlID)
[DIALOG.Returns_Nothing() | Determine what the calls return via 'returnval = DIALOG.service'.]
DIALOG.Returns_Nothing()
[DIALOG.Returns_Status() | Determine what the calls return via 'returnval = DIALOG.service'.]
DIALOG.Returns_Status()
[DIALOG.Returns_Values() | Determine what the calls return via 'returnval = DIALOG.service'.]
DIALOG.Returns_Values()
[DIALOG.RGB(red, green, blue) | get RBG COLORREF from red, green, blue values]
DIALOG.RGB(0-255, 0-255, 0-255)
[DIALOG.Run(dialogHandle, showtype, modalmode, ownerhandle) | Run a dialog that is been defined and populated with controls. showtype (and rest) optional]
DIALOG.Run(dialogHandle, showtype, modalmode, ownerhandle)
[DIALOG.Run("definitionfile", showtype, modalmode, ownerhandle) | Create a dialog from a dialog definition file and run it. showtype (and rest) optional]
DIALOG.Run("definitionfile", showtype, modalmode, ownerhandle)
[DIALOG.RunDialog() | Invoke dialog.]
DIALOG.RunDialog()
[DIALOG.Send_Message(dialogHandle|ctrlID, "message", wParam, lParam, "lParam_type", redraw) | Send a message to a control/dialog]
DIALOG.Send_Message(dialogHandle|ctrlID, "message", wParam, lParam, "String|Number|C_DLLPluginHandle", |1)
[DIALOG.Set_Base(dialogHandle, "iconpath", iconnumber) | Set index base. Default 1]
DIALOG.Set_Base(0|1)
[DIALOG.Set_Colour(target, "tooltip|tool|tip", foreground, background) | set control's foreground, background colours]
DIALOG.Set_Colour(target, "tooltip|tool|tip", foreground, background)
[DIALOG.Set_Focus(dialogHandle|ctrlID) | Switch focus to a particular dialog or control.]
DIALOG.Set_Focus(dialogHandle|ctrlID)
[DIALOG.Set_Font(dialogHandle|ctrlID, "font", tooltip_flag) | Change dialog's/control's font]
DIALOG.Set_Font(dialogHandle|ctrlID, "font", "|T")
[DIALOG.Set_Icon(dialogHandle, "iconpath", iconnumber) | change the dialog icon]
DIALOG.Set_Icon(dialogHandle, "iconpath", iconnumber)
[DIALOG.Set_Image(targethandle, "imgpath", iconnumber) | set a static control's image]
DIALOG.Set_Image(targethandle, "imgpath", iconnumber)
[DIALOG.Set_Position(dialogHandle|ctrlID, x, y, width, height) | Change position/dimensions of dialog/control]
DIALOG.Set_Position(dialogHandle|ctrlID, x, y, width, height)
[DIALOG.Set_Range(targethandle, min, max) | set range for spinner control]
DIALOG.Set_Range(targethandle, min, max)
[DIALOG.Set_Range(targethandle, min, max, scrollslidepagesize) | set range, page size for scrollbar and slider controls]
DIALOG.Set_Range(targethandle, min, max, scrollslidepagesize)
[DIALOG.Set_Range(targethandle, min, max, progressstep) | set range, step progressbar control]
DIALOG.Set_Range(targethandle, min, max, progressstep)
[DIALOG.Set_Response(target, scriptpath, command_arg, events|mouse_event|sys_command|"tray"|"trayicon") | change command, args, events for control or dialog]
DIALOG.Set_Response(target, scriptpath, command_arg, events|"Left|Middle|Right|Mouse4|Mouse5"|"Close|Size|Move|Minimize|Maximize|Restore|Default"|"tray"|"trayicon")
[DIALOG.Set_ToolTip(ctrlID, "text", "style", "font", "scriptname", "arg", "forecolour", "backcolour", delay, "title", "icon") | Set tooltip of controls. text (and rest) optional]
DIALOG.Set_ToolTip(ctrlID, "text", "style", "font", "scriptname", "arg", "forecolour", "backcolour", delay, "title", "icon")
[DIALOG.Set_Value(dialogHandle|ctrlID, "property") | Set the a value of a control or the caption of a dialog. property optional]
DIALOG.Set_Value(dialogHandle|ctrlID, "Tool|Font|Fonthandle|Hwnd|ID|Type|Name|PrevCtrl|Owner")
[DIALOG.Show(ctrlID, showtype) | Show/hide a control.]
DIALOG.Show(ctrlID, "Show/Hide")
[DIALOG.Show(dialogHandle, "showtype") | Change display state of dialog (should be created or run already)]
DIALOG.Show(dialogHandle, "Show|Hide|Restore|Minimize|Maximize|Normal|Goreground|TrayIcon|TrayMin|TrayDel")
[DIALOG.Show(dialogHandle, "traystate", "scriptname", "arg", "mouseaction") | Change running displays state. scriptname (and rest) optional ]
DIALOG.Show(dialogHandle, "TrayMin|TrayIcon", "scriptname", "arg", "mouseaction")
[DIALOG.UnLoad | Remove plugin from memory.]
DIALOG.UnLoad
[DIALOG.Version | Returns the plugin version number as four digit number.]
DIALOG.Version
[DialupName | ]
DialupName
[Disk | Drive letter of running PowerPro path without :]
Disk
[DiskSpace("keyword", "drive") | Returns drive usage, drive is any drive letter like c:]
DiskSpace("kfree|kuser|ksize|mfree|muser|msize", "c:")
[Do("filePath", "params", "workFolderPath", howstart) | Execute an external command. workfolder (and rest) optional]
Do("filePath", "params", "workFolderPath", "Max|Min|SwitchTo|NormalUser|Topmost|Hidden|TrayMin")
[Do(ppcmd.action(params)) | Execute a built in command using Expression Syntax.]
Do(ppcmd.action(params))
[Do("ppcmd", "action and params", "keywords") | Execute a built in command using Literal Syntax.]
Do("ppcmd", "action and params", "keywords")
[DunIdle | ]
DunIdle
[DunRate | ]
DunRate
; E
[Empty | Returns 1 if string is empty. Same as string.Length==0]
string.Empty
[ENDFUNCTION | Stop execution of the script/function.]
ENDFUNCTION
[Env("environmentVariableName") | Value of environment variable]
Env("environmentVariableName")
[Esc(?+string+, ?+c+) | The characters of string are processed as if c is the escape character.]
Esc(?+string+, ?+c+)
[Eval("string") | Evaluates string as an expression and returns results.]
Eval("string")
[EVENT.Count(e) | Returns the number of intervals remaining for an event scheduled with a count. Same as e.Count]
EVENT.Count(e)
[EVENT.CountThis | Returns the number of intervals remaining for the event. Used in the command assigned to an event when it is created.]
EVENT.CountThis
[EVENT.Create(interval, repeat, command, expr, maxtimes) | Execute command every sec.(if optional expr true, execute maxtimes)]
EVENT.Create(interval, repeat, command, expr, maxtimes)
[EVENT.Createms(interval, repeat, command, expr, maxtimes) | Same as EVENT.Create, only interval in milliseconds. The minimum is 20 ms.]
EVENT.Createms(interval, repeat, command, expr, maxtimes)
[EVENT.Destroy(e) | Removes event e and returns 0. Same as e.Destroy]
EVENT.Destroy(e)
[EVENT.DestroyAll | Removes all active events.]
EVENT.DestroyAll
[EVENT.DestroyThis | Removes the command. Used in the command assigned to an event when it is created.]
EVENT.DestroyThis
[EVENT.Exists(e) | Returns 1 if e is a valid event; 0 otherwise. Same as e.Exists]
EVENT.Exists(e)
[EVENT.Message(timeout_sec, "command", "message", "title", ontop, x, y) | Create a message box, command executes when timeout or with StartNow button]
EVENT.Message(timeout_sec, "command", "message", "title", 0|1, x, y)
[EVENT.Ran(e) | Returns the number of command executions for the event, including the current one, if an execution is underway. Same as e.Ran]
EVENT.Ran(e)
[EVENT.RanThis | May be used only in the command assigned to an event when it is created. Returns the number of command executions for the event, including the current one.]
EVENT.RanThis
[EVENT.Remaining(e) | Returns the number of cmd executions remaining based on the maxtimes. Same as e.Remaining]
EVENT.Remaining(e)
[EVENT.RemainingThis | Returns the number of command executions remaining based on the maxtimes. Used only in the command assigned to an event when it is created.]
EVENT.RemainingThis
[EVENT.This | Returns the event handle. Used in the command assigned to an event when it is created.]
EVENT.This
[Exec.Alarms("On|Off|Reverse") | Enable or disable schedular.]
Exec.Alarms("On|Off|Reverse")
[Exec.AutoPress | Learn or unlearn a window type to be clicked. Used to learn new types of windows for mouse stop/press]
Exec.AutoPress
[Exec.AutoScroll | Start automatic scrolling.]
Exec.AutoScroll
[Exec.BrowseRun | Shows a file open dialog, the selected file is immediately executed.]
Exec.BrowseRun
[Exec.BottomMost(n) | If n not 0, all non-topmost bars will be bottommost.]
Exec.BottomMost(n)
[Exec.Calendar | Show a calendar. Use mouse or arrow keys to navigate.]
Exec.Calendar
[Exec.CalcCalendar | Date calculations. Shows two dates/calendars.]
Exec.CalcCalendar
[Exec.CD("action") | CD playing actions]
Exec.CD("Play|Stop|PauseResume|Eject|Close|Next|Previous")
[Exec.ChangeConfiguration("filepath") | Change to configuration stored in new PCF file, if the new filepath not supplied, it will be prompted.]
Exec.ChangeConfiguration("filepath")
[Exec.ClearRecent | Clear recent documents folder.]
Exec.ClearRecent
[Exec.ClearRecentExplorer | Clear list of windows shown by *Menu Explorer.]
Exec.ClearRecentExplorer
[Exec.CommandLine | Show a tiny command line to enter a command to run.]
Exec.CommandLine
[Exec.ContextMenu | Show right click menu of window under mouse.]
Exec.ContextMenu
[Exec.Debug("action") | Debug separate (secondary) PowerPro processes.]
Exec.Debug("Common|AutoShow|CommandStart")
[Exec.Debug("action Off") | Stop debugging separate (secondary) PowerPro processes.]
Exec.Debug("Common|AutoShow|CommandStart Off")
[Exec.Disable | Disable PowerPro until mouse moved over a bar or hot key used.]
Exec.Disable
[Exec.EmptyRecycleBin | Empty RecycleBin]
Exec.EmptyRecycleBin
[Exec.Explorer "folderpath" | Open a folder in Explorer, special folders like Control Panel may be used.]
Exec.Explorer "folderpath"
[Exec.Explorer2 "folderpath" | Open a folder in 2-pane Explorer, special folders like Control Panel may be used.]
Exec.Explorer2 "folderpath"
[Exec.FindComputer | Show find computer dialog.]
Exec.FindComputer
[Exec.FindFiles | Show the Windows find files dialog.]
Exec.FindFiles
[Exec.HideWindow | Show a dialog allowing you to pick a window to hide.]
Exec.HideWindow
[Exec.HotKeys("action") | Suspend or re-activate hotkeys.]
Exec.HotKeys("On|Off|Reverse")
[Exec.IgnoreExplorerRestat(n) | If n=1, explorer restarts do not cuase a PowerPro restart.]
Exec.IgnoreExplorerRestat(0|1)
[Exec.LogKeys "filepath|=filepath" | Log keystrokes to file. Blank stops, filepath starts, =filepath toggles start/stop.]
Exec.LogKeys "filepath|=filepath"
[Exec.MaxExplorerMenuWidth(n) | Set max width of label in 'Menu Explorer'.]
Exec.MaxExplorerMenuWidth(n)
[Exec.MaxWindowsHook(action) | action = 0(Suspend windowshooks) | 10(Resume windowshooks)]
Exec.MaxWindowsHook(0|10)
[Exec.Monitor("action") | Suspend or re-activate repeated running of monitor command list.]
Exec.Monitor("On|Off|Reverse")
[Exec.Mute | Mute sounds, run again to reverse.]
Exec.Mute
[Exec.NewFolder | Create a new file folder.]
Exec.NewFolder
[Exec.OnError("action") | Error Handling. action (several seperated by space) = none|file (Write to file ErrorLog.txt only - in .pcf folder)| display (on screen messages only)| both (Write to file and display on screen)| hook (Run command list HookErrors)| unhook (Do not run command list)| clear (clear _LastError_ global variable - same as _LastError_ = "").]
Exec.OnError("Display|Gile|Both|None|Hook|UnHook|Clear")
[Exec.Print | Print file using associated program.]
Exec.Print
[Exec.Prompt(resultflagno, "text") | Display a Yes/No dialog with text and set resultflagno to 0(no), 1(yes)]
Exec.Prompt(resultflagno, "text")
[Exec.Prompt(outputVar, "text") | Display a Yes/No/Cancel dialog and set outputVar to 0(no), 1(yes), 2(cancel)]
Exec.Prompt(outputVar, "text")
[Exec.RefreshEnvironment | Refresh all environment variables from registry, does not delete variables which are deleted (NT or later only).]
Exec.RefreshEnvironment
[Exec.RefreshImage | Refresh in memory copy of the image file used in skin or as bar/menu background.]
Exec.RefreshImage
[Exec.RestoreLastMin | Restore last minimized window.]
Exec.RestoreLastMin
[Exec.SchedulerAdd | Add a new scheduled event. Specify date, time and either a command or text.]
Exec.SchedulerAdd
[Exec.ScriptCache("On/Off/Clear") | Turn on/off caching of scripts in memory or clear the cache. Off/Clear stop all running scripts.]
Exec.ScriptCache("On|Off|Clear")
[Exec.ScriptDebug(n) | n = -1(reverse debugging state) | 0(debugging off) | 1(debugging on}]
Exec.ScriptDebug(-1|0|1)
[Exec.ScriptDebug("Suspend") | Suspend debugging.]
Exec.ScriptDebug("Suspend")
[Exec.ScriptTrace("action keywords") | Trace script execution performance by listing the execution time of each line.]
Exec.ScriptTrace("On|Off|Reverse Header|New|NoBuffer|NoAutoClose")
[Exec.ScrollWindow | Scroll the window under the mouse.]
Exec.ScrollWindow
[Exec.ScrollWithMouse | Start manual scrolling.]
Exec.ScrollWithMouse
[Exec.SetRegex("string") | Set the default for global versus single match/replace of Regex.]
Exec.SetRegex("OneMatch|Global|OneMatchOnce|Sep=x")
[Exec.ScrollWindow | Scroll the window under the mouse.]
Exec.ScrollWindow
[Exec.ScrollWithMouse | Start manual scrolling.]
Exec.ScrollWithMouse
[Exec.SetAutoMinMemory(interval, minmemory, maxmemory) | Control how PowerPro Set its memory. Default Exec.SetAutoMinMemory(1, -1, -1).]
Exec.SetAutoMinMemory(interval, minmemory, maxmemory)
[Exec.SetBrowser("brwsr") | Set default browser for BrowserURL function.]
Exec.SetBrowser("IExplore|Netscape|Firefox|Maxthon|Mozilla")
[Exec.SetEnv("environmentVariableName", "value") | Set environment variable to provided value.]
Exec.SetEnv("environmentVariableName", "value")
[Exec.ShowBarInfo | Show info on bars and display monitors. See a list of displays, their names/numbers.]
Exec.ShowBarInfo
[Exec.StandardConfiguration | If >Setup>Advanced>'Use standard configuration' is not checked, outputs an error message, stops all scripts.]
Exec.StandardConfiguration
[Exec.SuspendScripts(1) | Suspend PCF-based scripts until successful reconfigure or call with suspendscipts(0).]
Exec.SuspendScripts(1)
[Exec.Tile(strCaption) | Tiles active windows. r=rows, c=columns, t=equal-sized rectangles.]
Exec.Tile(strCaption)
[Exec.TraceKey | Show/stop each key press and release in a debug window (not for Windows Vista)]
Exec.TraceKey
[Exec.ToFile("filepath", "text") | Write a single line of text to a log file.]
Exec.ToFile("filepath", "text")
[Exec.ToFolder("folder") | Opens a folder in explorer or file dialog if either is the foreground window. Otherwise opens a new explorer window.]
Exec.ToFolder("folderpath")
[Exec.VolumeAll n | Set volume for all playback, n is 0 to 255. Use + or - in front of n to adjust relative to current setting.]
Exec.VolumeAll 0-255
[Exec.VolumeWav n | Set .wav volume; n is 0 to 15. Use + or - in front of number to adjust relative to current setting (not for Windows Vista).]
Exec.VolumeWav 0-15
[Exec.WheelLimit n ModsOnly | Limit max.mouse wheel speed to every n milliseconds. Optional ModsOnly to have speed limit for hot keys with mod keys only]
Exec.WheelLimit n ModsOnly
[Exec.WindowInfo | Shows/hides a small window showing mouse position and window size.]
Exec.WindowInfo
[EXEFileName | File name (no path, no .exe) of EXE file for current foreground window.]
EXEFileName
[EXEFullPath | Full path to EXE name for current foreground window.]
EXEFullPath
; F
[File.CommandRandom("commandpath", "filepath", "args") | Run a DOS command with a randomly selected file as a parameter. (filepath must contain wildcards like *.*)]
File.CommandRandom("commandpath", "filepath", "args")
[File.Copy("sourcefilepath", "destinfilepath") | Copy one file path to a second path, use wildcards to copy many files.]
File.Copy("sourcefilepath", "destinfilepath")
[File.CopyRandom("sourcefilepath", "destinfilepath")| Copy a randomly selected file to a specified file path. (filepath must contain wildcards like *.*)]
File.CopyRandom("sourcefilepath", "destinfilepath")
[File.Delete("filepath") | Delete a file, use wildcards to delete a set of files.]
File.Delete("filepath")
[File.DeleteNoRecycle("filepath") | Delete a file without putting it in the Recycle Bin.]
File.DeleteNoRecycle("filepath")
[File.DeleteOld(days, "folderspath") | Delete files in a folder older than specified number of days.]
File.DeleteOld(days, "folderpath")
[File.ExtChange("filepath", "action") | Change, remove, or add a file extension. -= remove extension, +ext=add extension, ext=replace current extension]
File.ExtChange("filepath", "-|+ext|ext")
[File.Move("sourcefilepath", "destinfilepath") | Move files to another folder]
File.Move("sourcefilepath", "destinfilepath")
[File.Rename("sourcefilepath", "destinfilepath") | Rename one file path to another, can be used to move files to another folder.]
File.Rename("sourcefilepath", "destinfilepath")
[File.RunRandom("filepath") | Run a randomly selected file.]
File.RunRandom("filepath")
[FILE.AllDrives | Returns multiline string, a line per valid drive. Use Line function to work with each drive.]
FILE.AllDrives
[FILE.AllFiles("path", "", subfolders, pumpflag, inclhidden) | Count files. subfolders= 0(path) | 1(path + all subfolders) | 2(files and folders) | 3(files and folders + all subfolders | 4(folders) | 5(folders + all subfolders)]
FILE.AllFiles("path", "", "0|1|2|3|4|5", pumpflag, 0|1)
[FILE.AllFiles("path", "Size", subfolders, pumpflag, inclhidden) | Total size of files (Bytes). subfolders= 0(path) | 1(path + all subfolders) | 2(files and folders) | 3(files and folders + all subfolders | 4(folders) | 5(folders + all subfolders)]
FILE.AllFiles("path", "Size", "0|1|2|3|4|5", pumpflag, 0|1)
[FILE.AllFiles("path", "KSize", subfolders, pumpflag, inclhidden) | Total size of files (KBytes). subfolders= 0(path) | 1(path + all subfolders) | 2(files and folders) | 3(files and folders + all subfolders | 4(folders) | 5(folders + all subfolders)]
FILE.AllFiles("path", "KSize", "0|1|2|3|4|5", pumpflag, 0|1)
[FILE.AllFiles("path", "command", subfolders, pumpflag, inclhidden) | Cycle through all files and run the command for each one. subfolders= 0(path) | 1(path + all subfolders) | 2(files and folders) | 3(files and folders + all subfolders | 4(folders) | 5(folders + all subfolders)]
FILE.AllFiles("path", "command", "0|1|2|3|4|5", pumpflag, 0|1)
[FILE.Attrib("path") | Returns a string of single letters indicating the path's attributes. a=archivable, c=compressed, d=directory, h=hidden, o=offline, r=read only, s=system, t=temporary.]
FILE.Attrib("path")
[FILE.Close(handle) | Closes the file given by fh. Same as handle.Close]
FILE.Close(handle)
[FILE.CloseAll | Closes all open files.]
FILE.CloseAll
[FILE.Copy("sourcefilepath", "destinpath", noErr) | Copy file to destinpath (folder name or full file name). noErr= 1(no error message) Returns 1 if success.]
FILE.Copy("sourcefilepath", "destinpath", 0|1)
[FILE.CreateDirectory("folderpath") | Create a folder. Parent folder must exist. Same as Exec.NewFolder.]
FILE.CreateDirectory("folderpath")
[FILE.CreateShortcut("targetpath", "lnkpath", "desc", "params", "iconpath", iconindex) | Creates a .lnk shortcut to target with command line arguments params. targetpath and lnkpath required.]
FILE.CreateShortcut("targetpath", "lnkpath", "desc", "params", "iconpath", iconindex)
[FILE.Delete("path") | Deletes the indicated file. The filename can contain wildcards.]
FILE.Delete("path")
[FILE.DeleteNoRecylce("path") | Deletes the file without using Recycle Bin. The filename can contain wildcards.]
FILE.DeleteNoRecylce("path")
[FILE.DoVerb("filepath", "action", nocontext) | Run action on filepath. action can be Properties or any of the actions available for the file type (eg. open, print)]
FILE.DoVerb("filepath", "action", 0|1)
[FILE.EndWatchFolder(handle) | End the folder monitoring started by FILE.WatchFolder]
FILE.EndWatchFolder(handle)
[FILE.EOF(handle) | Returns 0 if last read did not encounter EOF; non zero otherwise. Check immediately after reading the line. Same as handle.EOF]
FILE.EOF(handle)
[FILE.Folder("path") | Returns folder path without last backslash and filename.]
FILE.Folder("path")
[FILE.GetDate("path", s) | Returns the modified date and time as yyyymmddhhmmss. s = c(created) | m(modified date and time)]
FILE.GetDate("path", "c|m")
[FILE.GetShortPath("path") | Returns short (8.3) path and file name to specfied file path and name.]
FILE.GetShortPath("path")
[FILE.IsFolder("path") | Returns 1 if path is a valid path to a folder; 0 otherwise. The path may not contain wildcards.]
FILE.IsFolder("path")
[FILE.KSize("path") | Returns file size in kilobytes (size/1024); returns "" if file cannot be opened.]
FILE.KSize("path")
[FILE.LastModified("path") | Returns the last modified date and time of the file as yyyymmddhhmmss.]
FILE.LastModified("path")
[FILE.ListFiles("path", subfolders, pumpflag) | Returns a list of all the files names in the folder given by path. subfolders= 0(path) | 1(path + all subfolders) | 2(files and folders) | 3(files and folders + all subfolders | 4(folders) | 5(folders + all subfolders)]]
FILE.ListFiles("path", "0|1|2|3|4|5", pumpflag)
[FILE.Move("sourcefilepath", "destinfilepath", noerr) | Move files to another folder, same as Rename. The second path can be either a folder name or a full file name.]
FILE.Move("sourcefilepath", "destinfilepath", 0|1)
[FILE.Name("path") | Returns only filename without extension or folder path.]
FILE.Name("path")
[FILE.NameType("path") | Returns filename and type without folder.]
FILE.NameType("path")
[FILE.Open("path", "param") | Open the file with path. Optionally, param = r(open read only-default) | w(write-will be overwritten if it exists) | a(append)]
FILE.Open("path", "r|w|a")
[FILE.ReadAll("path") | Reads entire file from path and assigns to variable]
FILE.ReadAll("path")
[FILE.ReadLine(handle) | Returns next line from file including any trailing \r or \n. Same as handle.ReadLine]
FILE.ReadLine(handle)
[FILE.ReadString(handle) | Returns next line from file without trailing \r and \n. Same as handle.ReadString]
FILE.ReadString(handle)
[FILE.Resolve("lnkfilepath") | Resolves shortcut lnkfilepath and returns target file.]
FILE.Resolve("lnkfilepath")
[FILE.Resolve("lnkfilepath", "info") | Resolves shortcut lnkfilepath and returns target file info: description, work, icon.]
FILE.Resolve("lnkfilepath", "des|wor|ico")
[FILE.Restart(handle) | Next operation will occur at start of file. Same as handle.Restart]
FILE.Restart(handle)
[FILE.RunAs("userid", "password", "filepath", "cmdline", "workFolderPath") | Runs filepath under userid with password. The last two parameters are optional.]
FILE.RunAs("userid", "password", "filepath", "cmdline", "workFolderPath")
[FILE.RunAsWait("userid", "password", "filepath", "cmdline", "workFolderPath", maxwait) | Runs filepath under userid with password and waits for it to complete.]
FILE.RunAsWait("userid", "password", "filepath", "cmdline", "workFolderPath", maxwait)
[FILE.RunCallBack(maxwait, "pproCommand", "filepath", "params", "workFolderPath", "howstart") | Runs filepath, pproCommand executed when the program ends or maxwait(ms) elapse.]
FILE.RunCallBack(maxwait, "pproCommand", "filepath", "params", "workdirectory", "Min|Max|Hide|Normal")
[FILE.RunWait(maxwait, "filepath", "params", "work", "howstart") | Runs filepath under userid with password and waits maxwait(ms) for it to complete.]
FILE.RunWait(maxwait, "filepath", "params", "workdirectory", "Min|Max|Hide|Normal")
[FILE.SetDate("path", s, date, time) | s = c(change the created date and time) | m(change the modified date and time)]
FILE.SetDate("path", "c|m", "yyyymmdd", "hhmmss")
[FILE.SetMaxLine(n) | Set maximum line length for subsequent File.ReadLine calls. (min.314, max.64K)]
FILE.SetMaxLine(n)
[FILE.Size("path") | Returns file size in bytes; returns empty if file cannot be opened.]
FILE.Size("path")
[FILE.Size64("path") | Returns size as 64 bit integer; use INT64 plugin to work with.]
FILE.Size64("path")
[FILE.Type("path") | Returns file type (extension) without leading period.]
FILE.Type("path")
[FILE.ValidPath("path") | Returns 1 if valid path, 0 otherwise. (may contain wildcards)]
FILE.ValidPath("path")
[FILE.Version("path") | Returns file version info as four blank separated numbers. Returns empty if no version info.]
FILE.Version("path")
[FILE.Volume("path") | Returns the volume name for the file path.]
FILE.Volume("path")
[FILE.WatchFolder("path", "cmd", maxwait, keywords) | Monitors activity in the folder given by path, when a change occurs cmd executed. blank-separated keywords]
FILE.WatchFolder("path", "cmd", maxwait, "SubTree File Folder Size LastWrite Security")
[FILE.WriteAll("path", "text") | Overwrites the file at path with content text]
FILE.WriteAll("path", "text")
[FILE.WriteAll("path", "text", "a") | Appends text to file at path.]
FILE.WriteAll("path", "text", "a")
[FILE.WriteLine(handle, "text") | Write string to file as a line, adds \r\n if missing. as handle.WriteLine("text")]
FILE.WriteLine(handle, string)
[FILE.WriteString(handle, "text") | Write string to file without \r\n. Same as handle.WriteString("text")]
FILE.WriteString(handle, string)
[FileMenu("filepath", "pos") | Displays a file as a menu; the selected item is the result. Optionally, pos includes positioning keywords]
FileMenu("filepath", "Offset x y|Screen x y|CenterUnderMouse|CenterScreen|HorButton|HorButtonCenter|VerButton|Cursor")
[Fill("string1", "string2") | Combines two strings. Fill("0000", 12) yields "0012"]
Fill("string1", "string2")
[Find("string", "searchstring", start) | Index of searchstring within string. 0 based start index optional. Returns -1 if not found]
Find("string", "searchstring", start)
[Flag Set x1 x2 | Set flags x1 to x2 inclusive. ('Flag Set 4 7' Set flags 4, 5, 6, 7)]
Flag Set x1 x2
[Flag Clear x1 x2 | Set flags x1 to x2 inclusive. ('Flag Clear 1 31' clears all flags)]
Flag Clear x1 x2
[Flag Reverse x1 x2 | Reverses flags x1 to x2 inclusive. ('Flag Reverse 4 7' reverses 4, 5, 6, 7)]
Flag Reverse x1 x2
[FloatToString(x) | Returns string representation of floating point number.]
FloatToString(x)
[For(var=initexpr; testexpr; var=increxpr) | You cannot use Jump, Wait.Until in a For loop.]
For(var = initexpr; testexpr; var = increxpr)

	EndFor
[For(testexpr) | Equivalent to a While statement as used in other languages.]
For(testexpr)

	EndFor
[For Each var_result In expression_or_var | Loop through all items in a collection or all characters, words, or lines in a string, vector, map or file.]
For Each var_result In expression_or_var

	EndFor
[For Each var_result Index var_index In expression_or_var | Same as For Each. var_index increments from 0, each time through the loop.]
For Each var_result Index var_index In expression_or_var

	EndFor
[For Each var_result Index1 var_index In expression_or_var | Same as For Each. var_index increments from 1, each time through the loop.]
For Each var_result Index1 var_index In expression_or_var

	EndFor
[FormatDate("format", date) | Format a date. date=yyyymmdd or Date]
FormatDate("d,dd,ddd,dddd,M,MM,MMM,MMMM,YY,YYYY", date)
[FormatTime("format", time) | Format a time.]
FormatTime("hh,H,HH,m,mm,s,ss,t,tt", time)
[FUNCTION funcname ... QUIT | Function definition. Called by 'funcname()' or '.filename@funcname' if in another file.]
FUNCTION funcname

	QUIT
[FUNCTION funcname ... ENDFUNCTION | Function definition. Called by 'funcname()' or '.filename@funcname' if in another file.]
FUNCTION funcname

	ENDFUNCTION
; G
[Global | Global variable declaration.]
Global
[GETCWTXT.Get_Text | Retrieve the text of specified child windows. Max.314 chars.]
cw_index  = childIndex
cw_parent = "windowTitle"
*Exec Plugin GETCWTXT Get_Text
result    = cw_text
[GETSYSTEMPERFORMANCEDATA.Beep(frequency, duration) | Beep the internal speaker. frequency in Hz, duration in ms.]
GETSYSTEMPERFORMANCEDATA.Beep(frequency, duration)
[GETSYSTEMPERFORMANCEDATA.Get_Cpu_Usage | Returns % CPU usage. Make two consecutive calls.]
GETSYSTEMPERFORMANCEDATA.Get_Cpu_Usage
[GETSYSTEMPERFORMANCEDATA.Get_Dun_Received | Total bytes received by dial-up connection.]
GETSYSTEMPERFORMANCEDATA.Get_Dun_Received
[GETSYSTEMPERFORMANCEDATA.Get_Dun_Sent | Total bytes sent by dial-up connection.]
GETSYSTEMPERFORMANCEDATA.Get_Dun_Sent
[GETSYSTEMPERFORMANCEDATA.Get_Free_Page_File | Returns available space in page file in kilobytes.]
GETSYSTEMPERFORMANCEDATA.Get_Free_Page_File
[GETSYSTEMPERFORMANCEDATA.Get_Free_Physical_Memory | Returns available free RAM in kilobytes.]
GETSYSTEMPERFORMANCEDATA.Get_Free_Physical_Memory
[GETSYSTEMPERFORMANCEDATA.Get_Free_Virtual_Memory | Returns total amount of available virtual memory in kilobytes.]
GETSYSTEMPERFORMANCEDATA.Get_Free_Virtual_Memory
[GETSYSTEMPERFORMANCEDATA.Get_Total_Page_File | Returns total space in page file in kilobytes.]
GETSYSTEMPERFORMANCEDATA.Get_Total_Page_File
[GETSYSTEMPERFORMANCEDATA.Get_Total_Physical_Memory | Returns total RAM in kilobytes.]
GETSYSTEMPERFORMANCEDATA.Get_Total_Physical_Memory
[GETSYSTEMPERFORMANCEDATA.Get_Total_Virtual_Memory | Returns total virtual memory in kilobytes.]
GETSYSTEMPERFORMANCEDATA.Get_Total_Virtual_Memory
; H
[HookAppMessages | Predefined command list script name. Runs whenever a message with number WM_APP through 0xBFFF is received by the PowerPro main window.]
HookAppMessages
[HookBarCtrlRight | Predefined command list script name. Shown as the menu when a bar is ctrl-right clicked.]
HookBarCtrlRight
[HookCommandLine | Predefined command list script name. Run as a script just before running the command line in the Tiny Type and Run box.]
HookCommandLine
[HookCopyData | Predefined command list script name.]
HookCopyData
[HookErrors | Predefined command list script name. Run as a script whenever an error occurs.]
HookErrors
[HookMenuFolder | Predefined command list script name. Run as a script for each file selected from a Menu Folder.]
HookMenuFolder
[HookSystemEvents | Predefined command list script name. Run as a script whenever a system event occurs.]
HookSystemEvents
[HookWindowEvents | Predefined command list script name. Run as a script whenever a window event occurs.]
HookWindowEvents
; I
[Icons | Predefined command list script name. Set custom icons for tray minimised windows (only, if checked or gray checked in Command Lists >Setup >Special Lists)]
Icons
[If (condition) do | Multistatement If]
If ( ) do

	EndIf
[Ifx (condition) | Multistatement If. Same as If (condition) do]
Ifx ( )

	EndIf
[ElseIf (condition) | ]
ElseIf ( )
[EndIf | ]
EndIf
[If (condition, result1) | Returns result1 if condition non empty or zero; '' otherwise.]
result = If(condition, result1)
[IfElse(expr, result1, result2) | Returns result1 if expr non empty or zero; result2 otherwise.]
result = IfElse(expr, result1, result2)
[IfElse(expr, "result1,result2") | Returns result1 if expr non empty or zero; result2 otherwise.]
IfElse(expr, "result1,result2")
[Index("string", "searchstring", start) | Index of searchstring within string. 1 based start index optional. Returns -1 if not found]
Index("string", "searchstring", start)
[Imports(filePath_expression) Static | Import all static variables to current script file]
Imports(filePath_expression) Static
[Imports(filePath_expression) func1 func2 func3 | Import functions in other files. * in place of names will import all functions.]
Imports(filePath_expression) func1 func2 func3
[INI.Check_Exists("filepath", "section", "key") | Confirms the existence of a file, section or key. Returns 3=file+section+key exists, 2= file+section exists , 1= file exists , 0=not even file exists.]
INI.Check_Exists("filepath", "section", "key")
[INI.Config("filepath") | Set location of configuration INI file.]
INI.Config("filepath")
[INI.Confirm(action) | action = 0 | 1 (Confirmation Dialog will be shown for subsequent calls to certain services)]
INI.Confirm(0/1)
[INI.Copy_Section(sourcesection, sourcefile, destinationsection, destinationfile) | Copies a whole section between files or within one file.]
INI.Copy_Section(sourcesection, sourcefile, destinationsection, destinationfile)
[INI.Delete_Key("filepath", "section", "key") | Delete a key from an INI file section.]
INI.Delete_Key("filepath", "section", "key")
[INI.Delete_Section("filepath", "section") | Delete a section from an INI file.]
INI.Delete_Section("filepath", "section")
[INI.Enum_Keys("filepath", "section") | Return key names in INI section, separated by carriage return, single string.]
INI.Enum_Keys("filepath", "section")
[INI.Enum_Sections("filepath") | Return key names in INI section, separated by carriage return, single string.]
INI.Enum_Sections("filepath")
[INI.Error_Dialog_Off() | Turn PowerPro script error dialog off.]
INI.Error_Dialog_Off()
[INI.Error_Dialog_On() | Turn PowerPro script error dialog on.]
INI.Error_Dialog_On()
[INI.Get("filepath", "section", "key") | Get a value from an INI file.]
INI.Get("filepath", "section", "key")
[INI.Returns_Nothing() | Determine what the calls return via 'returnval = INI.service'.]
INI.Returns_Nothing()
[INI.Returns_Status() | Determine what the calls return via 'returnval = INI.service'.]
INI.Returns_Status()
[INI.Returns_Values() | Determine what the calls return via 'returnval = INI.service'.]
INI.Returns_Values()
[INI.Set("filepath", "section", "key", "value") | Set a value in an INI file.]
INI.Set("filepath", "section", "key", "value")
[INI.UnLoad | Remove plugin from memory.]
INI.UnLoad
[INI.Version | Returns the plugin version number as four digit number.]
INI.Version
[Input("title") | Prompts for input using title for the input dialog's title.]
Input("title")
[InputCancel("title") | Same as Input, except that if Cancelled the running script quits.]
InputCancel("title")
[InputColor("defaultColor") | Displays color dialog and returns results as single number]
InputColor("defaultColor")
[InputDate | Displays calendar calculator dialog and returns selected date as yyyymmdd.]
InputDate
[InputDateTime | Displays calendar calculator dialog and returns date and time as yyymmddhhmmss]
InputDateTime
[InputDefault("default", "title") | Prompts for input string, preset with default value.]
InputDefault("default", "title")
[InputDialog("var1=title1, ... var6=title6", "dialogtitle") | Displays a dialog with max.6 controls (editbox, checkbox, combobox) to set variables. use "var==title" to display a password edit box]
InputDialog("var1=editboxtitle, var2=checkbox label??, var3=combo title??item1|item2, var4=combo title?§|item1|item2, var5==title, ~var6=title6"", "dialogtitle")
[InputFolder("path") | Displays folder browse dialog and returns results, path is optional starting point.]
InputFolder("path")
[InputPath("path") | Displays file browse dialog for file open and returns results, path is optional starting point.]
InputPath("path")
[InputPathMulti("path") | Displays file browse dialog and returns results, multiple files can be selected.]
InputPathMulti("path")
[InputSaveAsPath("path") | Displays file browse dialog for file save and returns results, path is optional starting point.]
InputSaveAsPath("path")
[InputText | Prompts for text. Same as Input("title") but you cannot set title.]
InputText
[INT64.Add(n1, n2) | Sum two to nine numbers. Returns result as string. (Numbers greater than 2**31-1 must be in quotes. (4 bit numbers are stored as strings)]
INT64.Add(n1, n2)
[INT64.Compare(n1, n2) | Compare two numbers, returning -1, 0, or 1. (Numbers greater than 2**31-1 must be in quotes. 64 bit numbers are stored as strings)]
INT64.Compare(n1, n2)
[INT64.Divide(n1, n2) | Divide two numbers. (Numbers greater than 2**31-1 must be in quotes. 64 bit numbers are stored as strings)]
INT64.Divide(n1, n2)
[INT64.Mod(n1, n2) | Returns remainer of integer division of two numbers. (Numbers greater than 2**31-1 must be in quotes. 64 bit numbers are stored as strings)]
INT64.Mod(n1, n2)
[INT64.Mul(n1, n2) | Multiply two to nine numbers. (Numbers greater than 2**31-1 must be in quotes. 64 bit numbers are stored as strings)]
INT64.Mul(n1, n2)
[INT64.Sub(n1, n2) | Subtract two numbers. (Numbers greater than 2**31-1 must be in quotes. 64 bit numbers are stored as strings)]
INT64.Sub(n1, n2)
[IsNumber("string") | Returns 1 if string is a number, else 0.]
IsNumber("string")
[IsUserAdmin | Returns 1 if PowerPro running as admin, 0 otherwise.]
IsUserAdmin
; J
[Join("string1", "string2") | Joins two strings. Same as str1 ++ str2]
Join("string1", "string2")
[Jump label | Go to @label of the currently executing script.]
Jump label
; K
[KeyLog | Returns X if logging; zero otherwise.]
KeyLog
[KeyLogFile | Returns name of currently open key log file.]
KeyLogFile
; L
[LastActiveHandle | Handle to last window selected by active button.]
LastActiveHandle
[LastAutoRunHandle | Handle to last window selected by autorun item.]
LastAutoRunHandle
[LastButtonType | Returns last clicked button type: 0(normal) | 1(active) | 2(tray) | 3(folder)]
LastButtonType
[LastClipName | Returns file name of last captured clipboard item.]
LastClipName
[LastClipPath | Returns full path to last captured clipboard item.]
LastClipPath
[LastHotKeyDown | If key setup used to specify both down and up to be signaled as hotkeys for mouse button, set 1 if mouse button is down, 0 otherwise.]
LastHotKeyDown
[LastIdleTime | Returns length of last idle period in which an alarm occurred.]
LastIdleTime
[LastModKeys | Returns string of last mod keys used to activate hot key; lAlt, rAlt, lCtrl, rCtrl, lShift, rShift, lWin, rWin]
LastModKeys
[LastMouseKeyTime | Returns time since last mouse or keyboard action (in milliseconds since Windows start)]
LastMouseKeyTime
[LastNoteHandle | Handle to last active note window.]
LastNoteHandle
[LastScanCode | Returns scan code of last hot key (plus 256 if extended key bit set)]
LastScanCode
[LastTrayID | Tray icon ID of last tray icon button pressed.]
LastTrayID
[LastVKcode | Returns virtual Key code of last hot key]
LastVKcode
[Length(string) | Returns length of string.]
Length("string")
[Line("string", 0) | Returns the number of lines in the string.]
Line("string", 0)
[Line("string", lineindex) | Scans the string and returns the nth line.  lineindex start at 1.]
Line("string", lineindex)
[LINEINC.GetVolume | Returns current volume as a number from between 0 - 100.]
LINEINC.GetVolume
[LINEINC.MuteOff | Turn off Line In mute.]
LINEINC.MuteOff
[LINEINC.MuteOn | Mute Line In.]
LINEINC.MuteOn
[LINEINC.MuteStatus | Queries status of Line In mute. Returns 1 if muted, 0 if not muted.]
LINEINC.MuteStatus
[LINEINC.SetVolume(volume) | Set volume of Line In, should  be a number from between 0 - 100.]
LINEINC.SetVolume(volume)
[Local | Local variable declaration. (released at script/function quit)]
Local
[LongDate | Returns todays date in control panel regional long date format.]
LongDate
; M
[MAIL.Check_Connected() | returns number of messages waiting on the server, should only be used after a Connect_To_Accnt_Threaded]
MAIL.Check_Connected()
[MAIL.Check_On_Internet() | returns 1 if device appears to have a WAN IP address, 0 otherwise (maybe connected thru LAN)]
MAIL.Check_On_Internet()
[MAIL.Check_Ras_Connected() | If you’re connected via RAS, returns the name of RAS connection, otherwise returns empty string]
MAIL.Check_Ras_Connected()
[MAIL.Clean_String("string", "chars_to_remove") | cleans a string of unwanted characters, chars_to_remove optional (default chars=?'&<>"_ )]
MAIL.Clean_String("string", "chars_to_remove")
[MAIL.Config("filePath_INI") | set location of configuration ini file]
MAIL.Config("filePath_INI")
[MAIL.Connect_To_Accnt("pop3server", "login", "pass", portNumber) | Returns message count on the server, -1 if unsuccesfull. portNumber optional. (If a connection already exists, it will be disconnected)]
MAIL.Connect_To_Accnt("pop3server", "login", "pass", portNumber)
[MAIL.Connect_To_Accnt_Threaded("pop3server", "login", "pass", portNumber) | Start connecting to server, return immediately. portNumber optional]
MAIL.Connect_To_Accnt_Threaded("pop3server", "login", "pass", portNumber)
[MAIL.Decode_Mime("encodedstring", "underscores2space") | translates MIME QP encoding. underscores2space optional]
MAIL.Decode_Mime("encodedstring", 0|1)
[MAIL.Delete_Msg(msgno) | Mark a specific message for deletion (it will happen when you execute a disconnect)]
MAIL.Delete_Msg(msgno)
[MAIL.Disconnect | Disconnect from POP3 server]
MAIL.Disconnect
[MAIL.Error_Dialog_Off() | Turn PowerPro script error dialog off.]
MAIL.Error_Dialog_Off()
[MAIL.Error_Dialog_On() | Turn PowerPro script error dialog on.]
MAIL.Error_Dialog_On()
[MAIL.Get_Msg_Cc(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Cc(msgno)
[MAIL.Get_Msg_Cc_Clean(msgno, "chars_to_remove") | returns the text of the relevant field, characters that Powerpro has problems are removed. chars_to_remove optional (default chars=?'&<>"_ )]
MAIL.Get_Msg_Cc_Clean(msgno, "chars_to_remove")
[MAIL.Get_Msg_Date(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Date(msgno)
[MAIL.Get_Msg_Date_Deliv(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Date_Deliv(msgno)
[MAIL.Get_Msg_Date_Sent(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Date_Sent(msgno)
[MAIL.Get_Msg_From(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_From(msgno)
[MAIL.Get_Msg_From_Clean(msgno, "chars_to_remove") | returns the text of the relevant field, characters that Powerpro has problems are removed. chars_to_remove optional (default chars=?'&<>"_ )]
MAIL.Get_Msg_From_Clean(msgno, "chars_to_remove")
[MAIL.Get_Msg_Header(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Header(msgno)
[MAIL.Get_Msg_Header_Field(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Header_Field(msgno)
[MAIL.Get_Msg_Id(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Id(msgno)
[MAIL.Get_Msg_Popfile_Category(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Popfile_Category(msgno)
[MAIL.Get_Msg_Reply_To(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Reply_To(msgno)
[MAIL.Get_Msg_Reply_To_Clean(msgno, "chars_to_remove") | returns the text of the relevant field, characters that Powerpro has problems are removed. chars_to_remove optional (default chars=?'&<>"_ )]
MAIL.Get_Msg_Reply_To_Clean(msgno, "chars_to_remove")
[MAIL.Get_Msg_Size(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Size(msgno)
[MAIL.Get_Msg_Subj(msgno) | returns the text of the relevant field]
MAIL.Get_Msg_Subj(msgno)
[MAIL.Get_Msg_Subj_Clean(msgno, "chars_to_remove") | returns the text of the relevant field, characters that Powerpro has problems are removed. chars_to_remove optional (default chars=?'&<>"_ )]
MAIL.Get_Msg_Subj_Clean(msgno, "chars_to_remove")
[MAIL.Get_No_Msgs("serverip", "login", "pass") | Returns mail message count on the pop3 server.]
MAIL.Get_No_Msgs("serverip", "login", "pass")
[MAIL.Get_Timeout | Get timeout period (ms) after which operation is considered to have failed]
MAIL.Get_Timeout
[MAIL.Get_Total_Msg_Size | Get sum of size of all messages waiting on server]
MAIL.Get_Total_Msg_Size
[MAIL.Help | opens help file for plugin, if it can be found]
MAIL.Help
[MAIL.Nop | issues a "NOOP" command to the server]
MAIL.Nop
[MAIL.Retrieve(msgno) | Retrieve a message, body included, either to variable]
MAIL.Retrieve(msgno)
[MAIL.Retrieve_Clean(msgno, "chars_to_remove") | Retrieve a message, body included, either to a file]
MAIL.Retrieve_Clean(msgno, "chars_to_remove")
[MAIL.Retrieve_To_File(msgno, "filepath") | Retrieve a message, body included, either to a file]
MAIL.Retrieve_To_File(msgno, "filepath")
[MAIL.Returns_Nothing() | Determine what the calls return via 'returnval = MAIL.service'.]
MAIL.Returns_Nothing()
[MAIL.Returns_Status() | Determine what the calls return via 'returnval = MAIL.service'.]
MAIL.Returns_Status()
[MAIL.Returns_Values() | Determine what the calls return via 'returnval = MAIL.service'.]
MAIL.Returns_Values()
[MAIL.Set_Timeout() | Set timeout period (ms) after which operation is considered to have failed. timeout period should be specified in variable x6]
MAIL.Set_Timeout
[MAIL.Undo_Deletes() | Unmark messages marked for deletion]
MAIL.Undo_Deletes
[MAIL.UnLoad | Remove plugin from memory.]
MAIL.UnLoad
[MAIL.Use_Long_Vars | variables beginning with ml_ are used for input and output]
MAIL.Use_Long_Vars
[MAIL.Use_X_Vars | variables x0-x6 are used for input and output]
MAIL.Use_X_Vars
[MAIL.Version | Returns the plugin version number as four digit number.]
MAIL.Version
[MAP.Capacity(mapname) | Returns total number of entries. (power of 2 greater) Same as mapname.Capacity]
MAP.Capacity(mapname)
[MAP.Delete(mapname, "key") | Deletes key from mapname. Length decreases by 1. Same as mapname.Delete(key)]
MAP.Delete(mapname, "key")
[MAP.DeleteAll(mapname) | Deletes all keys and values from mapname. Length = 0. Same as mapname.DeleteAll]
MAP.DeleteAll(mapname)
[MAP.Destroy(mapname) | Frees all memory assigned to mapname and handle. Same as mapname.Destroy]
MAP.Destroy(mapname)
[MAP.EOF(mapname) | Returns 1 if Length = 0 or call to GetNext reaches the last key. Same as m.EOF]
MAP.EOF(mapname)
[MAP.Exists(mapname) | Returns 1 if mapname is a valid map; 0 otherwise. Same as mapname.Exist]
MAP.Exists(mapname)
[MAP.Get(mapname, key) | Retrieves value for key. Same as mapname[key]]
MAP.Get(mapname, key)
[MAP.GetNext(mapname) | Allows you to retrieve all the keys in a map without order. Same as m.GetNext]
MAP.GetNext(mapname)
[MAP.Length(mapname) | Returns number of key-value pairs in MAP. Same as mapname.Length]
MAP.Length(mapname)
[MAP.Restart(mapname) | GetNext will retrieve first key again. Same as mapname. Restart]
MAP.Restart(mapname)
[MAP.Set(mapname, key, val) | Assigns the string val to key. Same as mapname ?key? = val]
MAP.Set(mapname, key, val)
[MAP.SlotUsed(mapname) | Returns number of slots used in the lookup table. Same as mapname. SlotUsed]
MAP.SlotUsed(mapname)
[MAP.Create(size, usecase) | Creates a new map with mapname.]
mapname = MAP.Create(size, usecase)
[Match("string", "pattern") | Regular expression match of pattern to string; returns first match.]
Match("string", "pattern")
[MatchG("string", "pattern") | Regular expression match of pattern to string; returns all matches.]
MatchG("string", "pattern")
[MATH.ACos(x) | ]
MATH.ACos(x)
[MATH.ASin(x) | ]
MATH.ASin(x)
[MATH.ATan(x) | ]
MATH.ATan(x)
[MATH.ATan2(x) | ]
MATH.ATan2(x)
[MATH.Ceil(x) | ]
MATH.Ceil(x)
[MATH.Cos(x) | ]
MATH.Cos(x)
[MATH.Cosh(x) | ]
MATH.Cosh(x)
[MATH.Exp(x) | ]
MATH.Exp(x)
[MATH.Floor(x) | Round a value with MATH.Floor(x+0.5).]
MATH.Floor(x)
[MATH.Format(number, "e|f|g", field_of_width, decimalcount, regional) | Format floating point number as string. e=exponent, f=fixed decimal, g=use f if possible, e otherwise]
MATH.Format(number, "e|f|g", field_of_width, decimalcount, " |r")
[MATH.Int(x) | Truncate x to nearest integer. Same as x.Int]
MATH.Int(x)
[MATH.Log(x) | ]
MATH.Log(x)
[MATH.Log10(x) | ]
MATH.Log10(x)
[MATH.RoundInt(x) | Round x to nearest integer; MATH.RoundInt(x) = MATH.Int(x+0.5)]
MATH.RoundInt(x)
[MATH.Sin(x) | Also "x.Sin" (x is a floating point number)]
MATH.Sin(x)
[MATH.Sinh(x) | ]
MATH.Sinh(x)
[MATH.Sqrt(x) | ]
MATH.Sqrt(x)
[MATH.Tan(x) | ]
MATH.Tan(x)
[MATH.Tanh(x) | ]
MATH.Tanh(x)
[MATH.Unload | Unload the plugin.]
MATH.Unload
[Max("string1", "string2") | Maximum of two strings by sorting]
Max("string1", "string2")
[Max(val1, val2) | Maximum of two values]
Max(val1, val2)
[MBM.Get_Mbm_Info(temp_sensor_index, voltage_sensor_index, fan_sensor_index) | Read motherboard sensors. MBM5 should be installed in the system]
MBM.Get_Mbm_Info(temp_sensor_index, voltage_sensor_index, fan_sensor_index)
Debug &(MBM_Temp) &(MBM_Voltage) &(MBM_Fan)
[MBM.Unload | Unload the plugin .]
MBM.Unload
[MCI("command cdaudio parameters") | MCI provides device-independent capabilities for controlling A/V peripherals. command and parameters are described in MS documentation of MCI]
MCI("command cdaudio parameters")
[MessageBox("layout", "text", "title") | Returns: 0(Cancel), 1(OK), 3(Abort), 4(Retry), 5(Ignore), 6(Yes), 7(No)]
MessageBox("[AbortRetryIgnore|OkCancel|RetryCancel|YesNoCancel|YesNo|Ok] [Topmost] [Asterisk|Error|Exclamation|Information|Stop|Question|Warning]", "text", "title")
[Min("string1", "string2") | Minimum of two strings by sorting]
Min("string1", "string2")
[Min(val1, val2) | Minimum of two values]
Min(val1, val2)
[MISCPLUGIN.BalloonTip(iconID, "trayicon", "message", "timeout=x", "title=text", "icon=x") | Display balloon tip in the tray. iconID=any number to identify the icon for removal. text max.255 chars, \n for linebreaks. timeout in sec. In balloon icon=1(error) | 2(information) | 3(warning) in the tray.]
MISCPLUGIN.BalloonTip(iconID, "ERROR|INFORMATION|QUESTION|WARNING|iconpath", iconindex, "message", "timeout=1-30", "title=title", "icon=1|2|3")
[MISCPLUGIN.Count_HardLinks("filepath") | Count Hard Links (for NTFS only). 'sFileName' should be defined as is.]
sFileName = "filepath"
MISCPLUGIN.Count_HardLinks("filepath")
[MISCPLUGIN.Create_HardLink("filepath", "folderpath") | Create. Win2k/XP and NTFS only.]
MISCPLUGIN.Create_HardLink("filepath", "folderpath")
[MISCPLUGIN.Create_Junction("targetfolderpath", "") | Remove Junction Point (Win2k/XP only).]
MISCPLUGIN.Create_Junction("folderpath", "")
[MISCPLUGIN.Create_Junction("targetfolderpath", "sourcefolderpath") | Create Junction Point (Win2k/XP only).]
MISCPLUGIN.Create_Junction("targetfolderpath", "sourcefolderpath")
[MISCPLUGIN.Date_Diff("dayweek", "date1", "date2") | Calculate days or weeks between two dates.]
MISCPLUGIN.Date_Diff("d|w", "yyyymmdd", "yyyymmdd")
[MISCPLUGIN.Date_Range("date", "+xD|+xW|+xM|+xY|-xD|-xW|-xM|-xY") | Add or subtract the range x from the given date. D(day) W(week) M(month) Y(year)]
MISCPLUGIN.Date_Range("yyyymmdd", "+xD|+xW|+xM|+xY|-xD|-xW|-xM|-xY")
[MISCPLUGIN.Dim(action, level, mode, "password") | Darken the screen (win2k/XP only).]
MISCPLUGIN.Dim(0|1, 1-255, 1|2|3|4, "password")
[MISCPLUGIN.ElapsedTime("0") | Initialize for elapsed time count, in milliseconds.]
MISCPLUGIN.ElapsedTime("0")
[MISCPLUGIN.ElapsedTime("1") | Return elapsed time after init, in milliseconds.]
MISCPLUGIN.ElapsedTime("1")
[MISCPLUGIN.FileInfo("Attrib") | Retrieves attributes of a file. (Directory, Archive, Hidden, Readonly, System)]
MISCPLUGIN.FileInfo("Attrib")
[MISCPLUGIN.FileInfo("EXIF keyword") | Retrieves EXIF (Exchangeable Image File) info from JPEG file.]
MISCPLUGIN.FileInfo("EXIF Date|Time|Cammake|Cammodel|Glash|Exp|Aper")
[MISCPLUGIN.FileInfo("datekeyword") | Retrieves date/time info about a file.]
MISCPLUGIN.FileInfo("Modified|Accessed|Created|ModifiedDate|AccessedDate|CreatedDate|ModifiedTime|AccessedTime|CreatedTime")
[MISCPLUGIN.FileInfo("imagesizekeyword") | Retrieves size info about an image (BMP, GIF, JPG, PNG) file.]
MISCPLUGIN.FileInfo("Width|Height|Wxh")
[MISCPLUGIN.FileInfo("namekeyword") | Retrieves info about a file.]
MISCPLUGIN.FileInfo("ShortName|Unc")
[MISCPLUGIN.FileInfo("sizekeyword") | Retrieves size info about a file/folder.]
MISCPLUGIN.FileInfo("Size|Size:k|Size:m|Size:g|GolderSize")
[MISCPLUGIN.GetFocus("index|handle|class|text") | Returns the child control of the foreground window that has the focus.]
MISCPLUGIN.GetFocus(["1|2|3|4"])
[MISCPLUGIN.GetChHandle("caption", childindex) | Get child handle by index number.]
MISCPLUGIN.GetChHandle("caption", childindex)
[MISCPLUGIN.Get_IP("hostname") | Retrieves the IP address of the local/specified PC. hostname optional]
MISCPLUGIN.Get_IP("hostname")
[MISCPLUGIN.Get_SystemDate("parameter") | Get system date.]
MISCPLUGIN.Get_SystemDate("MDY|DAY|MONTH|GULL|PPRO")
[MISCPLUGIN.Get_WindowText("caption", childnumber, "parameter") | Retrieves the text of specified child window. parameter optional]
MISCPLUGIN.Get_WindowText("caption", childnumber, "toclip|win=vis|win=hid|win=all|pump=1|Sep=x")
[MISCPLUGIN.GetIndNum("handle") | Returns index number of a given child handle.]
MISCPLUGIN.GetIndNum("handle")
[MISCPLUGIN.Set_SystemDate("date") | Modify the system date.]
MISCPLUGIN.Set_SystemDate("yyyymmdd")
[MISCPLUGIN.Get_UserName("ipaddress", timeout) | Return the user's name of the local PC or of a PC given it's IP address.]
MISCPLUGIN.Get_UserName(["ipaddress", timeout)
[MISCPLUGIN.Is_Alpha("string") | Check if the supplied string is Alphabetic (A-Z, a-z).]
MISCPLUGIN.Is_Alpha("string")
[MISCPLUGIN.Is_AlphaNum("string") | Check if the supplied string is AlphaNumeric (A&#x2013;Z, a&#x2013;z, 0&#x2013;9).]
MISCPLUGIN.Is_AlphaNum("string")
[MISCPLUGIN.Is_ASCII("string") | Check if the supplied string is ASCII character (0x00&#x2013;0x7F).]
MISCPLUGIN.Is_ASCII("string")
[MISCPLUGIN.Is_ChEnable("caption", "parameter") | Determine if a child control of a window is enabled/disabled. parameter optional]
MISCPLUGIN.Is_ChEnable("caption", "I=index|H=handle|L=label")
[MISCPLUGIN.Is_ControlChar("string") | Check if the supplied string is Control Character (0x00&#x2013;0x1F, 0x7F).]
MISCPLUGIN.Is_ControlChar("string")
[MISCPLUGIN.Is_HexDigit("string") | Check if the supplied string is Hexadecimal digit (A-F, a-f, 0-9).]
MISCPLUGIN.Is_HexDigit("string")
[MISCPLUGIN.Is_Int("string") | Check if the supplied string is Integer (+/- 0-9).]
MISCPLUGIN.Is_Int("string")
[MISCPLUGIN.Is_LowerCase("string") | Check if the supplied string is LowerCase letter (a-z).]
MISCPLUGIN.Is_LowerCase("string")
[MISCPLUGIN.Is_LU("string") | Check if the supplied string is Letter or Underscore.]
MISCPLUGIN.Is_LU("string")
[MISCPLUGIN.Is_LUD("string") | Check if the supplied string is Letter, Underscore or Digit.]
MISCPLUGIN.Is_LUD("string")
[MISCPLUGIN.Is_Printable("string") | Check if the supplied string is Printable Character except space.]
MISCPLUGIN.Is_Printable("string")
[MISCPLUGIN.Is_PrintableSpace("string") | Check if the supplied string is Printable Character including space (0x21 - 0x7E).]
MISCPLUGIN.Is_PrintableSpace("string")
[MISCPLUGIN.Is_Punct("string") | Check if the supplied string is Punctuation Character.]
MISCPLUGIN.Is_Punct("string")
[MISCPLUGIN.Is_TextInWin("caption", "text", "status") | Loop through all controls in the window and find the control that contains text. status optional]
MISCPLUGIN.Is_TextInWin("caption", "text", "win=vis|win=hid|win=all")
[MISCPLUGIN.Is_UpperCase("string") | Check if the supplied string is UpperCase letter (A&#x2013;Z).]
MISCPLUGIN.Is_UpperCase("string")
[MISCPLUGIN.Is_WsChar("string") | Check if the supplied string is White-Space character (0x09&#x2013;0x0D, 0x20).]
MISCPLUGIN.Is_WsChar("string")
[MISCPLUGIN.NewFile("filepath") | Create a new empty file. Absolute or relative path to the PPro folder.]
MISCPLUGIN.NewFile("filepath")
[MISCPLUGIN.MessageBox(defaultbutton, "buttonlabels", "parameters") | MessageBox. mpDlgCaption, mpDlgText, mpIcon may be specified but optionally superseded in command. Max.8 params. Returns label of the selected button.]
MISCPLUGIN.MessageBox(1|2|3|4|5, "button1label", "button2label", ... "button5label", "OnTop=0", "InTaskbar=1", "Par=xxx", "Timeout=x", "Wave=filepath", "Cap=Caption", "Icon=filepath", "Msg=text")
[MISCPLUGIN.MinAll("action") | Invoke the shell's minimize all function.]
MISCPLUGIN.MinAll(["0/1"])
[MISCPLUGIN.ReminderUI("parameter") | Create a Reminder with optional command.]
MISCPLUGIN.ReminderUI("PProCommand")
[MISCPLUGIN.RunDialog() | Invoke the shell's run dialog.]
MISCPLUGIN.RunDialog()
[MISCPLUGIN.Set_ActWnd("caption") | Bringsan existing window to foreground. Same as Window.Show("caption")]
MISCPLUGIN.Set_ActWnd("caption")
[MISCPLUGIN.Set_FileAttrib("attribkey") | + Sets, - Clears attribute. AHRS for Archive, Hidden, Read-only, System]
MISCPLUGIN.Set_FileAttrib("+A|-A|+H|-H|+R|-R|+S|-S")
[MISCPLUGIN.SetFocus("caption", index|"handle") | Set the focus to a specific child conrol.]
MISCPLUGIN.SetFocus("caption", index|"hwnd=xxxxx")
[MISCPLUGIN.Set_TaskBar("action") | Enable/Disable the window's taskbar.]
MISCPLUGIN.Set_TaskBar("0|1")
[MISCPLUGIN.Sleep(timeout_ms) | Equivalent to *Wait Sleep but PowerPro is responsive throughout the wait.]
MISCPLUGIN.Sleep(timeout_ms)
[MISCPLUGIN.Show_Menu("title", "menuitems") | Create a menu with optional title and submenus.]
MISCPLUGIN.Show_Menu("title", "Item1\nItem2\nsep\nSUB=xxx\nSubItem1\nENDSUB")
[MISCPLUGIN.TempFileName("prefix", "folderpath") | Generate unique temporary filename in the TMP folder.]
MISCPLUGIN.TempFileName(["prefix", ["folderpath"]])
[MISCPLUGIN.Touch_FileTime("field", "date", "time") | Change a file's time stamp.]
MISCPLUGIN.Touch_FileTime("mca", "yyyymmdd", "hhmmss")
[MISCPLUGIN.Wait_Window("caption", timeout_ms, untilactive, "childcontrollabel") | Equivalent to *Wait VisibleWindow with faster response. timeout_ms (and rest) optional. Case insensitive match for control labels (Wildcards allowed)]
MISCPLUGIN.Wait_Window("caption", timeout_ms, 0|1, "childcontrollabel")
[Modem | Returns 1 if dial up connected; 0 otherwise.]
Modem
[Monitor | Predefined command list script name. Run once per second (or two seconds) (only, if checked or gray checked in Command Lists >Setup >Special Lists)]
Monitor
[Mounted("driveletter") | Result is 1 if string's first letter is a removable disk.]
Mounted("driveletter")
[Mouse4 | Returns 1 if mouse 4 button is down, 0 otherwise.]
Mouse4
[Mouse5 | Returns 1 if mouse 5 button is down, 0 otherwise.]
Mouse5
[MouseLeft | Returns 1 if left mouse button is down, 0 otherwise.]
MouseLeft
[MouseMiddle | Returns 1 if middle mouse button is down, 0 otherwise.]
MouseMiddle
[MouseRight | Returns 1 if right mouse button is down, 0 otherwise.]
MouseRight
[MP3PLUGIN.GetAlbum | ]
MP3PLUGIN.GetAlbum
[MP3PLUGIN.GetArtist | ]
MP3PLUGIN.GetArtist
[MP3PLUGIN.GetComments | ]
MP3PLUGIN.GetComments
[MP3PLUGIN.GetTitle | ]
MP3PLUGIN.GetTitle
[MP3PLUGIN.GetTrack | ]
MP3PLUGIN.GetTrack
[MP3PLUGIN.SetAlbum | ]
MP3PLUGIN.SetAlbum
[MP3PLUGIN.SetArtist | ]
MP3PLUGIN.SetArtist
[MP3PLUGIN.SetComments | ]
MP3PLUGIN.SetComments
[MP3PLUGIN.SetTitle | ]
MP3PLUGIN.SetTitle
[MP3PLUGIN.SetTrack | ]
MP3PLUGIN.SetTrack
[MSGBOX.Display("message", "caption", "buttons icon defaultbutton") | Space seperated properties optional (default OK)). Returns: 1(OK) | 2(Cancel) | 3(Abort) | 4(Retry) | 5(Ignore) |   6(Yes) | 7(No)]
MSGBOX.Display("message", "caption", "|OKCANCEL|ABORTRETRYIGNORE|YESNOCANCEL|YESNO|RETRYCANCEL ERROR|QUESTION|WARNING|INFORMATION BUTTON1|BUTTON2|BUTTON3")
[MSGBOX.UnLoad | Remove plugin from memory.]
MSGBOX.UnLoad
[Muted | Set 1 if muted sound; set 0 otherwise.]
Muted
; N
[NET.Check_On_Internet() | See if seem to be on internet.]
NET.Check_On_Internet()
[NET.Check_Ras_Connected() | See if connected to ISP.]
NET.Check_Ras_Connected()
[NET.Error_Dialog_Off() | Turn PowerPro script error dialog off.]
NET.Error_Dialog_Off()
[NET.Error_Dialog_On() | Turn PowerPro script error dialog on.]
NET.Error_Dialog_On()
[NET.Fetch_Webpage("url", "proxyserveraddress", "proxyport", "fields", "POST_data", "successcommand", "unsuccesscommand") | Start fetch of a file off the net. A threaded service. All except url optional]
NET.Fetch_Webpage("url", "proxyserveraddress", "proxyport", "fields", "POST_data", "successcommand", "unsuccesscommand")
[NET.Get_Host_Name("ipaddress") | Get host name from IP address.]
NET.Get_Host_Name("ipaddress")
[NET.Get_Ip_Addr("hostname") | Get IP address from host name.]
NET.Get_Ip_Addr("hostname")
[NET.Get_Local_Ip_Addr() | Get IP address of local machine.]
NET.Get_Local_Ip_Addr()
[NET.Get_Ping_Result() | Check if threaded service is complete.]
NET.Get_Ping_Result()
[NET.Get_Probe_Result() | Returns 1 if the port was found, 0 otherwise after a call to Probe_Port.]
NET.Get_Probe_Result()
[NET.Get_Webpage_Result() | Get result of a webpage fetch.]
NET.Get_Webpage_Result()
[NET.Ping("address", wait, size, count, interval, TTL)) | Ping a specified address, return when complete. wait (and rest) optional]
NET.Ping("address", wait, size, count, interval, TTL)
[NET.Ping_Bloviation_Off() | Variables other then Net_Status will not be set.]
NET.Ping_Bloviation_Off()
[NET.Ping_Bloviation_On() | Variables other then Net_Status will be set after various operations.]
NET.Ping_Bloviation_On()
[NET.Ping_Threaded("address", wait, size, count, interval, TTL, "successcommand", "unsuccesscommand") | Start pinging a specified address, return immediately. wait (and rest) optional]
NET.Ping_Threaded("address", wait, size, count, interval, TTL, "successcommand", "unsuccesscommand")
[15 NET.Probe_Port("address", port, "successcommand", "unsuccesscommand") | Test a port to see if responds. A threaded service. successcommand, unsuccesscommand optional]
NET.Probe_Port("address", port, "successcommand", "unsuccesscommand")
[15 NET.Save_Webpage_To_File("url", "filepth", "proxyserveraddress", proxyport, "fields", "POST_data", "successcommand", "unsuccesscommand") | Start fetch of a file, save it to file when complete. A threaded service. proxyserveraddress (and rest) optional]
NET.Save_Webpage_To_File("url", "filepth", "proxyserveraddress", proxyport, "fields", "POST_data", "successcommand", "unsuccesscommand")
[NET.Stop_Ping() | Stops Ping_Threaded.]
NET.Stop_Ping()
[NET.Stop_Probe() | Terminate a port probe in progress.]
NET.Stop_Probe()
[NET.Stop_Webpage() | Stop Fetch_Webpage or Save_Webpage_To_File.]
NET.Stop_Webpage()
[NET.URL_Encode("string") | Encode an URL.]
NET.URL_Encode("string")
[NextWord("string", "variablename", "delims") | Returns the next word as delimited by delims (default blank and tab). variablename returnes the rest of string.]
NextWord("string", "variablename", "delims")
[Note.CloseCategory("categoryname") | Close and save all notes in a category.]
Note.CloseCategory("categoryname")
[Note.DeleteOpenCategory | Deletes open notes from a given category.]
Note.DeleteOpenCategory
[Note.Open("params") | Create new notes or open existing notes.]
Note.Open("params")
[Note.OpenCategory("categoryname") | Open all notes in a category.]
Note.OpenCategory("categoryname")
[Note.OpenMenu | Shows a menu of all open notes. Brings selected one to the top.]
Note.OpenMenu
[Note.OpenOneFromMenu("categoryname") | Open one note in a category.]
Note.OpenOneFromMenu("categoryname")
[Note.OpenShow | Show hidden notes]
Note.OpenShow
[Note.OpenToday | Shows notes with date categories today or before.]
Note.OpenToday
[Note.RollupCategory("+categoryname|-categoryname") | Reverse the rollup state of all open notes in a category. + Unroll, - RollUp.]
Note.RollupCategory("+categoryname|-categoryname")
[Note.SetFolder("folderpath") | Set path to parent of notes folder.]
Note.SetFolder("folderpath")
[Note.Search | Shows a dialog allowing you to search the last active note]
Note.Search
[Note.ShowHideOpen | Hide or Show open notes.]
Note.ShowHideOpen
[Note.ShowOpen | Shows all hidden notes.]
Note.ShowOpen
[NOTE.AppendLine(notehandle, "text") | Appends text at the end of the note. A CR-LF is added to the end.]
NOTE.AppendLine(notehandle, "text")
[NOTE.AppendText(notehandle, "text") | Inserts the text at the end of the note]
NOTE.AppendText(notehandle, "text")
[NOTE.Bottom(notehandle) | Returns the position of note in pixels.]
NOTE.Bottom(notehandle)
[NOTE.CharFromLine(notehandle, lineindex) | Returns the character index corresdonding to a specific line.]
NOTE.CharFromLine(notehandle, lineindex)
[NOTE.Close(notehandle) | Closes and saves the note]
NOTE.Close(notehandle)
[NOTE.Cycle | Cycles though open notes, one at a time, showing them as it goes.]
NOTE.Cycle
[NOTE.Delete(notehandle) | Closes and deletes the note]
NOTE.Delete(notehandle)
[NOTE.Find(notehandle, "text", start, case, nobeep) | Finds text in note. start='' starts just past current selection.]
NOTE.Find(notehandle, "text", start, 0|1, 0|1)
[NOTE.GetBackColor(notehandle) | Returns background color as string of three numbers separated by blank: 'red green blue'.]
NOTE.GetBackColor(notehandle)
[NOTE.GetCaretLine(notehandle) | Returns the line index corresponding to the current position of the text cursor).]
NOTE.GetCaretLine(notehandle)
[NOTE.GetCaretPos(notehandle) | Returns the character index corresponding to the current position of the text cursor.]
NOTE.GetCaretPos(notehandle)
[NOTE.GetCategory(notehandle) | Returns category of note.]
NOTE.GetCategory(notehandle)
[NOTE.GetLine(notehandle, lineindex) | Returns the contents of line lineindex (starting at line 0), removes terminating CR-LF from text.]
NOTE.GetLine(notehandle, lineindex)
[NOTE.GetSel(notehandle) | Returns two blank-separated numbers indicated the first and last character of selected text, '' if no selection.]
NOTE.GetSel(notehandle)
[NOTE.GetSel(notehandle, cindex1, cindex2) | Set start and end of selection to cindex1 through cindex2 inclusive.]
NOTE.GetSel(notehandle, cindex1, cindex2)
[NOTE.GetSel1(notehandle) | Returns zero-based number indicated the first character of selected text, '' if no selection.]
NOTE.GetSel1(notehandle)
[NOTE.GetSel2(notehandle) | Returns zero-based number indicated the last character of selected text, '' if no selection.]
NOTE.GetSel2(notehandle)
[NOTE.GetText(notehandle, cindex1, cindex2) | Returns the characters starting at cindex1 and ending and cindex2, and including cindex2.]
NOTE.GetText(notehandle, cindex1, cindex2)
[NOTE.GetTextColor(notehandle) | Returns text color as string of three numbers separated by blank: 'red green blue'.]
NOTE.GetTextColor(notehandle)
[NOTE.HandleList("category", includehidden) | Returns a blank separated list of all handles of open notes, limited to about 55 open notes.]
NOTE.HandleList("category", 0|1)
[NOTE.Height(notehandle) | Returns the size of note in pixels.]
NOTE.Height(notehandle)
[NOTE.InsertLine(notehandle, lineindex, "text") | Inserts the text as a line before lineindex. lineindex is 0 base.]
NOTE.InsertLine(notehandle, lineindex, "text")
[NOTE.InsertText(notehandle, "text", cindex) | Inserts the text before cindex.]
NOTE.InsertText(notehandle, "text", cindex)
[NOTE.IsOnTop(notehandle) | Returns 1 if note is topmost, 0 otherwise.]
NOTE.IsOnTop(notehandle)
[NOTE.IsRolled(notehandle) | Returns 1 if note is rolled, 0 otherwise.]
NOTE.IsRolled(notehandle)
[NOTE.IsValid(notehandle) | Returns 1 if notehandle is a valid note handle, zero otherwise.]
NOTE.IsValid(notehandle)
[NOTE.IsVisible(notehandle) | Returns 1 if note is visible, 0 otherwise.]
NOTE.IsVisible(notehandle)
[NOTE.Left(notehandle) | Returns the position of note in pixels.]
NOTE.Left(notehandle)
[NOTE.Length(notehandle) | Returns the number of characters in the note.]
NOTE.Length(notehandle)
[NOTE.LineCount(notehandle) | Returns the number of lines in the note.]
NOTE.LineCount(notehandle)
[NOTE.LineFromChar(notehandle, cindex) | Returns the line number corresponding to a specific character.]
NOTE.LineFromChar(notehandle, cindex)
[NOTE.Move(notehandle, left, top) | Moves the note to the specified position. Same as notehandle.Move(left, top)]
NOTE.Move(notehandle, left, top)
[NOTE.Ontop(notehandle, topmost) | Makes note topmost (1), not topmost (0). Reverses setting if topmost empty. Same as notehandle.OnTop(topmost)]
NOTE.Ontop(notehandle, |0|1)
[NOTE.Open("filepath", "keywords", state) | Creates a new note and returns its handle. state = 0(hidden) | 1(visible) | 2(activated). All parameters optional]
NOTE.Open("filepath", "keywords", 0|1|2)
[NOTE.Raise | Cycles through open notes and removes always on top property.]
NOTE.Raise
[NOTE.ReplaceLine(notehandle, "text", lineindex) | Replaces the indicated line by the text.]
NOTE.ReplaceLine(notehandle, "text", lineindex)
[NOTE.ReplaceSel(notehandle, "text") | Replaces selected text. Does nothing if no selection.]
NOTE.ReplaceSel(notehandle, "text")
[NOTE.ReplaceText(notehandle, "text", cindex1, cindex2) | Replaces the text starting at cindex1 and ending at cindex2.]
NOTE.ReplaceText(notehandle, "text", cindex1, cindex2)
[NOTE.Right(notehandle) | Returns the position of note in pixels.]
NOTE.Right(notehandle)
[NOTE.Roll(notehandle, state) | state = 0(roll) | 1(unroll). Reverses setting if state empty. Same as notehandle.Roll(state)]
NOTE.Roll(notehandle, |0|1)
[NOTE.ScrollCaret(notehandle) | Scrolls note so caret is in view. Same as notehandle.ScrollCaret]
NOTE.ScrollCaret(notehandle)
[NOTE.ScrollTo(notehandle, "char", lineindex) | Scrolls note to horizontal character char of line lineindex. Same as notehandle.ScrollTo("char", lineindex)]
NOTE.ScrollTo(notehandle, "char", lineindex)
[NOTE.Search | Shows a dialog to search the last active note. Type Alt-S into a note to show or switch back to this dialog.]
NOTE.Search
[NOTE.SetBackColor(notehandle, "red green blue") | Set note background color; red, green, blue are numbers between 0 and 255. Same as notehandle.SetBackColor('red green blue')]
NOTE.SetBackColor(notehandle, "0-255 0-255 0-255")
[NOTE.SetBackColor(notehandle, RGBnumber) | See SetTextColor for desciprtion of ways to set RGBnumber colors.]
NOTE.SetBackColor(notehandle, RGBnumber)
[NOTE.SetBackColor(notehandle, red, green, blue) | Set note background color; red, green, blue are nubmers between 0 and 255.]
NOTE.SetBackColor(notehandle, 0-255, 0-255, 0-255)
[NOTE.SetCategory(notehandle, "category") | Changes category of note. Same as notehandle.SetCategory(str)]
NOTE.SetCategory(notehandle, "category")
[16 NOTE.SetSel(notehandle, cindex1, cindex2) | Sets start and end of selection]
NOTE.SetSel(notehandle, cindex1, cindex2)
[NOTE.SetTab(notehandle, tabpos) | Set the tab position for the note; must be at least 1. Same as notehandle.SetTab(tabpos)]
NOTE.SetTab(notehandle, tabpos)
[NOTE.SetText(notehandle, "text") | Set text of note.]
NOTE.SetText(notehandle, "text")
[NOTE.SetTextColor(notehandle, "red green blue") | Set text color; red, green, blue are nubmers between 0 and 255. Same as notehandle.SetTextColor('red green blue')]
NOTE.SetTextColor(notehandle, "0-255 0-255 0-255")
[NOTE.SetTextColor(notehandle, RGBnumber) | Set text color; red green blue components as a single integer (red in the lowest 8 bits).]
NOTE.SetTextColor(notehandle, RGBnumber)
[NOTE.SetTextColor(notehandle, red, green, blue) | Set text color; red, green, blue are numbers between 0 and 255.]
NOTE.SetTextColor(notehandle, 0-255, 0-255, 0-255)
[NOTE.Show(notehandle, state) | state = 0(hidden) | 1(visible). Reverses setting if state empty. Shown notes are not activated. Same as notehandle.Show(state)]
NOTE.Show(notehandle, |0|1)
[NOTE.Size(notehandle, width, height) | Set the size of the note. Same as notehandle.Size(width, height)]
NOTE.Size(notehandle, width, height)
[NOTE.Top(notehandle) | Returns the position of note in pixels.]
NOTE.Top(notehandle)
[NOTE.Unload | Unload the plugin.]
NOTE.Unload
[NOTE.VScroll(notehandle, n) | Scroll note: n = -2(scroll up one page) | -1(scroll up one line) | 0(no scroll) | 1(scroll down one line) | 2(scroll down one page). Same as nh.VScroll(n)]
NOTE.VScroll(notehandle, -2|-1|0|1|2)
[NOTE.Width(notehandle) | Returns the size of note in pixels.]
NOTE.Width(notehandle)
[NOTES.Open("text") | Create new note with the text (max.25K)]
NOTES.Open("text")
[NOTES.Open("text", "options") | Returns the size of note in pixels.]
NOTES.Open("text", "Top|Back|...")
[NOTES.Cycle | Cycle through open notes (like Alt+Tab).]
NOTES.Cycle
[NOTES.Raise | Cycle through open notes (like Alt+Esc). It will remove the "always on top" properties of notes as it cycles.]
NOTES.Raise
[NOTES.Unload | Unload the plugin.]
NOTES.Unload
[NumLines | Returns the number of lines in the string. Same as string.Line(0)]
string.NumLines
[NumWords | Returns the number of words in the string. Same as string.Word(0)]
string.NumWords
; O
[ODBC_Status | Variable set by all services of ODBC plugin]
ODBC_Status
[ODBC_Vector | Variable set by ODBC.Get_Vector and ODBC.Get_2D_Vector services]
ODBC_Vector
[ODBC_Col_Nmaes | Variable set by ODBC.Get_Vector, ODBC.Get_Vectors and ODBC.Get_2D_Vector services]
ODBC_Col_Nmaes
[ODBC_No_Rows | Variable set by ODBC.Get_Vector, ODBC.Get_Vectors and ODBC.Get_2D_Vector services]
ODBC_No_Rows
[ODBC.BeginTransaction | Frame any calls to ODBC.Sql_Stmt that change the database with a call to ODBC.BeginTransaction before and ODBC.Commit after]
ODBC.BeginTransaction
[ODBC.Close() | Close the open database]
ODBC.Close()
[ODBC.Commit | Frame any calls to ODBC.Sql_Stmt that change the database with a call to ODBC.BeginTransaction before and ODBC.Commit after]
ODBC.Commit
[ODBC.Config("filePath_INI") | Set location of configuration ini file]
ODBC.Config("filePath_INI")
[ODBC.Error_Dialog_Off() | Turn PowerPro script error dialog off.]
ODBC.Error_Dialog_Off()
[ODBC.Error_Dialog_On() | Turn PowerPro script error dialog on.]
ODBC.Error_Dialog_On()
[ODBC.Get_2D_Vector("SQL_statement", "vector_row_count") | SQL statement that returns results from the open database (typically a SELECT statement). Set of vectors stored in a containing vector will be returned.]
ODBC.Get_2D_Vector("SQL_statement", "vector_row_count")
[ODBC.Get_Vector("SQL_statement", "column_names", "variable_name_for_vector") | SQL statement that returns results from the open database (typically a SELECT statement). A single vector of results will be returned by the service unless you provide an alternate name for the vector as a second argument.]
ODBC.Get_Vector("SQL_statement", "column_names", "variable_name_for_vector")
[ODBC.Get_Vectors("SQL_statement", "column_names") | SQL statement that returns results from the open database (typically a SELECT statement). Optionally specify the initial size of the vectors returned]
ODBC.Get_Vectors("SQL_statement", "column_names")
[ODBC.Open("dsn") | Opens a data source. Only one database can be opened at a time. username and password optional. Returns 'OK' or 'ERROR']
ODBC.Open("dsn")
[ODBC.Open("driver_key_word", "database", "username", "password") | Opens a data source. Only one database can be opened at a time. username and password optional. Returns 'OK' or 'ERROR']
ODBC.Open("Text|dBase|Excel|Access|...", "database", "username", "password")
[ODBC.Returns_Nothing() | Determine what the calls return via 'returnval = ODBC.service'.]
ODBC.Returns_Nothing()
[ODBC.Returns_Status() | Determine what the calls return via 'returnval = ODBC.service'.]
ODBC.Returns_Status()
[ODBC.Returns_Values() | Determine what the calls return via 'returnval = ODBC.service'.]
ODBC.Returns_Values()
[ODBC.Rollback | Cancel the call to odbc.sql_stmt thereafter by calling ODBC.Rollback instead of ODBC.Commit]
ODBC.Rollback
[ODBC.Sql_Stmt("SQL_statement") | Execute SQL statements that return no data]
ODBC.Sql_Stmt("SQL_statement")
[OnErrorSetting | ]
OnErrorSetting
[OnScriptDebug | Predefined command list script name. Run as a script just before displaying debug dialog.]
OnScriptDebug
[Open | Predefined command list script name. Run commands when specified windows first open (only, if checked or gray checked in Command Lists >Setup >Special Lists)]
Open
[OPTIONS.Case_Sensitive_Off | turn case sensitive parsing of command line off]
OPTIONS.Case_Sensitive_Off
[OPTIONS.Case_Sensitive_On | turn case sensitive parsing of command line on]
OPTIONS.Case_Sensitive_On
[OPTIONS.Config("filepath") | set location of configuration ini file]
OPTIONS.Config("filepath")
[OPTIONS.Error_Dialog_Off | Turn PowerPro script error dialog off.]
OPTIONS.Error_Dialog_Off
[OPTIONS.Error_Dialog_On | Turn PowerPro script error dialog on.]
OPTIONS.Error_Dialog_On
[OPTIONS.Eval_Flat_File("options_syntax_file", "command_line_to_parse") | evaluate a command line, options syntax specified by a file, one line per option]
OPTIONS.Eval_Flat_File("options_syntax_file", "command_line_to_parse")
[OPTIONS.Eval_INI_File("options_syntax_ini_file", "command_line_to_parse") | evaluate a command line, options syntax specified by an ini file, one section per option]
OPTIONS.Eval_INI_File("options_syntax_ini_file", "command_line_to_parse")
[OPTIONS.Eval_String("options_syntax_string", "command_line_to_parse") | evaluate a command line, options syntax specified by a string]
OPTIONS.Eval_String("options_syntax_string", "command_line_to_parse")
[OPTIONS.Eval_Vector("options_syntax_vector", "command_line_to_parse") | evaluate a command line, options syntax specified by a vector of strings, one vector element per option]
OPTIONS.Eval_Vector("options_syntax_vector", "command_line_to_parse")
[OPTIONS.Set_Delimiter("delimiter_character") | set the character used if ?c…c necessary to return option argument]
OPTIONS.Set_Delimiter("delimiter_character")
[OPTIONS.Unload | Remove plugin from memory.]
OPTIONS.Unload
[OSD.Show("text", "timems", "fontsize", "fontname", "location", "fontcolor") | One line string output on the screen. timems (and rest) optional]
OSD.Show("text", "timems", "fontsize", "fontname", "location", "fontcolor")
[OSD.Hide | Hide OSD output.]
OSD.Hide
[OSD.Unload | Remove plugin from memory.]
OSD.Unload
; P
[Paper | Returns the current wallpaper file name.]
Paper
[PCFName | Filename and extension of current configuration file.]
PCFName
[PERF.AutoUpdate(interval_ms) | Auto refresh interval. (Default 1000 ms) You can also set AutoUpdate to 0 and use PERF.RefreshCounters and an event or timer to refresh the database of counters.]
PERF.AutoUpdate(0|250-5000)
[PERF.Browse(depth_count, mflag) | Display perf.counter list. Returns selection then displays depth_count successive values of the selected counter in a Debug window (if nsamp>0)]
PERF.Browse(depth_count, "|multi")
[PERF.CloseCounter("perfCounterName") | Close the counter and remove it from the database. Returns: 1(counter found and closed) | 0(otherwise). Use "*" to close all counters.]
PERF.CloseCounter("perfCounterName")
[PERF.DefaultDisplayValue("value") | Change default startup value. For several seconds after startup, services may return default value of -1.0]
PERF.DefaultDisplayValue("value")
[PERF.ExpandSF("perfCounterName") | If name is a shortform, returns the full counter path it represents]
PERF.ExpandSF("perfCounterName")
[PERF.ForcePeriod("value") | Set decimal point char: 0(local setting) | 1(period-default)]
PERF.ForcePeriod(0|1)
[PERF.Get("CPU", decimalCount, minChars) | Returns % processor time. If the result has fewer characters than minChars, it is blank padded on the front.(to ensure a consistent width for buttons labels) (PPro version <5.3.21)]
PERF.Get("CPU", decimalCount, minChars)
[PERF.Get("Mbytes", decimalCount, minChars) | Returns memory in use. If the result has fewer characters than minChars, it is blank padded on the front.(to ensure a consistent width for buttons labels) (PPro version <5.3.21)]
PERF.Get("Mbytes", decimalCount, minChars)
[PERF.Get("FileRead", decimalCount, minChars) | Returns file read bytes/sec. If the result has fewer characters than minChars, it is blank padded on the front.(to ensure a consistent width for buttons labels) (PPro version <5.3.21)]
PERF.Get("FileRead", decimalCount, minChars)
[PERF.Get("FileWrite", decimalCount, minChars) | Returns file write bytes/sec. If the result has fewer characters than minChars, it is blank padded on the front.(to ensure a consistent width for buttons labels) (PPro version <5.3.21)]
PERF.Get("FileWrite", decimalCount, minChars)
[PERF.Get("NetBytes", decimalCount, minChars) | Returns total bytes/sec over all network interfaces. If the result has fewer characters than minChars, it is blank padded on the front.(to ensure a consistent width for buttons labels) (PPro version <5.3.21)]
PERF.Get("NetBytes", decimalCount, minChars)
[PERF.Get("perfCounterName", decimalCount, minChars) | Return latest value for counter. If the result has fewer characters than minChars, it is blank padded on the front.(to ensure a consistent width for buttons labels) (PPro version <5.3.21)]
PERF.Get("perfCounterName", decimalCount, minChars)
[PERF.GetMax("perfCounterName", decimalCount, minChars) | Return maximum value for counter. If the result has fewer characters than minChars, it is blank padded on the front.(to ensure a consistent width for buttons labels) (PPro version <5.3.21)]
PERF.GetMax("perfCounterName", decimalCount, minChars)
[PERF.GetMean("perfCounterName", decimalCount, minChars) | Return mean value for counter. If the result has fewer characters than minChars, it is blank padded on the front.(to ensure a consistent width for buttons labels) (PPro version <5.3.21)]
PERF.GetMean("perfCounterName", decimalCount, minChars)
[PERF.GetMin("perfCounterName", decimalCount, minChars) | Return minimum value for counter. If the result has fewer characters than minChars, it is blank padded on the front.(to ensure a consistent width for buttons labels) (PPro version <5.3.21)]
PERF.GetMin("perfCounterName", decimalCount, minChars)
[PERF.GetLastMessage() | Returns last error message]
PERF.GetLastMessage()
[PERF.GetOnce("perfCounterName", decimalCount, minChars, wait_ms) | Attempts to return one value of counter. Two samples are taken and the second one used. PowerPro will be unresponsive in the wait time. (default 250 ms)]
PERF.GetOnce("perfCounterName", decimalCount, minChars, wait_ms)
[PERF.IsDefaultDisplayValue("value") | Returns: 1(string is the default display value text) | 0(otherwise)]
PERF.IsDefaultDisplayValue("value")
[PERF.NoValueYet | Returns the PowerPro floating point number used to signal that the counter has not stabilized, if you ask the returned value to be formatted as a PowerPro number (with "f" for fmt)]
PERF.NoValueYet
[PERF.NumCPU | Returns number of CPUs]
PERF.NumCPU
[PERF.ReadIni("filePath_INI") | Reads ini file at filepath, overwriting current options and shortforms. (default: perf.ini in current pcf folder) If a relative path, current pcf folder is used]
PERF.ReadIni("filePath_INI")
[PERF.RefreshCounters | Refresh all counters in database. You can use with counters being refreshed automatically. Or you can set g_AutoUpdate to 0 and use this service and an event or timer to refresh.]
PERF.RefreshCounters
[PERF.ResetStatistics("perfCounterName") | Sets the min, max, mean to current value of perfCounterName]
PERF.ResetStatistics("perfCounterName")
[PERF.Verbose(value) | value = 0(no messages-use the GetLastMessage service instead) | 1(show message for basic services-default) | 2(show messages for both basic and advanced services) | 3(show debug information as well as messages)]
PERF.Verbose(0|1|2|3)
[PERF.Weight("value") | Used for exponentially smoothed running means. The weight is set as value/100. Default: 0.07]
PERF.Weight(1-25)
[PerfCount | Returns the Windows performance counter, 64 bit integer.]
PerfCount
[PerfFreq | The frequency, in counts per second, that PerfCount is incremented, 64 bit integer.]
PerfFreq
[PickFile("filepathlist", "title") | Returns a full file path from a dialog of names only.]
PickFile("filepathlist", "title")
[PickString("stringlines", "title") | Selects a string from a list in a dialog]
PickString("string1\rstring2\rstring3", "title")
[PIPE.Create("name") | Creates a handle to a pipe object and returns a handle to it.]
PIPE.Create("name")
[PIPE.Destroy(pipehandle) | Deletes a handle returned by the create service.]
PIPE.Destroy(pipehandle)
[PIPE.Listen_Off(pipehandle) | Terminates listening and closes the listening pipe.]
PIPE.Listen_Off(pipehandle)
[PIPE.Listen_On(pipehandle, "name", authenticate, "var_name", vec_handle, binary_handle, unicode_handle, "static_var_script", "command_to_call", leave_crlf, break_msgs, "markers", "insertionmarktype", "dead_pipe_cmd", "dead_pipe_folder") | Starts listening for messages. All parameters are optional.]
PIPE.Listen_On(pipehandle, "name", 0|1, var_name, vec_handle, binary_handle, unicode_handle, "static_var_script", "command_to_call",  0|1,  0|1, "markers",  a|1, "dead_pipe_cmd", "dead_pipe_folder")
[PIPE.Send_To(pipehandle, binaryhandle|unicodehandle|data, "machinename", "pipename", authenticate) | Pipes a message to pipename on machinename.]
PIPE.Send_To(pipehandle, binaryhandle|unicodehandle|data, "machinename", "pipename", 0|1)
[PIPE.To_Console(pipehandle, "consolecommand", "executable", "currentdirectory") | If executable empty, cmd.exe is used. Call with pipehandle destroys the console]
PIPE.To_Console(pipehandle, "consolecommand", "executable", "currentdirectory")
[PIPE.Get_Computer_Names() | Returns space seperated list of workstation names on the LAN.]
PIPE.Get_Computer_Names()
[PIPE.Get_IP_Addr("machinename") | Returns (or Set pipe_value to) the IP address of the named machine.]
PIPE.Get_IP_Addr("machinename")
[PIPE.Returns_Nothing() | Determine what the calls return via 'returnval = PIPE.service'.]
PIPE.Returns_Nothing()
[PIPE.Returns_Status() | Determine what the calls return via 'returnval = PIPE.service'.]
PIPE.Returns_Status()
[PIPE.Returns_Values() | Determine what the calls return via 'returnval = PIPE.service'.]
PIPE.Returns_Values()
[PIPE.Error_Dialog_Off() | Turn off dialogs appearing when a PIPE service call goes wrong.]
PIPE.Error_Dialog_Off()
[PIPE.Error_Dialog_On() | Turn on error dialogs appearing when a PIPE service call goes wrong.]
PIPE.Error_Dialog_On()
[PIPE.Config("filePath_INI") | Specifies a configuration ini file.]
PIPE.Config("filePath_INI")
[PMem | Percent free memory]
PMem
[PPGEORGY.Clpbrd_To_Upper | Change all letters in clipboard to UPPER-CASE.]
PPGEORGY.Clpbrd_To_Upper
[PPGEORGY.Clpbrd_To_Lower | Change all letters in clipboard to lower-case.]
PPGEORGY.Clpbrd_To_Lower
[PPGEORGY.Clpbrd_To_Russian | Change text in clipboard to Russian, using phonetic layout.]
PPGEORGY.Clpbrd_To_Russian
[PPGEORGY.Clpbrd_To_English | Change text in clipboard to English, using phonetic layout.]
PPGEORGY.Clpbrd_To_English
[PPGEORGY.Clpbrd_E2r | Fix text typed in wrong layout in clipboard.]
PPGEORGY.Clpbrd_E2r
[PPGEORGY.Clpbrd_R2e | Fix text typed in wrong layout in clipboard.]
PPGEORGY.Clpbrd_R2e
[PPGEORGY.Clpbrd_To_Unicode | Show UNICODE codes of text in clipboard.]
PPGEORGY.Clpbrd_To_Unicode
[PPGEORGY.Clpbrd_Reverse | Reverse text order in clipboard.]
PPGEORGY.Clpbrd_Reverse
[PPGEORGY.Get_Input_Locale("kkkk:s, kkkk:s, ....)" | Returns the current keyboard layout of the active window.]
PPGEORGY.Get_Input_Locale("kkkk:s, kkkk:s, ....)
[PProShutdown | Predefined command list script name. Run when PowerPro is closed.]
PProShutdown
[PPSERVICES.Start | ]
PPSERVICES.Start
[PPSERVICES.Version | Returns the plugin version number as four digit number.]
PPSERVICES.Version
[PPSERVICES.Last_String_Result | ]
PPSERVICES.Last_String_Result
[PPSERVICES.Last_Numeric_Result | ]
PPSERVICES.Last_Numeric_Result
[PPSKYPE.Attach("scriptfilename") | Attach to Skype API to be able to receive notifications and send commands. script file must be stored in powerpro script folder]
PPSKYPE.Attach("scriptfilename")
[PPSKYPE.Detach | Stop listening from Skype notifications.]
PPSKYPE.Detach
[PPSKYPE.SendCommand("skypecommand") | Send a command to skype]
PPSKYPE.SendCommand("skypecommand")
[PProFlag(x) | Returns value of flag. Flags numbered 1 to that can have a value of 0 or 1.]
PProFlag(x)
[PProFolder | Folder of PowerPro configuration including terminating \.]
PProFolder
[PProNotesFolder | Folder of PowerPro notes including terminating \.]
PProNotesFolder
[PProProcessName | Name of currently running PowerPro Process.]
PProProcessName
[PProVersion | Version of PowerPro as four digit integer.]
PProVersion
[Process.Create("name", "config.PCF", init_command, running_flag) | Create a new PowerPro process using the config.PCF, running_flag = 0(error message) | 1(handle for the existing process is returned)]
Process.Create("name", "config.PCF", init_command, 0|1)
[Process.Create("debug", "debug.PCF") | Run debugging from a separate PowerPro process using the debug.PCF]
Process.Create("debug", "debug.PCF")
[Process.Close("name") | Stop a PowerPro process by its name. Same as prochandle.Close]
Process.Close("name")
[ProcessCount | Count of active processes.]
ProcessCount
[ProcessID("=exename|fullpath") | ProcessID of program from full path or =exename without .exe]
ProcessID("=exename|fullpath")
[PROG.Create_Shortcut("filePath_LNK", "targetPath", "workFolder", "description", "arguments", "iconPath", iconIndex) | Create .LNK shotcut to another file]
PROG.Create_Shortcut("filePath_LNK", "targetPath", "workFolder", "description", "arguments", "iconPath", iconIndex)
[PROG.Error_Dialog_Off() | Turn PowerPro script error dialog off.]
PROG.Error_Dialog_Off()
[PROG.Error_Dialog_On() | Turn PowerPro script error dialog on.]
PROG.Error_Dialog_On()
[PROG.Get_EXE_Type("filePath_EXE_BAT_COM") | Returns PE 4.0|PE 3.5|PE 3.0(win 32-bit app) | NE(win 16-bit app) | MZ(DOS app)]
PROG.Get_EXE_Type("filePath_EXE_BAT_COM")
[PROG.Get_Shortcut_Args("filePath_LNK") | ]
PROG.Get_Shortcut_Args("filePath_LNK")
[PROG.Get_Shortcut_Description("filePath_LNK") | ]
PROG.Get_Shortcut_Description("filePath_LNK")
[PROG.Get_Shortcut_StartDir("filePath_LNK") | ]
PROG.Get_Shortcut_StartDir("filePath_LNK")
[PROG.Get_Shortcut_Target("filePath_LNK") | ]
PROG.Get_Shortcut_Target("filePath_LNK")
[PROG.Search_Path("fileName") | Searchs %path for a file. Returns absolute path to the first file found on path, null string if nothing found]
PROG.Search_Path("fileName")
[PROG.Set_Shortcut_Arguments("filePath_LNK", "args") | ]
PROG.Set_Shortcut_Arguments("filePath_LNK", "args")
[PROG.Set_Shortcut_Description("filePath_LNK", "description") | ]
PROG.Set_Shortcut_Description("filePath_LNK", "description")
[PROG.Set_Shortcut_StartDir("filePath_LNK", "folderPath") | ]
PROG.Set_Shortcut_StartDir("filePath_LNK", "folderPath")
[PROG.Set_Shortcut_Target("filePath_LNK", "targetPath") | ]
PROG.Set_Shortcut_Target("filePath_LNK", "targetPath")
; Q
[QUIT | Stop execution of the script/function.]
QUIT
[QUIT(expression) | Stop execution of the script/function. Return a result from the script.]
QUIT(expression)
[QUIT All | Stop execution of the script/function, quit any calling scripts too.]
QUIT All
; R
[Random(maxlimit) | Returns a random integer between 0 and maxlimit-1]
Random(maxlimit)
[ReadLine("filepath", n) | Reads the nth line from text file strFilePath. Lines start at 1.]
ReadLine("filepath", n)
[Reconfigure | Predefined command list script name. Run each time the configuration dialog is closed with "OK" (only, if "Run reconfigure" is checked in Advanced Setup >Configuration)]
Reconfigure
[RecycleItems | Total number of items in recycle bin on all drives.]
RecycleItems
[RecycleSize | Total size of recycle bin on all drives in KB.]
RecycleSize
[REG.Close | Close the plugins connection to the registry.]
REG.Close
[REG.Config("filePath_INI") | Specifies a configuration ini file.]
REG.Config("filePath_INI")
[REG.Create_Key("hivename", "keypath") | Create a new key.]
REG.Create_Key("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath")
[REG.Delete_Key("hivename", "keypath") | Delete a key.]
REG.Delete_Key(["[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath")
[REG.Delete_Value("hivename", "keypath", valuename) | Delete a value.]
REG.Delete_Value("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
[REG.Enum_Key("hivename", "keypath") | Enumerate all keys within a key. If successful, returns the next key name.]
REG.Enum_Key("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath")
[REG.Enum_Keys("hivename", "keypath") | Enumerate all keys within a key. If successful, returns the names of all subkeys]
REG.Enum_Keys("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath")
[REG.Enum_Value("hivename", "keypath") | ]
REG.Enum_Value("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath")
[REG.Enum_Values("hivename", "keypath") | ]
REG.Enum_Values("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath")
[REG.Error_Dialog_Off() | Turn off dialogs appearing when a registry service call goes wrong.]
REG.Error_Dialog_Off()
[REG.Error_Dialog_On() | Turn on error dialogs appearing when a registry service call goes wrong.]
REG.Error_Dialog_On()
[REG.Expand_String("string") | Expand a string containing environmental variables.]
REG.Expand_String("string")
[REG.Get_Binary("hivename", "keypath", "valuename") | Get a REG_BINARY value. BINARY.Version=h, returns handles.]
REG.Get_Binary("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
[REG.Get_Binary("varname", "hivename", "keypath", "valuename") | Get a REG_BINARY value. BINARY.Version=v, puts binary blocks into variable.]
REG.Get_Binary("varname", "[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
[REG.Get_Dword("hivename", "keypath", "valuename") | Get a REG_DWORD value in decimal.]
REG.Get_Dword(["[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
[REG.Get_Multi_String(vector, "hivename", "keypath", "valuename") | return a REG_MULTI_SZvalue]
REG.Get_Multi_String(vector, "[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
[REG.Get_Multi_String_Element(vector, "hivename", "keypath", "valuename") | return a single string from within a REG_MULTI_SZvalue]
REG.Get_Multi_String_Element(vector, "[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
[REG.Get_String("hivename", "keypath", "valuename") | Get a REG_SZ or REG_EXPAND_SZ value.]
REG.Get_String("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
[REG.Get_Value("hivename", "keypath", "valuename") | Get type of the value.]
REG.Get_Value("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
[REG.Help | Opens the help file associated with the plugin.]
REG.Help
[REG.Returns_Nothing() | Determine what Get_xxx, Enum_xxx, Get_Value and Expand_String services return.]
REG.Returns_Nothing()
[REG.Returns_Status() | Determine what Get_xxx, Enum_xxx, Get_Value and Expand_String services return.]
REG.Returns_Status()
[REG.Returns_Values() | Determine what Get_xxx, Enum_xxx, Get_Value and Expand_String services return.]
REG.Returns_Values()
[REG.Set_Binary("hivename", "keypath", "valuename", "value") | Set a REG_BINARY value.]
REG.Set_Binary("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename", "value")
[REG.Set_Delimiter("char") | Set the character uses in ?c...c string delimiting.]
REG.Set_Delimiter("char")
[REG.Set_DWord("hivename", "keypath", "valuename", "value") | Set a REG_DWORD value.]
REG.Set_DWord("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename", "value")
[REG.Set_Multi_String(vector, "hivename", "keypath", "valuename") | ]
REG.Set_Multi_String(vector, "[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
[REG.Set_String("hivename", "keypath", "valuename", "value") | Set a REG_SZ value.]
REG.Set_String("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename", "value")
[REG.Set_UnExp_Str("hivename", "keypath", "valuename", "value") | Set a REG_EXPAND_SZ value.]
REG.Set_UnExp_Str("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename", "value")
[REG.Unload | Unload the plugin .]
REG.Unload
[REG.Version | Returns the plugin version number as four digits.]
REG.Version
[Remove("string", count) | Removes characters from string, -count removes from the end.]
Remove("string", count)
[Repeat("string", count) | Returns string formed by repeating first argument count times.]
Repeat("string", count)
[Replace("string", "strFind", "strReplace") | Returns string with first match of strFind replaced by strReplace. Regular expressions can be used in strFind.(global variable _RegExp_ gets set)]
Replace("string", "strFind", "strReplace")
[ReplaceChars("string", "chars") | chars contain search and replacement characters. All occurrences of starting characters replaced by the last character]
ReplaceChars("string", "chars")
[ReplaceChars("string", "strFind", "strReplace") | Replaces all occurrences of strFind by strReplace.]
ReplaceChars("string", "strFind", "strReplace")
[ReplaceG("string", "strFind", "strReplace") | Returns string with all matches of strFind replaced by strReplace. Regular expressions can be used in strFind.(global variable _RegExp_ gets set)]
ReplaceG("string", "strFind", "strReplace")
[Reverse("string") | Reverse string.]
Reverse("string")
[RevFind("string", "searchstring", start) | Backword index of last occurrence of searchstring within string. 0 based start index optional. Returns 0 if not found]
RevFind("string", "searchstring", start)
[RevIndex("string", "searchstring", start) | Backword index of last occurrence of searchstring within string. 1 based start index optional. Returns 0 if not found]
RevIndex("string", "searchstring", start)
[Rotate("string", n, "strPrefix", minLength) | Rotates string n chars to the left. If rotation greater than 0, prefixes the start of the string by strPrefix. If string length is less than or equal to minLength, no rotation is done]
Rotate("string", n, "strPrefix", minLength)
[Run.clistname(arg1, arg2, .. , arg23) | Run a script stored in command list called clistname with the specified arguments.]
Run.clistname(arg1, arg2)
[Run.clistname@startpoint(args) | Run a script stored in command list called clistname, start at label startpoint.]
Run.clistname(arg1, arg2)
; S
[Saver | Returns screen saver file name.]
Saver
[SaverActive | Returns 1 if saver active; 0 otherwise. Does not see Blank saver.]
SaverActive
[SaverEnabled | Returns 1 if screen saver enabled; 0 otherwise.]
SaverEnabled
[SaverTime | Returns time in seconds to screen saver start.]
SaverTime
[Screensaver.Change | Change screen saver.]
Screensaver.Change
[Screensaver.ChangeRestart | Set, clear, or reverse setting of restart screen saver when changed setting on GUI Control dialog.]
Screensaver.ChangeRestart
[Screensaver.ChangeTimeout | Change screen saver timeout (minutes)]
Screensaver.ChangeTimeout
[Screensaver.ChangeTo("filepath") | Change screen saver to specified file.]
Screensaver.ChangeTo("filepath")
[Screensaver.Disable | Disable the screen saver.]
Screensaver.Disable
[Screensaver.Enable | Enable the screen saver.]
Screensaver.Enable
[Screensaver.Start | Start screen saver.]
Screensaver.Start
[Screensaver.Stop | Stop screen saver.]
Screensaver.Stop
[Screensaver.TempDisable | disable the screen saver until the mouse is moved.]
Screensaver.TempDisable
[ScriptCallStack | Multiline string with a line per active script.(current line number and name@startlabel)]
ScriptCallStack
[ScriptFolder | Folder of currently executing script.]
ScriptFolder
[ScriptLine | Line number in currently executing script.]
ScriptLine
[ScriptName | Name of currently executing script.]
ScriptName
[ScriptPath | Script search path as set by most recent *Script Path.]
ScriptPath
[Select("string", charcount) | Get characters from string, use -charcount to get backwords]
Select("string", charcount)
[Select("string", startindex, endindex) | Get characters from string, 1 based index]
Select("string", startindex, endindex)
[SetNextDialogPos(left, top, width, height, topmost) | Set position, size of next Input dialog, 'top' in final parameter shows dialog topmost.]
SetNextDialogPos(left, top, width, height, topmost)
[SetString varName strString | Set the variable varName to the following characters except the first space character after the varName. There is no special processing for escape characters.]
SetString varName strString
[Shift | Returns pressed keys: 1(left Shift), 2(right Shift), 3(both)]
Shift
[ShortDate | Returns todays date in control panel regional short date format.]
ShortDate
[Shutdown.Dialog | Show the windows exit dialog.]
Shutdown.Dialog
[Shutdown.Hibernate | Hibernate the system.]
Shutdown.Hibernate
[Shutdown.LockWorkStation | Sign off user and lock workstation.]
Shutdown.LockWorkStation
[Shutdown.LogOff | Logoff from the system.]
Shutdown.LogOff
[Shutdown.Monitor On/Off/Stanby | Set monitor power.]
Shutdown.Monitor On|Off|Stanby
[Shutdown.PowerPro | Exit PowerPro. If command list 'PProShutdown' exists, it is run.]
Shutdown.PowerPro
[Shutdown.Reboot | Reboot the system.]
Shutdown.Reboot
[Shutdown.Restart | Restart the system.]
Shutdown.Restart
[Shutdown.Standby | Standby the system.]
Shutdown.Standby
[Shutdown.Suspend | Suspend the system.]
Shutdown.Suspend
[Shutdown.Windows | Shutdown the system.]
Shutdown.Windows
[Slice("string", charcount) | Get characters from string, use -charcount to get backwords]
Slice("string", charcount)
[Slice("string", startindex, endindex) | Get characters from string, 0 based index]
Slice("string", startindex, endindex)
[SMTP.Add_Attachment("filenames", "encodingCharset", "contentType", base64) | add an attachment to message]
SMTP.Add_Attachment("recipient", "encodingCharset", "contentType", 0|1)
[SMTP.Add_Recipient("recipient", "type") | specify a recipient to message]
SMTP.Add_Recipient("recipient", "To|CC|BCC")
[SMTP.Check_Service_Complete() | check if threaded connection process is complete]
SMTP.Check_Service_Complete()
[SMTP.Clear_Msg | remove a constructed message from the plugin]
SMTP.Clear_Msg
[SMTP.Config("filePath_INI") | Set location of configuration ini file]
SMTP.Config("filePath_INI")
[SMTP.Connect_To_Accnt("hostname", "username", "password", port, bAutoDial, "authMethod", bDNSLookup, "boundIP", "successCmd", "failCmd") | connect to SMTP server, blocks PowerPro until the message is sent]
SMTP.Connect_To_Accnt("hostname", "username", "password", port, 0|1, "None|Socks4|Socks5|HTTP", bDNSLookup, "boundIP", "successCmd", "failCmd")
[SMTP.Create_Msg("from", "subject", "text", html, "replyTo", "name", "encodingCharset", mime, "priority", "Xmailer") | create a message. HTML (and rest) optional)]
SMTP.Create_Msg("from", "subject", "text", 0|1, "replyTo", "name", "encodingCharset", 0|1, "priority", "Xmailer")
[SMTP.Disconnect("successCmd", "failCmd") | disconnect from SMTP servers]
SMTP.Disconnect("successCmd", "failCmd")
[SMTP.Error_Dialog_Off() | Turn PowerPro script error dialog off.]
SMTP.Error_Dialog_Off()
[SMTP.Error_Dialog_On() | Turn PowerPro script error dialog on.]
SMTP.Error_Dialog_On()
[SMTP.Help | opens help file for plugin, if it can be found]
SMTP.Help
[SMTP.Send_Msg("successCmd", "failCmd") | send the constructed message to connected server]
SMTP.Send_Msg("successCmd", "failCmd")
[SMTP.Set_Connection_Properties("authorisationMethod", bDNSLookup, "boundIP") | bDNSLookup and boundIP optional]
SMTP.Set_Connection_Properties("None|Plain|Encoded|Cram|NTLM", 0|1, "boundIP")
[SMTP.Set_Msg_Text("text", html) | add message text]
SMTP.Set_Msg_Text("text", 0|1)
[SMTP.Set_Proxy("type", parameters) | There may be up to 5 further parameters, depending on the proxy type]
SMTP.Set_Proxy("None|Socks4|Socks5|HTTP", parameters)
[SMTP.Set_Timeout(timeout_ms) | Set timeout period (ms) after which operation is considered to have failed]
SMTP.Set_Timeout(timeout_ms)
[SMTP.UnLoad | Remove plugin from memory.]
SMTP.UnLoad
[SMTP.Version | Returns the plugin version number as four digit number.]
SMTP.Version
[StandardConfiguration | Returns 1 if 'Use standard configuration' is checked.]
StandardConfiguration
[StringToFloat(string) | Convert string to floating point.]
StringToFloat(stringname)
[SubBarName | Returns name of current subbar]
SubBarName
[SQLL_Status | Variable set by all services]
SQLL_Status
[SQLL_Vector | Variable set by SQLL.Get_Vector and SQLL.Get_2D_Vector services]
SQLL_Vector
[SQLL_Col_Nmaes | Variable set by SQLL.Get_Vector, SQLL.Get_Vectors and SQLL.Get_2D_Vector services]
SQLL_Col_Nmaes
[SQLL_No_Rows | Variable set by SQLL.Get_Vector, SQLL.Get_Vectors and SQLL.Get_2D_Vector services]
SQLL_No_Rows
[SQLL.Close() | Close the open database]
SQLL.Close()
[SQLL.Config("filePath_INI") | Set location of configuration ini file]
SQLL.Config("filePath_INI")
[SQLL.Error_Dialog_Off() | Turn PowerPro script error dialog off.]
SQLL.Error_Dialog_Off()
[SQLL.Error_Dialog_On() | Turn PowerPro script error dialog on.]
SQLL.Error_Dialog_On()
[SQLL.Get_2D_Vector("SQL_statemen", "vector_row_count") | SQL statement that returns results from the open database (typically a SELECT statement). Set of vectors stored in a containing vector will be returned.]
SQLL.Get_2D_Vector("SQL_statement", "vector_row_count")
[SQLL.Get_Vector("SQL_statemen", "variable_name_for_vector") | SQL statement that returns results from the open database (typically a SELECT statement). A single vector of results will be returned by the service unless you provide an alternate name for the vector as a second argument.]
SQLL.Get_Vector("SQL_statement", "variable_name_for_vector")
[SQLL.Get_Vectors("SQL_statemen", "vector_row_count") | SQL statement that returns results from the open database (typically a SELECT statement). Optionally specify the initial size of the vectors returned]
SQLL.Get_Vectors("SQL_statement", "vector_row_count")
[ SQLL.Open("filepath") | Open an sqlite database. Only one database can be opened at a time. Returns 'OK' or 'ERROR']
SQLL.Open("filepath")
[SQLL.Returns_Nothing() | Determine what the calls return via 'returnval = INI.service'.]
SQLL.Returns_Nothing()
[SQLL.Returns_Status() | Determine what the calls return via 'returnval = INI.service'.]
SQLL.Returns_Status()
[SQLL.Returns_Values() | Determine what the calls return via 'returnval = INI.service'.]
SQLL.Returns_Values()
[SQLL.Sql_Stmt("SQL_statement") | Execute SQL statements that return no data]
SQLL.Sql_Stmt("SQL_statement")
;; ==============================
;; POSSIBLE STATEMENTS

;; ATTACH DATABASE
;; BEGIN TRANSACTION
;; COMMIT TRANSACTION
;; COPY (not sqlite 3)
;; CREATE INDEX
;; CREATE TABLE
;; CREATE TRIGGER
;; CREATE VIEW
;; DELETE
;; DETACH DATABASE
;; DROP INDEX
;; DROP TABLE
;; DROP TRIGGER
;; DROP VIEW
;; END TRANSACTION
;; INSERT
;; ON CONFLICT clause
;; PRAGMA
;; REPLACE
;; ROLLBACK TRANSACTION
;; UPDATE
;; VACUUM
;; ==============================
[SQLL.UnLoad | Remove plugin from memory.]
SQLL.UnLoad
[SQLL.Version | Returns plugin version.]
SQLL.Version
[Squeeze("string") | Replace all runs of two or more repeated characters by the same single character.]
Squeeze("string")
[Squeeze("string", "charlist") | Replace runs of two or more repeated characters of charlist by the same single character.]
Squeeze("string", "charlist")
[Static | Static variable declaration. (Local, but maintains value when script quits)]
Static
[StrColl("string1", "string2") | Compare two strings using local collating sequence, case sensewtive. Returns: -1(first less than second), 0(first equals second), 1(otherwise)]
StrColl("string1", "string2")
[StrIColl("string1", "string2") | Compare two strings using local collating sequence, case insensewtive. Returns: -1(first less than second), 0(first equals second), 1(otherwise)]
StrIColl("string1", "string2")
[SubBarName     | Returns name of current subbar]
SubBarName
[Switch(expr) | Select set of actions from a group. Cannot be nested in the same function.]
Switch(expr)
	Case constant1
		Break
	Case constant2
		Break
	Case Else
		Break
	EndSwitch
[Switch Exact(expr) | Select set of actions from a group. String based case-sensitive comparison.]
Switch Exact(expr)
	Case constant1
		Break
	Case constant2
		Break
	Case Else
		Break
	EndSwitch
; T
[ThreadCount | Count of active threads.]
ThreadCount
[Time | Returns time as 6 digit string hhmmss]
Time
[Timer("indexchar") | Returns the current value of timer.]
Timer("a|b|...|y|z")
[TimerRunning("indexchar") | Returns 1 if timer is running; 0 otherwise]
TimerRunning("a|b|...|y|z")
[Timer.Autosave("indexchar") | Change autosave interval of timers to the PCF file, default 300 s, 0 stops autosave.]
Timer.Autosave("a|b|...|y|z")
[Timer.Clear("indexchar") | Zero the timer.]
Timer.Clear("a|b|...|y|z")
[Timer.Set +/-/* @/$ "indexchar" h m s | Set and start or stop the timer. +(start) | -(stop) | *(toggle), @(add) | $(subtract)]
Timer.Set("[+|-|*][@|$] a|b|...|y|z h m s")
[Timer.Start("indexchar") | Start the indicated timers.]
Timer.Start("a|b|...|y|z")
[Timer.StartStop("indexchar") | Start the timer if stopped, stop if it is running.]
Timer.StartStop("a|b|...|y|z")
[Timer.Stop("indexchar") | Stop the indicated timers.]
Timer.Stop("a|b|...|y|z")
[TimeSec | Returns number of seconds since midnight January 1, 1970]
TimeSec
[TimeZone | Returns name of current timezone.]
TimeZone
[Translate("string", "fromchars", "tochars") | If found in string, any characters occuring in fromchars replaced by corresponding ones in tochars.]
Translate("string", "fromchars", "tochars")
[Trim("string") | Remove blank characters from end of string]
Trim("string")
[Tray | Predefined command list script name. displaying tray icons (only, if checked or gray checked in Command Lists >Setup >Special Lists)]
Tray
[Trim("string", "trimchars", n) | Remove characters listed in trimchars from string. n = 1(remove from start) | 2(removes from end) | 3(removes from both)]
Trim("string", "trimchars", 1|2|3)
[ToolTipSeparator | Tooltip multi-line separator character.]
ToolTipSeparator
; U
[UnixTime | Returns number of seconds since midnight January 1, 1970]
UnixTime
[Uptime | Number of seconds Windows has been running.]
Uptime
[UserName | The name of the currently signed-on user]
UserName
; V
[ValidPath("path") | Returns 1 if string (may contain wildcards: * and ?) is a valid path to a file.]
ValidPath("path")
[VARS.Chars_To_Hex_Encode("characterSelection") | Specify which characters should be saved in \xNN format.]
VARS.Chars_To_Hex_Encode("characterSelection")
[VARS.Config("filepath") | Set location of configuration INI file.]
VARS.Config("filePath_INI")
[VARS.Error_Dialog_Off() | Turn PowerPro script error dialog off.]
VARS.Error_Dialog_Off()
[VARS.Error_Dialog_On() | Turn PowerPro script error dialog on.]
VARS.Error_Dialog_On()
[VARS.Restore("tag", declareVar, "filePath_INI") | Reload all variables that were saved with VARS.Save, declareVar = 1(declare variable) | 0(variables must be declared before-default)]
VARS.Restore("tag", 0|1, "filePath_INI")
[VARS.Restore_Var("variableName", "tag", declareVar, "filePath_INI") | Load value of variable from VARS file, declareVar = 1(declare variable) | 0(variables must be declared before-default)]
VARS.Restore_Var("variableName", "tag", 0|1, "filePath_INI")
[VARS.Save_Var("variableName", "section", "filePath_INI") | Save value of script variable to INI file.]
VARS.Save_Var("variableName", "section", "filePath_INI")
[VARS.Save("section", createSections, addStatics, addGlobals, "filePath_INI") | Save all script variables to INI file. 0(no variables) | 1(all variables of the relevant storage class-including scalars, maps and vecs) | 2(picklist will popup repeatedly offering a list ) | 3(As 2, but you can select multiple variables)]
VARS.Save("section", 0|1, 0|1|2|3, 0|1|2|3, "filePath_INI")
[VARS.UnLoad | Remove plugin from memory.]
VARS.UnLoad
[VARS.Version | Returns the plugin version number as four digit number.]
VARS.Version
[VDeskEmpty("vdeskname") | Returns 1 if vdesk is empty, 0 if it is not; 2 if it does not exist.]
VDeskEmpty("vdeskname")
[VDeskHasWindow("vdeskname", "captionlist") | Returns 1 if vdesk contains a window matching captionlist.]
VDeskHasWindow("vdeskname", "captionlist")
[VDesk.Arrange | Display a window showing all desktops.]
VDesk.Arrange
[VDesk.Clear "vdeskname" | Clears the selected virtual desktop.]
VDesk.Clear "vdeskname"
[VDesk.ClearAllClose | Move all windows to current desktop and then close them.]
VDesk.ClearAllClose
[VDesk.CloseTo "vdeskname" | Move all windows to indicated desktop and then closes current desktop.]
VDesk.CloseTo "vdeskname"
[VDesk.Consolidate | Move all windows to current desktop.]
VDesk.Consolidate
[VDesk.CreateOrSwitchTo | Create a new desktop named after a command list and run the commands on the list to populate the desktop.]
VDesk.CreateOrSwitchTo
[VDesk.Menu | Display the virtual desktop menu.]
VDesk.Menu
[VDesk.MoveActive "vdeskname" | Move active window to name desktop (which must already exist).]
VDesk.MoveActive "vdeskname"
[VDesk.MoveAutorun | Moves last autorun match to named desktop.]
VDesk.MoveAutorun
[VDesk.New | Create a new desktop, you can specify its name.]
VDesk.New
[VDesk.NewFromList | Same as CreateOrSwitchTo.]
VDesk.NewFromList
[VDesk.Next | Activate the next virtual desktop.]
VDesk.Next
[VDesk.Previous | Activate the previous virtual desktop.]
VDesk.Previous
[VDesk.ReplaceByList | Clear the current desktop and rename it to the command list and run the commands on the list to populate the desktop.]
VDesk.ReplaceByList
[VDesk.ShowMenu | Show a menu of desktops and windows, select a window to move it to this desktop.]
VDesk.ShowMenu
[VDesk.SwitchMenu | Show a menu of desktops and windows, select one to activate it.]
VDesk.SwitchMenu
[VDesk.SwitchTo "vdeskname" | Switch to the indicated desktop.]
VDesk.SwitchTo "vdeskname"
[VDesk.Lock "captionlist" | Locks all visible windows matching the caption list.]
VDesk.Lock "captionlist"
[VDesk.Unlock "captionlist" | Unlocks all windows matching the caption list and leaves them on the current desktop.]
VDesk.Unlock "captionlist"
[VDesk.Recover | Meant to be used only after a PowerPro crash when windows are hidden on desktops.]
VDesk.Recover
[VDesk.MoveAll "sourcevdeskname" "destinationvdeskname" "captionlist" | All windows on the source desktop matching the caption list are moved to the destination desktop.]
VDesk.MoveAll "sourcevdeskname" "destinationvdeskname" "captionlist"
[VEC.BinIndex | Locates position for element in sorted array using binary search.]
VEC.BinIndex
[VEC.BinInsert(v, value) | Inserts the value into v if the value is not there. (v sorted in asc. order)]
VEC.BinInsert(v, value)
[VEC.BinSearch(v, value) | Searchs for value in v and returns its index. (if v is sorted in asc. order)]
VEC.BinSearch(v, value)
[VEC.Capacity(v) | Returns capacity of vector. Same as v.Capacity]
VEC.Capacity(v)
[VEC.Create(capacity, growth, minsize) | Creates a new vector and returns its handle.]
VEC.Create(capacity, growth, minsize)
[VEC.Create2D(rows, columns, minsize) | Creates a new 2D vector and returns its handle. You cannot grow or insert.]
VEC.Create2D(rows, columns, minsize)
[VEC.CreateFromLines("stringlines", growth, minsize) | Creates a new vector from the lines in a string and returns its handle.]
VEC.CreateFromLines("stringlines", growth, minsize)
[VEC.CreateFromWords("stringwords", dchars, growth, minsize) | Creates a new vector from the words in a string and returns its handle.]
VEC.CreateFromWords("stringwords", dchars, growth, minsize)
[VEC.Delete(v, index) | Deletes the element at index (zero based). Length decreases by 1. Same as v.Delete(index)]
VEC.Delete(v, index)
[VEC.DeleteAll(v) | Deletes all elements of vector; VEC.Legnth set to 0. Same as v.DeleteAll]
VEC.DeleteAll(v)
[VEC.Destroy(v) | Frees all memory assigned to v and its elements and handle. Same as v.Destroy]
VEC.Destroy(v)
[VEC.DoubleSort(v1, v2, descending, casesensetive) | Sorts v1 in asc. order and keeps elements of vector v2 in corresponding order with v1.]
VEC.DoubleSort(v1, v2, 0|1, 0|1)
[VEC.DoubleSortString(v1, v2, descending, casesensetive) | Same as VEC.DoubleSort, except contents of v1 are always treated as strings.]
VEC.DoubleSortString(v1, v2, 0|1, 0|1)
[VEC.Exists(v) | Returns 1 if vector v exists; 0 otherwise. Same as v.exists]
VEC.Exists(v)
[VEC.Get(v, index) | Retrieves element of vec v by index (zero based). Same as v[index]]
VEC.Get(v, index)
[VEC.Grow(v, growcount) | Grows capacity of vector by specified amount. Same as v.Grow(growcount)]
VEC.Grow(v, growcount)
[VEC.Insert(v, index, value) | Inserts value to element index of vector v. Same as v.Insert(index, value)]
VEC.Insert(v, index, value)
[VEC.InsertNoGrow(v, index, value) | Like VEC.Insert but if v at full capacity, last element drops. v.InsertNoGrow(index, value)]
VEC.InsertNoGrow(v, index, value)
[VEC.Length(v) | Returns length of vector. The length is one greater than the top index.]
VEC.Length(v)
[VEC.LocalCopy(Arg(1)) | ]
VEC.LocalCopy(Arg(1))
[VEC.MakeLines(v) | Elements of v are combined in a single string as separate lines with \r\n.]
VEC.MakeLines(v)
[VEC.MakeWords(v, "delimiter") | Elements of v are combined in a single string as separate words with delimiter.]
VEC.MakeWords(v, "delimiter")
[VEC.MaxVecs(n) | Raises maximum number of vectors to n. Existing vectors are preserved.]
VEC.MaxVecs(n)
[VEC.Set(v, index, value) | Assigns the string value to index element of vector v. Zero based index. Same as v[i]=value]
VEC.Set(v, index, value)
[VEC.ShowMenu(v, maxlabelchars, pos, autoclose, bgcolor, xoffset, yoffset) | Create a menu built from entries of v. Can use *sep|*colsep|*colsepline. pos = 0(at mouse) | 1 (screen center) | 2(centered under mouse) | 3(at text cursor) | 4(at 0,0) . Returns index of selection or -1]
Win.LastMouse(1)
VEC.ShowMenu(v, maxlabelchars, 0|1|2|3|4, 0|1, bgcolor, xoffset, yoffset)
butMouse = Win.LastMouse(0)
[VEC.Sort(v, descending, casesensetive) | Sorts v in asc. order (descending if descending is 1). Same as v.Sort(descending, casesensetive)]
VEC.Sort(v, 0|1, 0|1)
[VEC.SortString(v, descending, casesensetive) | As VEC.Sort except contents of v are always treated as strings.]
VEC.SortString(v, 0|1, 0|1)
[VEC.Swap(v, index1, index2) | Exchanges index1 and index2. Uses memory more effeciently. Same as v.Swap(index1, index2)]
VEC.Swap(v, index1, index2)
[19c VEC.Unload | Unload the plugin.]
VEC.Unload
[VisibleWindow | Returns 1 if string (must not be a window handle) matches any visible window, 0 otherwise.]
string.VisibleWindow
[VisibleWindow("captionlist") | Result is 1 if caption list matches any visible window.]
VisibleWindow("captionlist")
[Volume | Current master volume (0 - 255)]
Volume
; W
[Wallpaper.Show | Change wallpaper to indicated file, but do not store the file name]
Wallpaper.Show
[Wallpaper.Change | Change wallpaper to random file in same folder]
Wallpaper.Change
[Wallpaper.Change("*") | Change wallpaper to file in same folder (sequential)]
Wallpaper.Change("*")
[Wallpaper.ChangeTo("filepath") | Change wallpaper to indicated file]
Wallpaper.ChangeTo("filepath")
[Wallpaper.Style("style") | Set wallpaper style. Stretch may not work on your system.]
Wallpaper.Style("Center|Tile|Stretch")
[Wait.Active(timeout_sec, "caption") | Wait (up to n seconds) until any program with caption is active (foreground).]
Wait.Active(timeout_sec, "caption")
[Wait.Activity | Waits until mouse or keyboard activity. Starts detection after 3 sec.]
Wait.Activity
[Wait.Alt | Wait until alt key is pressed.]
Wait.Alt
[Wait.Ctrl | Wait until ctrl key is pressed.]
Wait.Ctrl
[Wait.Done | ]
Wait.Done
[Wait.Done("captionlist") | Waits until a window that matches the list is visible.]
Wait.Done("captionlist")
[Wait.For(timeout_ms) | Wait continues for timeout_ms milliseconds.]
Wait.For(timeout_ms)
[Wait.For(timeout_ms, "expression") | Wait continues for timeout_ms milliseconds or until the expression becomes true.]
Wait.For(timeout_ms, "expression")
[Wait.For("expression") | Wait continues until the expression becomes true.]
Wait.For("expression")
[Wait.ForInterval("expression") | Wait continues for the number of milliseconds given by expression.]
Wait.ForInterval("expression")
[Wait.Message(timeout_secs, "text") | Shows message with text, optionally waits timeout_secs seconds to close it automatically.]
Wait.Message(timeout_secs, "text")
[Wait.NoActive(timeout_sec, "caption") | Wait (up to timeout_sec seconds) until program with caption is not active.]
Wait.NoActive(timeout_sec, "caption")
[Wait.NoAlt | Wait until alt key is not pressed.]
Wait.NoAlt
[Wait.NoCtrl | Wait until ctrl key is not pressed.]
Wait.NoCtrl
[Wait.NoModem | Wait until there are no active Internet connections.]
Wait.NoModem
[Wait.NoSaver | Wait until screen saver is not running.]
Wait.NoSaver
[Wait.NoShift| Wait until shift key is not pressed.]
Wait.NoShift
[Wait.NoWindow(timeout_sec, "caption") | Wait until program with caption exits.]
Wait.NoWindow(timeout_sec, "caption")
[Wait.Path(timeout_sec, "pathtoprog") | Wait (up to timeout_sec seconds) until any program executed from pathtoprog is running.]
Wait.Path(timeout_sec, "pathtoprog")
[Wait.Quit | terminate all outstanding waits.]
Wait.Quit
[Wait.Ready | Waits until the last file launched by PowerPro is ready for input.]
Wait.Ready
[Wait.Ready("captionlist") | Waits 10 seconds or until window selected by captionlist is ready for input.]
Wait.Ready("captionlist")
[Wait.Saver | Wait until screen saver is running.]
Wait.Saver
[Wait.Shift | Wait until shift key is pressed.]
Wait.Shift
[Wait.Sleep(timeout_ms) | wait timeout_ms milliseconds. PowerPro will be unresponsive during the wait.]
Wait.Sleep(timeout_ms)
[Wait.Until ... | Cannot be used in nested scripts or with Do(). Monitored independently.]
Wait.Until
[Wait.Until(timeout_ms) | Wait continues for timeout_ms milliseconds.]
Wait.Until(timeout_ms)
[Wait.Until(timeout_ms, "expression") | Wait continues for timeout_ms milliseconds or until the expression becomes true.]
Wait.Until(timeout_ms, "expression")
[Wait.Until("expression") | Wait continues until the expression becomes true.]
Wait.Until("expression")
[Wait timeout_sec | wait timeout_sec seconds (must be less than or equal to 30). Equivalent to Wait.Until(n000).]
Wait timeout_sec
[Wait timeout_sec Modem | Waits (up to timeout_sec seconds) until there is an active Internet connection.]
Wait timeout_sec Modem
[Wait.Window(timeout_sec, "caption") | Wait (up to timeout_sec seconds) until any program with caption is running.]
Wait.Window(timeout_sec, "caption")
[Win | Returns pressed keys: 1(left Win), 2(right Win), 3(both)]
Win
[WIN.Active | Returns main window handle of active window.]
WIN.Active
[WIN.Area(x,y) | Returns window area (eg client, caption, max button) under screen position x,y]
WIN.Area(x, y)
;;=====================================
;; STRINGS RETURNED FROM WIN.Area(x, y)

;; BORDER      In the border of a window that does not have a sizing border.
;; BOTTOM      In the lower horizontal border of the window.
;; BOTTOMLEFT  In the lower-left corner of the window border.
;; BOTTOMRIGHT In the lower-right corner of the window border.
;; CAPTION     In a title-bar area.
;; CLIENT      In a client area.
;; GROWBOX     In a size box.
;; HSCROLL     In the horizontal scroll bar.
;; LEFT        In the left border of the window.
;; MAXBUTTON   In a Maximize button.
;; MENU        In a menu area.
;; MINBUTTON   In a Minimize button.
;; CLOSE       In a Close button.
;; NOWHERE     On the screen background or on a dividing line between windows.
;; REDUCE      In a Minimize button.
;; RIGHT       In the right border of the window.
;; SYSMENU     In a Control menu or in a Close button in a child window.
;; TOP         In the upper horizontal border of the window.
;; TOPLEFT     In the upper-left corner of the window border.
;; TOPRIGHT    In the upper-right corner of the window border.
;; TRANSPARENT In a window currently covered by another window.
;; VSCROLL     In the vertical scroll bar.
;;=====================================
[WIN.Back("captionlist"|handle) | Sends window to back (bottom) of visible windows.]
WIN.Back("captionlist"|handle)
[WIN.Beep(freq, dur) | Uses internal speaker to produce tone at frequency freq for dur milliseconds.]
WIN.Beep(freq, dur)
[WIN.Bottom("captionlist"|handle) | Returns bottom window coordinate of first window matching captionlist.]
WIN.Bottom("captionlist"|handle)
[WIN.Caption("captionlist"|handle) | Returns window caption of first window matching captionlist.]
WIN.Caption("captionlist"|handle)
[WIN.CaptionListAss("captionlist"|handle) | Returns window caption list as of first window matching captionlist.]
WIN.CaptionListAss("captionlist"|handle)
[WIN.ChildHandleList("captionlist"|handle, "text") | Returns blank separated list of child window handles. text = omitted(all) | c=classname(only those child windows of class classname) | windowtext(only windows with window text matching windowtext)]
WIN.ChildHandleList("captionlist"|handle, |"c=classname"|"windowtext")
[WIN.ChildTextByID("captionlist"|handle, id) | Returns the text child window with id of first window matching "captionlist"|handle.]
WIN.ChildTextByID("captionlist"|handle, id)
[WIN.ChildTextByIndex("captionlist"|handle, childindex) | Returns the text in the index th childwindow of first window matching "captionlist"|handle.]
WIN.ChildTextByIndex("captionlist"|handle, childindex)
[WIN.Class("captionlist"|handle) | returns window class of first window matching captionlist.]
WIN.Class("captionlist"|handle)
[WIN.ClientHeight("captionlist"|handle) | Returns client height of first window matching captionlist.]
WIN.ClientHeight("captionlist"|handle)
[WIN.ClientToScreen(child_window_handle, x, y) | Translates client coordinates to screen coordinates by child window handle.]
WIN.ClientToScreen(child_window_handle, x, y)
[WIN.ClientWidth("captionlist"|handle) | Returns client width of first window matching captionlist.]
WIN.ClientWidth("captionlist"|handle)
[WIN.Close("captionlist"|handle) | Closes first window matching "captionlist"|handle.]
WIN.Close("captionlist"|handle)
[WIN.CloseForce("captionlist"|handle) | Kills first window matching "captionlist"|handle, unsaved information is lost.]
WIN.CloseForce("captionlist"|handle)
[WIN.Crosshair() | Toggle a cross hair centered at mouse coordinates]
WIN.Crosshair()
[WIN.Crosshair(x, y) | Draws a cross hair centered at x, y. Call again with same coordinates to erase.]
WIN.Crosshair(x, y)
[WIN.Debug(sz1, sz2) | Arguments are joined with separating blank (max.500 char) and shown in a debug window.]
WIN.Debug(sz1, sz2)
[WIN.DebugClear | Clear debug windows.]
WIN.DebugClear
[WIN.DebugShow(sz1, sz2) | Arguments are joined with separating blank (max.500 char) and shown in a foreground debug window.]
WIN.DebugShow(sz1, sz2)
[WIN.DisplayNameFromHandle(handle, nameflag) | Returns display (monitor) name for the window with handle. nameflag = 0(returns "main|sec") | 1(returns device name) | 2(returns digit 1-9)]
WIN.DisplayNameFromHandle(handle, 0|1|2)
[WIN.DisplayRectFromHandle(handle, workflag, default) | Gets display rectangle which includes most of window handle, returns 4 blank-separated integers.]
WIN.DisplayRectFromHandle(handle, workflag, default)
[WIN.DisplayRectFromName(monitorName, screen|workarea) | Returns screen rectangle as 4 blank-separated integers (left top right bottom). digits 0-9 are arbitrary and could be changed by Windows at reboot]
WIN.DisplayRectFromName("Main|Sec|0-9, 0|1)
[WIN.DisplayRectFromPoint(x, y, screen|workarea, default) | Returns screen rectangle as 4 blank-separated integers (left top right bottom). default = 0(returns "" if no overlapping screen) | 1(returns main screen if window h not on a screen) | 2(returns closest screen)]
WIN.DisplayRectFromPoint(x, y, 0|1, 0|1|2)
[WIN.DropFile("captionlist"|handle, "filepath") | Simulates drag and drop of file onto first window matching "captionlist"|handle. Does not work for all programs.]
WIN.DropFile("captionlist"|handle, "filepath")
[WIN.Enable("captionlist"|handle, enabled) | Enables window matching "captionlist"|handle if flag is anystring not starting with 0; disables otherwise.]
WIN.Enable("captionlist"|handle, 0|1)
[WIN.Enabled("captionlist"|handle) | Returns 1 if first window matching captionlist is enabled, 0 otherwise.]
WIN.Enabled("captionlist"|handle)
[WIN.ExeName("captionlist"|handle) | Returns exe name (no file extension)of exe of first window matching captionlist.]
WIN.ExeName("captionlist"|handle)
[WIN.ExePath("captionlist"|handle) | Returns full path to exe of first window matching captionlist.]
WIN.ExePath("captionlist"|handle)
[WIN.Exists(handle) | Returns 1 if handle is a valid window handle (may be a child window); 0 otherwise.]
WIN.Exists(handle)
[WIN.Flash("captionlist"|handle) | Flashes Taskbar button for first window matching "captionlist"|handle until it is foreground]
WIN.Flash("captionlist"|handle)
[WIN.Flash("captionlist"|handle, flashCount) | Flashes Taskbar button for first window matching "captionlist"|handle up to flashCount times]
WIN.Flash("captionlist"|handle, flashCount)
[WIN.FullScreen(1) | Returns 1 if any window of the same process as the foreground window.]
WIN.FullScreen(1)
[WIN.FullScreen() | Returns 1 if foreground window is full screen; 0 otherwise.]
WIN.FullScreen("captionlist"|handle)
[WIN.GetClientRect("captionlist"|handle) | Returns the client rectangle of the first window matching captionlist.]
WIN.GetClientRect("captionlist"|handle)
[WIN.GetDesktopName() | Returns name of Windows desktop; returns empty if desktop cannot be opened.]
WIN.GetDesktopName()
[WIN.GetDisplayRect(monitorindex, onlyworkarea) | Returns screen rectangle as four blank separated integers: left, top, right, bottom. monitorindex of multiple displays is arbitrary and could be changed by Windows on each boot.]
WIN.GetDisplayRect(0-9, 0|1)
[WIN.GetFocus() | Returns handle of window with focus; may be a child window.]
WIN.GetFocus()
[WIN.GetLanguage("captionlist"|handle) | Returns an integer representing current language being used by first window matching captionlist.]
WIN.GetLanguage("captionlist"|handle)
[WIN.GetPixel(x, y) | Returns red, green, blue at position x, y. Top left is (0,0).]
WIN.GetPixel(x, y)
[WIN.GetPixel1(x, y) | Returns red, green, blue at position x, y as single number. Top left is (0,0).]
WIN.GetPixel1(x, y)
[WIN.GetPrinters() | Returns multi line string with one printer per line.]
WIN.GetPrinters()
[WIN.GetProcessID(handle) | Returns the process id of the process for the window with handle.]
WIN.GetProcessID(handle)
[WIN.GetRect("captionlist"|handle) | Returns the rectangle of the first window matching captionlist.]
WIN.GetRect("captionlist"|handle)
[WIN.GetSysColor(systemindex) | Returns single number representing RGB color (red is lowest byte) for system index n (check GetSysColor MS documentation)]
WIN.GetSysColor(systemindex)
[WIN.GetSystemMetrics(string) | Calls windows function to access system metrics.]
WIN.GetSystemMetrics(string)
[WIN.GetText(handle) | Issues WM_GETTEXT to window with handle; the receiving window may return its text.]
WIN.GetText(handle)
[WIN.GetWorkarea() | Returns screen work area (area outside visible Taskbar)]
WIN.GetWorkarea()
[WIN.GetWorkingDir("captionlist"|handle) | Gets working directory of window matching "captionlist"|handle.]
WIN.GetWorkingDir("captionlist"|handle)
[WIN.Handle("captionlist"|handle) | Returns window handle of first window matching "captionlist"|handle.]
WIN.Handle("captionlist"|handle)
[WIN.Handle("captionlist"|handle, "windowText") | Returns handle of child window of first top window matching "captionlist"|handle containing windowText.]
WIN.Handle("captionlist"|handle, "windowText")
[WIN.HandleFromID("captionlist"|handle, id) | Returns handle for child window with id and parent "captionlist"|handle.]
WIN.HandleFromID("captionlist"|handle, id)
[WIN.HandleFromIndex("captionlist"|handle, childindex) | Returns handle of child window of main window matching "captionlist"|handle where child window has index number childindex.]
WIN.HandleFromIndex("captionlist"|handle, childindex)
[WIN.HandleFromPoint(x, y) | Returns handle of window under screen position x,y; could be a child window.]
WIN.HandleFromPoint(x, y)
[WIN.HandleList("captionlist", hidden) | Returns blank separated list of window handles matching captionlist. inv = 1(hidden) | 2(hidden with blank captions)]
WIN.HandleList("captionlist", |1|2)
[WIN.HasCaption("captionlist"|handle) | Returns 1 if first window matching captionlist has a caption, 2 if toolbar caption, 0 otherwise.]
WIN.HasCaption("captionlist"|handle)
[WIN.Height("captionlist"|handle) | Returns height of first window matching captionlist.]
WIN.Height("captionlist"|handle)
[WIN.Hex(number) | Returns hexadecimal equivalent for number.]
WIN.Hex(number)
[WIN.Hide("captionlist"|handle) | Hides first visible window matching "captionlist"|handle.]
WIN.Hide("captionlist"|handle)
[WIN.IDFromHandle(handle) | Returns window id for child window with handle]
WIN.IDFromHandle(handle)
[WIN.IndexFromHandle(handle) | Returns index of child window with handle]
WIN.IndexFromHandle(handle)
[WIN.IsDBCSLeadByte(str) | Returns 1 if first character of str is DBCS lead byte according to current code page.]
WIN.IsDBCSLeadByte(str)
[WIN.Keys(sz) | Sends keys in string sz to active window (same as SendKeys).]
WIN.Keys(sz)
[WIN.KeyState(virtualKeyCode) | Returns 0 if key is up, 1 if down. (search web for values of Virtual Key codes)]
WIN.KeyState(virtualKeyCode)
[WIN.LastMouse(0) | Returns last mouse button up: 1(left), 2 (middle), 3 (right)]
WIN.LastMouse(0)
[WIN.LastMouse(1) | Set default mouse return for next WIN.LastMouse(0). example: WIN.LastMouse(1) / Vec.ShowMenu(...) / mouse=WIN.LastMouse(0)]
WIN.LastMouse(1)
[WIN.Left("captionlist"|handle) | Returns left window coordinate of first window matching captionlist.]
WIN.Left("captionlist"|handle)
[WIN.MainUnder | Returns window handle of main (parent) window under mouse.]
WIN.MainUnder
[WIN.MainHandleFromPoint(x, y) | Returns window handle of main (parent) window at under screen position x,y.]
WIN.MainHandleFromPoint(x, y)
[WIN.MakeRect(left, top, right, bottom) | Builds rect structure from four numbers.]
WIN.MakeRect(left, top, right, bottom)
[WIN.MapPoints(rect1, rect2, ptsIn) | ptsIn contains one or more point as blank separated numbers. These are mapped from coordinate system in rect1 to coordinate system in rect2. ("0 0 1000 1000", Win.GetWorkarea,"0 0 250 250") maps to upper left quarter of work area.]
WIN.MapPoints(rect1, rect2, ptsIn)
[WIN.Matches(handle, captionlist) | Returns true if main window with handle matches captionlist.]
WIN.Matches(handle, captionlist)
[WIN.Maxable("captionlist"|handle) | Returns 1 if first window matching captionlist has maximize box, 0 otherwise.]
WIN.Maxable("captionlist"|handle)
[WIN.Maximize("captionlist"|handle) | Maximizes first visible window matching "captionlist"|handle.]
WIN.Maximize("captionlist"|handle)
[WIN.Maxxed("captionlist"|handle) | Returns 1 if first window matching captionlist is maximized, 0 otherwise.]
WIN.Maxxed("captionlist"|handle)
[WIN.Menu("captionlist", param) | Show menu of all active windows matching captionlist and returns handle of selected one. param optional.]
WIN.Menu("captionlist", "Hidden|TrayMin|OnlyHidden")
[WIN.Message("message", "title") | Displays a messagebox.]
WIN.Message("message", "title")
[WIN.MessageBeep("type") | produces system sound]
WIN.MessageBeep("OK|Hand|Exclamation|Question")
[WIN.Minable("captionlist"|handle) | Returns 1 if first window matching captionlist has minimize box, 0 otherwise.]
WIN.Minable("captionlist"|handle)
[WIN.Minimize("captionlist"|handle) | Minimizes first visible window matching "captionlist"|handle.]
WIN.Minimize("captionlist"|handle)
[WIN.Minned("captionlist"|handle) | Returns 1 if first window matching captionlist is minimized, 0 otherwise.]
WIN.Minned("captionlist"|handle)
[WIN.MoveToDisplay(captionlist, monitorName) | Moves first visible window matched by captionlist to monitorName. digits 0-9 are arbitrary and could be changed by Windows at reboot]
WIN.MoveToDisplay("captionlist"|handle, "Main|Sec|0-9)
[WIN.MouseTo(x, y) | Moves mouse cursor to screen position x, y]
WIN.MouseTo(x, y)
[Win.Mouse("expression") | All commands of Win.Mouse can be combined in a space-separated expression]
Win.Mouse("Alt Ctrl Shift Win LeftClick LeftDown LeftUp LeftDouble MiddleClick MiddleDown MiddleClick MiddleUp MiddleDouble RightClick RightDown RightUp RightDouble Save Restore Move x y Screen x y Relative x y")
[Win.Mouse("Alt") | Reverse alt key (ie press if up, release if down) shortform: al]
Win.Mouse("Alt")
[Win.Mouse("Ctrl") | Reverse ctrl key (ie press if up, release if down) shortform: ct]
Win.Mouse("Ctrl")
[Win.Mouse("Shift") | Reverse shift key (ie press if up, release if down) shortform: sh]
Win.Mouse("Shift")
[Win.Mouse("Win") | Reverse win key (ie press if up, release if down) shortform: wi]
Win.Mouse("Win")
[Win.Mouse("LeftClick") | Left click (both left down and left up). shortform: lc]
Win.Mouse("LeftClick")
[Win.Mouse("LeftDown") | Left down. shortform: ld]
Win.Mouse("LeftDown")
[Win.Mouse("LeftUp") | Left up. shortform: lu]
Win.Mouse("LeftUp")
[Win.Mouse("LeftDouble") | Double click left (lc lc will not work). shortform: ll]
Win.Mouse("LeftDouble")
[Win.Mouse("MiddleClick") | Middle click (both middle down and middle up). shortform: mc]
Win.Mouse("MiddleClick")
[Win.Mouse("MiddleDown") | Middle down. shortform: md]
Win.Mouse("MiddleDown")
[Win.Mouse("MiddleUp") | Middle up. shortform: mu]
Win.Mouse("MiddleUp")
[Win.Mouse("MiddleDouble") | Double click middle (mc mc will not work). shortform: mm]
Win.Mouse("MiddleDouble")
[Win.Mouse("RightClick") | Right click (both right down and right up). shortform: rc]
Win.Mouse("RightClick")
[Win.Mouse("RightDown") | Right down. shortform: rd]
Win.Mouse("RightDown")
[Win.Mouse("RightUp") | Right up. shortform: ru]
Win.Mouse("RightUp")
[Win.Mouse("RightDouble") | Double click right (rc rc will not work). shortform: rr]
Win.Mouse("RightDouble")
[Win.Mouse("Save") | Save current mouse position. shortform: sa]
Win.Mouse("Save")
[Win.Mouse("Restore") | Restore mouse position.]
Win.Mouse("Restore")
[Win.Mouse("Move x y") | Move mouse x pixels right, y pixels down (x or y can be negative). shortform: mo x y]
Win.Mouse("Move x y")
[Win.Mouse("Screen x y") | Set mouse to absolute position x y (absolute means 0 0 is top left of screen). shortform: ab x y]
Win.Mouse("Screen x y")
[Win.Mouse("Relative x y") | Set mouse to relative position x y (relative means 0 0 is top left of active window). shortform: re x y]
Win.Mouse("Relative x y")
[WIN.Move("captionlist"|handle, "x y") | Set the window position of first window matching captionlist]
WIN.Move("captionlist"|handle, "x y")
[WIN.Move("captionlist"|handle, x, y) | Moves first window matching captionlist to position x, y.]
WIN.Move("captionlist"|handle, x, y)
[WIN.OnTop("captionlist"|handle) | Toogle topmost state.]
WIN.OnTop("captionlist"|handle)
[WIN.OnTop("captionlist"|handle, topmost) | Set window topmost state. flag = 0(normal) | 1(topmost)]
WIN.OnTop("captionlist"|handle, 0|1)
[WIN.Owner(handle) | Returns the owner of the window with handle]
WIN.Owner(handle)
[WIN.Parent(handle) | Returns the parent of the window with handle]
WIN.Parent(handle)
[WIN.Parent(handle, 1) | Returns the top level parent of the window with handle]
WIN.Parent(handle, 1)
[WIN.PostMessage("captionlist"|handle, "msg", wp, lp) | Posts message msg to first window matching "captionlist"|handle.]
WIN.PostMessage("captionlist"|handle, "msg", wp, lp)
[WIN.RectToFile("left top right bottom", "filepath", resizeWidth, resizeHeight) | Capture screen to BMP filepath. Resize optional.]
WIN.RectToFile("left top right bottom", "filepath", resizeWidth, resizeHeight)
[WIN.ResetFocus(maxwait_ms) | If PowerPro bar or Taskbar icon is foreground, makes previous window foreground.]
WIN.ResetFocus(maxwait_ms)
[WIN.Resizable("captionlist"|handle) | Returns 1 if first window matching captionlist is resizable, 0 otherwise.]
WIN.Resizable("captionlist"|handle)
[WIN.Right("captionlist"|handle) | Returns right window coordinate of first window matching captionlist.]
WIN.Right("captionlist"|handle)
[WIN.Restore("captionlist"|handle) | Restore first visible window matching "captionlist"|handle.]
WIN.Restore("captionlist"|handle)
[WIN.Rolled("captionlist"|handle) | Returns 1 if first window matching captionlist is rolled up, 0 otherwise.]
WIN.Rolled("captionlist"|handle)
[WIN.RollUp("captionlist"|handle) | Rolls up window matching "captionlist"|handle; unrolls if already is rolled up.]
WIN.RollUp("captionlist"|handle)
[WIN.ScreenToClient(handle, x, y) | Translates screen coordinates to client coordinates by child window handle.]
WIN.ScreenToClient(handle, x, y)
[WIN.SendCopyData("captionlist"|handle, "dword", "string") | Sends wm_copydata to first window matching "captionlist"|handle, with dwdata=dword and lpdata=string.]
WIN.SendCopyData("captionlist"|handle, "dword", "string")
[WIN.SendKeys("keys") | Send keys in string to active window.]
WIN.SendKeys("keys")
[WIN.SendMessage("captionlist"|handle, "msg", wp, lp) | Sends message msg to first window matching "captionlist"|handle; both wp and lp are sent as DWORDs.]
WIN.SendMessage("captionlist"|handle, "msg", wp, lp)
[WIN.SendMessageStr("captionlist"|handle, "msg", wp, str) | Sends message msg to first window matching "captionlist"|handle; lp is sent as pointer to str.]
WIN.SendMessageStr("captionlist"|handle, "msg", wp, str)
[WIN.SendMessageStrRemote("captionlist"|handle, "msg", wp, str) | Sends message msg to first window matching "captionlist"|handle; lp is sent as pointer to str which is used for output.]
WIN.SendMessageStrRemote("captionlist"|handle, "msg", wp, str)
[WIN.SendMouse(a1, a2, ...) | Send mouse actions which is compatible with Windows Vista/7.]
WIN.SendMouse(a1, a2, ...)
[WIN.SetDebug(n) | n = 0(pause debug output) | 1(resume output). Also selects where debug output is written.]
WIN.SetDebug(0|1|"Screen|Gile|GileNew|Both|BothNew")
[WIN.SetFocus(handle) | Set focus and foreground to window with handle, may be a child window.]
WIN.SetFocus(handle)
[WIN.SetDefaultPrinter("printer") | Set default printer; returns 1 if successful, 0 otherwise.]
WIN.SetDefaultPrinter("printer")
[WIN.SetPos10000("captionlist", relativeto, left, top, right, bottom) | Set position of window matching captionlist. Position relative to full (s)creen/(w)ork area.]
WIN.SetPos10000("captionlist"|handle, "s|w", left, top, right, bottom)
[WIN.SetRect("captionlist"|handle, "left top right bottom") | Set the size and position of the first window matching captionlist.]
WIN.SetRect("captionlist"|handle, "left top right bottom")
[WIN.SetSysColor(systemindex, rgb) | Set system index n color to RGB (red is lowest byte) for system index n (check GetSysColor MS documentation)]
WIN.SetSysColor(systemindex, rgb)
[WIN.SetText("captionlist"|handle, "newtext") | Issues WM_SETTEXT which may set the text of the window matching "captionlist"|handle to newtext.]
WIN.SetText("captionlist"|handle, "newtext")
[WIN.SetTool("captionlist"|handle, flag) | Changes toolwindow style of first window. Toolbar style windows (narrow caption) are not shown on the taskbar. flag = 0(clear) | 1(set), -1(toggle)]
WIN.SetTool("captionlist"|handle, -1|0|1)
[WIN.SetWorkArea() | Set screen work area to full size of physical screen.]
WIN.SetWorkArea()
[WIN.SetWorkArea("left top right bottom") | Set the work area according to the four blanks separated integers.]
WIN.SetWorkArea("left top right bottom")
[WIN.SetWorkArea(left, top, right, bottom) | Set the screen work area.]
WIN.SetWorkArea(left, top, right, bottom)
[WIN.SetWorkingDir("path") | Set PowerPro working directory.]
WIN.SetWorkingDir("path")
[WIN.Show("captionlist"|handle, flag) | Show first window matching "captionlist"|handle. flag = omitted(Use PowerPro internal window activation process) | 1(restore if icon and show) | 2(ignore icon state, just show) | 3(set foreground only)]
WIN.Show("captionlist"|handle, |1|2|3)
[WIN.ShowNA("captionlist"|handle) | Shows the window matching "captionlist"|handle but does not activate it.]
WIN.ShowNA("captionlist"|handle)
[WIN.Size("captionlist"|handle, "w h") | Set the window size of first window matching captionlist]
WIN.Size("captionlist"|handle, "w h")
[WIN.Size("captionlist"|handle, w, h) | Set the window size of first window matching captionlist]
WIN.Size("captionlist"|handle, w, h)
[WIN.TerminateProcess(processID) | Kills process with PID.]
WIN.TerminateProcess(processID)
[WIN.ToFile("captionlist"|handle, "filepath", resizeWidth, resizeHeight, client_part_only) | Capture window to BMP filepath. Resize to width and height (optional). client_part_only = 1(capture only client portion)]
WIN.ToFile("captionlist"|handle, "filepath", resizeWidth, resizeHeight, 0|1)
[WIN.ToolWindow("captionlist"|handle) | Returns 1 if first window matching captionlist is toolwindow, 0 otherwise.]
WIN.ToolWindow("captionlist"|handle)
[WIN.Top("captionlist"|handle) | Returns top window coordinate of first window matching captionlist.]
WIN.Top("captionlist"|handle)
[WIN.TopMost("captionlist"|handle) | Returns 1 if first window matching captionlist is topmost, 0 otherwise.]
WIN.TopMost("captionlist"|handle)
[WIN.Trans("captionlist"|handle, level) | Makes window matching "captionlist"|handle transparent level (0-295)]
WIN.Trans("captionlist"|handle, 0-295)
[WIN.Trans("captionlist"|handle, -level) | Toggle transparency state of window matching "captionlist"|handle]
WIN.Trans("captionlist"|handle, -0-295)
[WIN.TransMouse("captionlist"|handle, level) | Makes window matching "captionlist"|handle transparent (0-295). Mouse clicks go through window]
WIN.TransMouse("captionlist"|handle, 0-295)
[WIN.TransMouse("captionlist"|handle, -level) | Toggle transparency state of window matching "captionlist"|handle. Mouse clicks go through window]
WIN.TransMouse("captionlist"|handle, -0-295)
[WIN.TrayMin("captionlist"|handle) | Tray minimizes first window matching "captionlist"|handle; restores if already in tray.]
WIN.TrayMin("captionlist"|handle)
[WIN.TrayMinned("captionlist"|handle) | Returns 1 if first window matching captionlist is tray minned, 0 otherwise.]
WIN.TrayMinned("captionlist"|handle)
[WIN.Under | Returns window handle of window under mouse (may be child window).]
WIN.Under
[WIN.Visible("captionlist"|handle) | Returns 1 if first window matching captionlist exists, 0 if hidden exists, empty string otherwise.]
WIN.Visible("captionlist"|handle)
[WIN.VisibleOwner(handle) | Returns the owner of the window with handlehan if it is visible and not zero-sized.]
WIN.VisibleOwner(handle)
[WIN.VScreenHeight | Return height of virtual screen.]
WIN.VScreenHeight
[WIN.VScreenLeft | Return left coordinate of virtual screen.]
WIN.VScreenLeft
[WIN.VScreenTop | Return top coordinate of virtual screen.]
WIN.VScreenTop
[WIN.VScreenWidth | Return width of virtual screen.]
WIN.VScreenWidth
[WIN.Width("captionlist"|handle) | Returns width first window matching captionlist.]
WIN.Width("captionlist"|handle)
[Window("AnyWindow", param) | Returns anywindow]
Window("AnyWindow", "captionlist|Active|Under|Taskbar")
[Window("Caption", param) | Returns caption text]
Window("Caption", "captionlist|Active|Under|Taskbar")
[Window("Class", param) | Returns window class]
Window("Class", "captionlist|Active|Under|Taskbar")
[Window("ExeName", param) | Returns exename]
Window("ExeName", "captionlist|Active|Under|Taskbar")
[Window("ExeFullPath", param) | Returns exefullpath]
Window("ExeFullPath", "captionlist|Active|Under|Taskbar")
[Window("FirstWindow", param) | Returns firstwindow]
Window("FirstWindow", "captionlist|Active|Under|Taskbar")
[Window("Left", param) | Returns left coordinate.]
Window("Left", "captionlist|Active|Under|Taskbar")
[Window("Minimized", param) | Returns minimized state]
Window("Minimized", "captionlist|Active|Under|Taskbar")
[Window("Maximized", param) | Returns maximized state]
Window("Maximized", "captionlist|Active|Under|Taskbar")
[Window("Top", param) | Returns top coordinate.]
Window("Top", "captionlist|Active|Under|Taskbar")
[Window("Bottom", param) | Returns bottom coordinate.]
Window("Bottom", "captionlist|Active|Under|Taskbar")
[Window("Right", param) | Returns right coordinate.]
Window("Right", "captionlist|Active|Under|Taskbar")
[Window("Height", param) | Returns height.]
Window("Height", "captionlist|Active|Under|Taskbar")
[Window("Topmost", param) | Returns topmost state]
Window("Topmost", "captionlist|Active|Under|Taskbar")
[Window("VDesk", "vdeskname") | Returns list of handles of windows on vdeskname.]
Window("VDesk", "vdeskname")
[Window("Visible", param) | Returns visible state]
Window("Visible", "captionlist|Active|Under|Taskbar")
[Window("VisibleWindow", param) | Returns if window visible]
Window("VisibleWindow", "captionlist|Active|Under|Taskbar")
[Window("Width", param) | Returns width.]
Window("Width", "captionlist|Active|Under|Taskbar")
[Window.AutoMin("spec") | Minimize window to tray if window matches AutoTrayMin on Window Control tab, ordinary minimize otherwise.]
Window.AutoMin("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.Back("spec") | Send window to bottom of stack of displayed windows.]
Window.Back("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.BackShow("spec") | Send window to back if it is foremost/activate if it is not.]
Window.BackShow("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.Center("spec") | Center specified window(s).]
Window.Center("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.Close("spec") | Close specified bar(s) or window(s).]
Window.Close("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.Close2("spec") | Close the window using a different technique than Close.]
Window.Close2("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.CloseForce("spec") | Forces the window to close, you may lose unsaved information.]
Window.CloseForce("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.Hide("spec") | Make specified window(s) invisible.]
Window.Hide("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.Max("spec") | Maximize specified window(s).]
Window.Max("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.MaxNormal("spec") | Maximize normal window/make maximized window normal.]
Window.MaxNormal("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.Min("spec") | Minimize specified window(s).]
Window.Min("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.MinMemory("spec") | Optimize memory working set (NT only)]
Window.MinMemory("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.MinRestore("spec") | Restore minimized window/minimize otherwise.]
Window.Normal("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.Move("spec") | Move specified window by moving mouse, click any mouse button to stop.]
Window.Move("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.Normal("spec") | Show specified window(s) in normal state.]
Window.Normal("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.NotTop("spec") | Remove OnTop status of specified window(s).]
Window.NotTop("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.OnTop("spec") | Make specified window(s) OnTop.]
Window.OnTop("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.Position(x, y, w, h, "spec") | Set a window's position and size.]
Window.Position(x, y, w, h, "captionlist|Active|ActiveBar|All|AutoRun|Menu|Menu Hidden|Menu TrayMin|Menux|Under|Under Parent")
[Window.PostMessage(m, w, l, "spec") | Does PostMessage(h, m, w, l) where h is selected window]
Window.PostMessage(m, w, l, "captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.Rollup("spec") | Roll up the window to caption/show if it is already rolled-up.]
Window.Rollup("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.SendMessage(m, w, l, "spec") | Does SendMessage(h, m, w, l) where h is selected window, variable SendMessage is set to result of the SendMessage call]
Window.SendMessage(m, w, l, "captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.SetPriority("priority", "spec") | Set process priority of selected window.]
Window.SetPriority("idle/below/normal/above/high", "captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.Show("spec") | Activate the window and show it if hidden.]
Window.Show("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.Size("spec") | Size specified window by moving mouse, click any mouse button to stop.]
Window.Size("captionlist|Active|ActiveBar|All|AutoRun|Menu|Menu Hidden|Menu TrayMin|Menux|Under|Under Parent")
[Window.TopNotTop("spec") | Reverse OnTop status of specified window(s).]
Window.TopNotTop("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.Trans(x, "spec") | Make window transparent (W2K, XP only)]
Window.Trans(x, "captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.TransMouse(x, "spec") | make window transparent, put on top and make all mouse clicks pass through (W2K, XP only)]
Window.TransMouse(x, "captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[Window.TrayMin("spec") | Minimize specified window(s) to tray.]
Window.TrayMin("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
[WindowsVersion | 4 blank-separated numbers: major version, minor version, build, platform id.]
WindowsVersion
[With var.subvar | Treats any dots which are not preceded by a variable as if they were preceded by the var.subvar. Max.nest depth is 3.]
For Each var_result Index1 var_index In expression_or_var

	EndWith
[Word("string", 0, "delims") | Returns the number of words in the string; delims is seperator character (default blank and tab)]
Word("string", 0, "delims")
[Word("string", n, "delims") | Scans the string and returns the nth word; delims is seperator character (default blank and tab)]
Word("string", n, "delims")
; X
[xCursor | Returns horizontal text cursor position in pixels (0 for left edge of screen)]
xCursor
[xMouse | Returns horizontal mouse position in pixels (0 for left edge of screen)]
xMouse
[xScreen | Returns screen width in pixels. Current horizontal resolution.]
xScreen
[xTime | Returns time in control panel regional time format.]
xTime
[XUTILS.DisableIdleTimers() | Disable operating system system idle and display idle timers.]
XUTILS.DisableIdleTimers()
[XUTILS.DisableIdleTimers(1) | Disable screen saver.]
XUTILS.DisableIdleTimers(1)
[XUTILS.EjectCD(driveletter) | Eject CD drive. Without parameter ejects the first CD drive.]
XUTILS.EjectCd([driveletter])
[XUTILS.EnableIdleTimers() | Enable operating system system idle and display idle timers.]
XUTILS.EnableIdleTimers()
[XUTILS.EnableIdleTimers(1) | Enable screen saver.]
XUTILS.EnableIdleTimers(1)
[XUTILS.LoadCD("driveletter") | Close door of CD drive. Without parameter closes door of the first CD drive.]
XUTILS.LoadCd("driveletter")
[XUTILS.RunAs("filePath", "args", "username", "workFolderPath") | Start an application using given credentials. Asks for credentials.]
XUTILS.RunAs("filePath", "args", "username", "workFolderPath")
[XUTILS.ScrollDown(linecount) | Simulates scrolling down with mouse scroll wheel. linecount optional]
XUTILS.ScrollDown(linecount)
[XUTILS.ScrollUp(linecount) | Simulates scrolling up with mouse scroll wheel. linecount optional]
XUTILS.ScrollUp(linecount)
[XUTILS.SuDo("filePath", "args", "workFolderPath") | Start an application using administrator account. Asks for administrator's password.]
XUTILS.SuDo("filePath", "args", "workFolderPath")
; Y
[yCursor | Returns vertical text cursor position in pixels (0 for top edge of screen)]
yCursor
[yMouse | Returns vertical mouse position in pixels (0 for top edge of screen)]
yMouse
[yScreen | Returns screen height in pixels. Current vertical resolution.]
yScreen
; Z
[ZA.Get_In | returns the current session's inbound TCP/IP traffic from ZoneAlarm]
ZA.Get_In
[ZA.Get_Lock | returns 1 if ZoneAlarm is locked, 2 if the emergency lock is engaged, and 0 otherwise]
ZA.Get_Lock
[ZA.Get_Out | returns the current session's outward TCP/IP traffic from ZoneAlarm]
ZA.Get_Out
[ZA.Switch_Lock | locks or unlocks ZoneAlarm]
ZA.Switch_Lock
[ZA.UnLoad | Remove plugin from memory.]
ZA.UnLoad

;
; -----------------------------------------------------------------------------
; TREE CONTENT
; -----------------------------------------------------------------------------
[Tree content]

;
; --------------------------------------------------------------------
;                              AUTOCOMPLETE KEYWORDS
; --------------------------------------------------------------------
[Keywords]
; VARIABLES GLOBAL       (RESERVED WORDS)
_AutoInit_
_BreakPoints_
_Exit_
_File_
_Folder_
_LastError_
_PickedLine_
_RegExp_
AcDc
AllDeskNames
AllGlobals
AllPProProcessName
AllStatics
Alt
BatteryPercent
BrowserDomain
BrowserSubDomain
BrowserURL("IExplore|Netscape|Firefox|Maxthon|Mozilla")
Caption
CaptionUnder
CdCurTrack
CdLastTrack
Clip
ClipTrackOn
Context
ContextLast
Cpu
Ctrl
CurrentDir
Date
DayOfWeek
DayOfYear
DefaultPrinter
DeskEmpty
DeskName
DeskNum
DialupName
Disk
DunIdle
DunRate
EXEFileName
EXEFullPath
Gdi
IsUserAdmin
KeyLog
KeyLogFile
LastActiveHandle
LastAutoRunHandle
LastButtonType
LastClipName
LastClipPath
LastIdleTime
LastModKeys
LastMouseKeyTime
LastNoteHandle
LastScanCode
LastTrayID
LastVkCode
Longdate
Modem
Mounted("driveletter")
Mouse4
Mouse5
MouseLeft
MouseMiddle
MouseRight
Muted
OnErrorSetting
Paper
PcfName
PerfCount
PerfFreq
Pmem
PProFlag(x)
PproFolder
PProNotesFolder
PProProcessName
PproVersion
ProcessCount
RecycleSize
RecylceItems
Saver
SaverActive
SaverEnabled
SaverTime
SendMessage
ScriptCallStack
ScriptFolder
ScriptLine
ScriptName
ScriptPath
Shift
ShortDate
StandardConfiguration
SubbarName
Threadcount
Time
TimeSec
TimeZone
ToolTipSeparator
UnixTime
Uptime
User
Username
Volume
WindowsVersion
xCursor
xMouse
xScreen
xTime
yCursor
yMouse
yScreen

; *** SCRIPT COMMANDS      (KEYWORDS)
Global
Local
Static
Break
Case constant1
Case Else
Continue
Debug
Do("filePath", "params", "workFolderPath", "Max|Min|SwitchTo|NormalUser|Topmost|Hidden|TrayMin")
Do(ppcmd.action(params))
Do("ppcmd", "action and params", "keywords")
Else
ElseIf (
EndFor
ENDFUNCTION
EndSwitch
EndWith
Exact
For(var = initexpr; testexpr; var = increxpr)
For(testexpr)
For Each var_result In expression_or_var
For Each var_result Index var_index In expression_or_var
FUNCTION funcname
If (
If ( ) do
If(condition, result1)
IfElse(expr, result1, result2)
IfElse(expr, "result1,result2")
IfX (
Imports(filePath_expression) Static
Imports(filePath_expression) func1 func2 func3
Jump
QUIT
QUIT(expression)
QUIT All
Return
Switch(expr)
Switch Exact(expr)
With

; *** INTERNAL FUNCTIONS       (KEYWORDS)
Abs(x)
ActiveWindow("captionlist")
AnyWindow("captionlist")
Arg(index)
Args
Assign("var1", "var2")
Call("filePath@entry", args)
Case("Acronym", "string")
Case("FromNum", "string")
Case("FromNumX", "string")
Case("Lower", "string")
Case("Sentence", "string")
Case("Title", "string")
Case("ToNum", "string")
Case("ToNumX", "string")
Case("Upper", "string")
CB("entry", args)
CBx("entry", args)
ConvertBase("string"|number, fromBase, toBase)
CRC32("string")
DiskSpace("kfree|kuser|ksize|mfree|muser|msize", "c:")
Env("environmentVariableName")
Esc(?+string+, ?+c+)
Eval("string")
Flag Set 1-31 1-31
Flag Clear 1-31 1-31
Flag Reverse 1-31 1-31
FileMenu("filepath", "Offset x y|Screen x y|CenterUnderMouse|CenterScreen|HorButton|HorButtonCenter|VerButton|Cursor")
Fill("string1", "string2")
Find("string", "searchstring", start)
FloatToString(x)
FormatDate("d,dd,ddd,dddd,M,MM,MMM,MMMM,YY,YYYY", date)
FormatTime("hh,H,HH,m,mm,s,ss,t,tt", time)
Index("string", "searchstring", start)
Input("title")
InputCancel("title")
InputColor("defaultColor")
InputDate
InputDateTime
InputDefault("default", "title")
InputDialog("var1=editboxtitle, var2=checkbox label??, var3=combo title??item1|item2, var4=combo title?§|item1|item2, var5==title, ~var6=title6"", "dialogtitle")
InputFolder("path")
InputPath("path")
InputPathMulti("path")
InputSaveAsPath("path")
InputText
IsNumber("string")
Join("string1", "string2")
Length("string")
Line("string", 0)
Line("string", lineindex)
Match("string", "pattern")
MatchG("string", "pattern")
Max("string1", "string2")
MCI
MessageBox("[AbortRetryIgnore|OkCancel|RetryCancel|YesNoCancel|YesNo|Ok] [Topmost] [Asterisk|Error|Exclamation|Information|Stop|Question|Warning]", "text", "title")
Min("string1", "string2")
NextWord("string", "variablename", "delims")
PickFile("filepathlist", "title")
PickString("string1\rstring2\rstring3", "title")
ProcessID("=exename|fullpath")
Random(maxlimit)
ReadLine("filepath", n)
Remove("string", count)
Repeat("string", count)
Replace("string", "strFind", "strReplace")
ReplaceChars("string", "chars")
ReplaceChars("string", "strFind", "strReplace")
ReplaceG("string", "strFind", "strReplace")
Reverse("string")
RevFind("string", "searchstring", start)
RevIndex("string", "searchstring", start)
Rotate("string", n, "strPrefix", minLength)
Run
RunFile
ScrollWindow
Select("string", charcount)
Select("string", startindex, endindex)
SendMessage
SetNextDialogPos
SetString varName string
Slice("string", charcount)
Slice("string", startindex, endindex)
Squeeze("string")
Squeeze("string", "charlist")
StrColl("string1", "string2")
StrIColl("string1", "string2")
StringToFloat(stringname)
SwitchTo
Translate("string", "fromchars", "tochars")
Trim("string")
Trim("string", "trimchars", 1|2|3)
ValidPath("path")
VisibleWindow("captionlist")
Word("string", 0, "delims")
Word("string", n, "delims")

*Bar
*Clip
*Configure
*Exec
*File
*Format
*Format BarVerticalLine
*Format Context captionlist
*Format ContextIf expression
*Format Drag
*Format EndContext
*Format EndSubBar
*Format EndSubMenu
*Format Item
*Format MaxColumn n
*Format NewBarRow
*Format NewBarRowLine
*Format NewColumn
*Format NewColumnLine
*Format Separator
*Format StartSubBar
*Format StartSubMenu
*Info
*Keys
*Menu
*Macro
*Message
*Mouse
*Note
*Screensaver
*Script
*Shutdown
*Timer
*Trayicon
*Vdesk
*Wait
*Wallpaper
*Window

Bar.Close("barname")
Bar.Format("barname", "back", "file.bmp")
Bar.Format("barname", "back2", "file.bmp")
Bar.Format("barname", "back", "none")
Bar.Format("barname", "position", n)
Bar.Format("barname", "refresh")
Bar.Hide("barname")
Bar.HideShow("barname")
Bar.Keys("barname")
Bar.SelectSubBar("barname")
Bar.SelectSubBarToButton("barname")
Bar.SelectSubBarToMouse("barname")
Bar.Show("*vertical|*horizontal|*fromtop|*frombottom|*fromleft|*fromright", "barname")
Bar.Show("*move", "barname")
Bar.ToButton(index, "barname")
Bar.ToCursor("barname")
Bar.ToMouse("barname")
Cl.AddLeft("clname", itemindex|"itemid", "command", "parameters", "work", "how")
Cl.AddMiddle("clname", itemindex|"itemid", "command", "parameters", "work", "how")
Cl.AddProperties("clname", "proplines")
Cl.AddRight("clname", itemindex|"itemid", "command", "parameters", "work", "how")
Cl.ButtonFromPoint(x, y)
cl.ButtonUnderMouse()
Cl.ClearLeft("clname", itemindex|"itemid")
Cl.ClearMiddle("clname", itemindex|"itemid")
Cl.ClearRight("clname", itemindex|"itemid")
Cl.Close("clname")
Cl.Compact()
Cl.CopyFrom("toclname", toindex, "fromclname", fromindex)
Cl.CopyProperties("sourceclname", "targetclname")
Cl.Create("clname")
Cl.Create("clname", 1)
Cl.Exists("clname")
Cl.Export("clname", "filepath", 0|1)
Cl.Get("clname")
Cl.GetActiveButtons("clname")
Cl.GetBackColor("clname")
Cl.GetBackColor("clname", itemindex|"itemid")
Cl.GetBackground("clname")
Cl.GetBarHandle("clname")
Cl.GetClFlag("clname", "ToolTips|BarSize|Shadow|MouseThrough|AutoShowBar|MenuIconSmall|ToolTipsMenuText|MenuNoMaxText|TopMost|SameSize|Vertical|3DFrame|Border|No3DColor|TextUnder|TextRotate|TextCenter|RightIcon|TextVertical|BumpWithin|BumpWithin|NoFlicker|NoFlicker|HoverClickMenu|HoverClick|ActiveOnlyThis|Activesubbar|CheckMenu")
Cl.GetFolderButtons("clname")
Cl.GetFontName("clname", itemindex|"itemid")
Cl.GetGradient("clname")
Cl.GetHeight("clname")
Cl.GetHeight("clname", itemindex|"itemid")
Cl.GetHideAfter("clname")
Cl.GetHoffset("clname")
Cl.GetHoverColor("clname")
Cl.GetHoverGradient("clname")
Cl.GetHoverTextColor("clname")
Cl.GetIconFile("clname", itemindex|"itemid")
Cl.GetIconNumber("clname", itemindex|"itemid")
Cl.GetIconSize("clname", itemindex|"itemid")
Cl.GetIconAbove("clname", itemindex|"itemid")
Cl.GetIconLeft("clname", itemindex|"itemid")
Cl.GetIconPos("clname", itemindex|"itemid")
Cl.GetIconTop("clname", itemindex|"itemid")
Cl.GetImageLeft("clname", itemindex|"itemid")
Cl.GetImageTop("clname", itemindex|"itemid")
Cl.GetNoText("clname", itemindex|"itemid")
Cl.GetTextHeight("clname", itemindex|"itemid")
Cl.GetTextHor("clname", itemindex|"itemid")
Cl.GetTextLeft("clname", itemindex|"itemid")
Cl.GetTextTop("clname", itemindex|"itemid")
Cl.GetTextVer("clname", itemindex|"itemid")
Cl.GetTextWidth("clname", itemindex|"itemid")
Cl.SetIconAbove("clname", itemindex|"itemid")
Cl.GetIconLeft("clname", itemindex|"itemid")
Cl.GetIconPos("clname", itemindex|"itemid")
Cl.GetIconTop("clname", itemindex|"itemid")
Cl.GetImageLeft("clname", itemindex|"itemid")
Cl.GetImageTop("clname", itemindex|"itemid")
Cl.GetNoText("clname", itemindex|"itemid")
Cl.GetTextHeight("clname", itemindex|"itemid")
Cl.GetTextHor("clname", itemindex|"itemid")
Cl.GetTextLeft("clname", itemindex|"itemid")
Cl.GetTextTop("clname", itemindex|"itemid")
Cl.GetTextVer("clname", itemindex|"itemid")
Cl.GetTextWidth("clname", itemindex|"itemid")
Cl.GetID("clname", itemindex|"itemid")
Cl.GetIDIndex("clname", "itemid")
Cl.GetItem("clname", itemindex|"itemid")
Cl.GetItem("clname", "itemid")
Cl.GetLabel("clname", itemindex|"itemid")
Cl.GetLabelIndex("clname", "label")
Cl.GetLabelValue("clname", itemindex|"itemid")
Cl.GetLastBar()
Cl.GetLastMenu()
Cl.GetLastMenuSel()
Cl.GetLastMouse("barname")
Cl.GetLastPressed("barname")
Cl.GetLastPressedType("barname")
Cl.GetLeftCmd("clname", itemindex|"itemid", i)
Cl.GetLeftHow("clname", itemindex|"itemid", i)
Cl.GetLeftOnTop("clname", itemindex|"itemid")
Cl.GetLeftParam("clname", itemindex|"itemid", i)
Cl.GetLeftSwitchTo("clname", itemindex|"itemid")
Cl.GetLeftWork("clname", itemindex|"itemid", i)
Cl.GetMaxText("clname")
Cl.GetMiddleCmd("clname", itemindex|"itemid", i)
Cl.GetMiddleHow("clname", itemindex|"itemid", i)
Cl.GetMiddleOnTop("clname", itemindex|"itemid")
Cl.GetMiddleParam("clname", itemindex|"itemid", i)
Cl.GetMiddleSwitchTo("clname", itemindex|"itemid")
Cl.GetMiddleWork("clname", itemindex|"itemid", i)
Cl.GetNumActive("clname")
Cl.GetParentList("clname", string)
Cl.GetPosition("clname")
Cl.GetPressColor("clname")
Cl.GetPressGradient("clname")
Cl.GetPressTextColor("clname")
Cl.GetPressed
Cl.GetRightCmd("clname", itemindex|"itemid", i)
Cl.GetRightHow("clname", itemindex|"itemid", i)
Cl.GetRightOnTop("clname", itemindex|"itemid")
Cl.GetRightParam("clname", itemindex|"itemid")
Cl.GetRightSwitchTo("clname", itemindex|"itemid")
Cl.GetRightWork("clname", itemindex|"itemid")
Cl.GetRoundBar("clname")
Cl.GetRoundBtn("clname")
Cl.GetRoundWhich("clname")
Cl.GetShowIfBump("clname")
Cl.GetSlideFrom("clname")
Cl.GetTextColor("clname")
Cl.GetTextColor("clname", itemindex|"itemid")
Cl.GetTransparent("clname")
Cl.GetTooltip("clname", itemindex|"itemid")
Cl.GetTooltipValue("clname", itemindex|"itemid")
Cl.GetVoffset("clname")
Cl.GetWidth("clname", itemindex|"itemid")
Cl.Hide("clname")
Cl.HideShow("clname")
Cl.Import("filepath")
Cl.Insert("clname", 0)
Cl.Insert("clname", Cl.Length("clname"))
Cl.Insert("clname", itemID)
Cl.IsEnabled("clname", itemindex|"itemid")
Cl.IsIconVisible("clname", itemindex|"itemid")
Cl.IsPCF("clname")
Cl.IsVisible("clname", itemindex|"itemid")
Cl.KeepinPCF(0|1)
Cl.Keys("clname")
Cl.Length("clname")
Cl.LockTo("clname", 0|1, "clnameTarget", n1, n2, n3, n4, n5, n6, n7, n8)
Cl.NamefromIndex(i)
Cl.NewProperties("clname", proplines)
Cl.ReDisplay("clname")
Cl.Refresh("clname")
Cl.Remove("clname", itemindex|"itemid")
Cl.RemoveAll("clname")
Cl.RunLeft("clname", itemindex|"itemid")
Cl.RunMiddle("clname", itemindex|"itemid")
Cl.RunRight("clname", itemindex|"itemid")
Cl.SavePCF()
Cl.SelectSubBar("clname", "@subbarname")
Cl.SetAsAutoRun("clname")
Cl.SetAsTray("clname")
Cl.SetBackColor("clname", itemindex|"itemid", "colorParameters")
Cl.SetBackground("clname", "filepath", 0|1)
cl.SetCtrlURL
Cl.SetEnabled("clname", itemindex|"itemid", 0|1)
Cl.SetFont("clname", itemindex|"itemid", "fontname", fontsize)
Cl.SetHeight("clname", itemindex|"itemid", height)
Cl.SetHideAfter("clname", interval)
Cl.SetHover("clname", itemindex|"itemid", 0|1|2|3)
Cl.SetIcon("clname", itemindex|"itemid", "filepath", iconindex)
Cl.SetIconVisible("clname", itemindex|"itemid", 0|1)
Cl.SetID("clname", itemindex|"itemid", "id")
Cl.SetLabel("clname", itemindex|"itemid", "label")
Cl.SetLeftNormalUser("clname", itemindex|"itemid", 0|1)
Cl.SetLeftOnTop("clname", itemindex|"itemid", 0|1)
Cl.SetLeftSwitchTo("clname", itemindex|"itemid", 0|1)
Cl.SetMaxtext("clname", charcount)
Cl.SetMiddleNormalUser("clname", itemindex|"itemid", 0|1)
Cl.SetMiddleOnTop("clname", itemindex|"itemid", 0|1)
Cl.SetMiddleSwitchTo("clname", itemindex|"itemid", 0|1)
Cl.SetMultiline("clname", itemindex|"itemid", 0|1)
Cl.SetProperties
Cl.SetRect("clname", left, top ,right, bottom)
Cl.SetRightNormalUser("clname", itemindex|"itemid", 0|1)
Cl.SetRightOnTop("clname", itemindex|"itemid", 0|1)
Cl.SetRightSwitchTo("clname", itemindex|"itemid", 0|1)
Cl.SetTextColor("clname", itemindex|"itemid", "colorParameters")
Cl.SetTooltip("clname", itemindex|"itemid", "tooltip")
Cl.SetVisible("clname", itemindex|"itemid", 0|1)
Cl.SetWidth
Cl.Show("clname")
Cl.ShowMenu("clname", "Offset x y|Screen x y|CenterUnderMouse|CenterScreen|HorButton|HorButtonCenter|VerButton|Cursor")
Cl.ToMouse("clname")
Cl.SwapWith(("clname", indexto, indexfrom)
Cl.GetCtrlHandle("clname", itemindex|"itemid")
Cl.GetCtrlValue("clname", itemindex|"itemid")
Cl.SetCtrlURL("clname", itemindex|"itemid", "url")
Cl.SetCtrlValue("clname", itemindex|"itemid", "value")
Cl.SetCtrlFocus("clname", itemindex|"itemid")
Cl.AddCtrlListItem("clname", itemindex|"itemid", "text", pos)
Cl.ClearCtrlList("clname", itemindex|"itemid")
*Control Edit AutoHScroll AutoVScroll HScrollBar VScrollBar Left|Center|Right LowerCase|UpperCase MultiLine NoHideSel Number Password ReadOnly ClientEdge "text" AutoFile|AutoURL|AutoURLHistory|AutoURLMRU AutoAppend_Off|AutoAppend_On AutoSuggest_Off|AutoSuggest_On
*Control Button Center RightButton Bottom VCenter Top MultiLine ClientEdge "label"
*Control Button AutoCheckBox PushLike Center RightButton Bottom VCenter Top MultiLine ClientEdge "label"
*Control Button AutoCheckBox Center RightButton Bottom VCenter Top MultiLine ClientEdge "label"
*Control Button AutoTriState Center RightButton Bottom VCenter Top MultiLine ClientEdge "label"
*Control ComboxBox DropDown AutoHScroll LowerCase UpperCase Sort ClientEdge Scroll Border "item1|item2|..." AutoFile|AutoURL|AutoURLHistory|AutoURLMRU AutoAppend_Off|AutoAppend_On AutoSuggest_Off|AutoSuggest_On
*Control ComboxBox DropDownList AutoHScroll LowerCase UpperCase Sort ClientEdge Scroll Border "item1|item2|..."
*Control ComboxBox Height:xxx AutoHScroll LowerCase UpperCase NoIntegralHeight Sort ClientEdge Scroll Border "title|item1|item2|..."
*Control Slider (value) lowerbound upperbound ticfrequency Vertical Noticks Left Right Bottom Top Both Clientedge
*Control Progress value lowerbound upperbound Vertical
*Control IE "url"
*Control IE "folderpath"
*Control {guid}
*Control {.progid}
Clip.Capture
Clip.ClearClipboard
Clip.ClearRecent
Clip.Copy
Clip.CopyThenToFile("fullpathtofile")
Clip.Cut
Clip.Delete
Clip.File
Clip.FileIPaste("fullpathtofile")
Clip.FilePaste("fullpathtofile")
Clip.Longdate
Clip.Menu
Clip.MenuIPaste
Clip.MenuPaste
Clip.Paste
Clip.ReAttach
Clip.Shortdate
Clip.Text("text")
Clip.TextAppend("text")
Clip.TextPaste("text")
Clip.Time
Clip.ToFile("fullpathtofile")
Clip.ToFileAppend("fullpathtofile")
Clip.Write
Configure.AddReminderMessage
Configure.CommandLists("?barname")
Configure.Desktop
Configure.ExportHot("filepath")
Configure.ExportHotMem("filepath")
Configure.ExportSched("filepath")
Configure.ExportSchedMem("filepath")
Configure.GuiControl
Configure.ImportCL("filepath")
Configure.ImportHot("filepath")
Configure.ImportSched("filepath")
Configure.Keymouse
Configure.Media
Configure.NewReminderMessage
Configure.Rehook
Configure.Restart
Configure.Scheduler
Configure.Setup
Configure.Timers
Configure.WriteAlltoPCF("filepath")
Desktop.HideIcons
Desktop.HideShowIcons
Desktop.HideShowTaskbar
Desktop.HideShowWindows
Desktop.HideTaskbar
Desktop.IconTextColor
Desktop.MinShowWindows
Desktop.Resolution(x, y, 4|8|16|24, freq, |"NoSave")
Desktop.Resolution(x1, y1, x2, y2, |"NoSave")
Desktop.RestoreIcons
Desktop.SaveIcons
Desktop.SaveIconsGrid(horizspacing, vertspacing, "filename.IconPos")
Desktop.SetWorkarea
Desktop.ShowIcons
Desktop.ShowTaskbar
Desktop.ShowTaskbarAutohide
Desktop.TransIconText
Exec.Alarms("On|Off|Reverse")
Exec.AutoPress
Exec.AutoScroll
Exec.BottomMost(n)
Exec.BrowseRun
Exec.CalcCalendar
Exec.Calendar
Exec.CD("Play|Stop|PauseResume|Eject|Close|Next|Previous")
Exec.ChangeConfiguration("filepath")
Exec.ClearBelowMenuBar
Exec.ClearRecent
Exec.ClearRecentExplorer
Exec.CommandLine
Exec.ContextMenu
Exec.Debug
Exec.Disable
Exec.Dos
Exec.EmptyRecycleBin
Exec.Explorer "folderpath"
Exec.Explorer2 "folderpath"
Exec.FindComputer
Exec.FindFiles
Exec.HelpTopic
Exec.HideWindow
Exec.HotKeys("On|Off|Reverse")
Exec.IgnoreExplorerRestat(0|1)
Exec.LogKeys "filepath|=filepath"
Exec.MaxExplorerMenuWidth(n)
Exec.MaxWindowsHook(0|10)
Exec.Monitor("On|Off|Reverse")
Exec.MoreCommandsAsScript
Exec.Mute
Exec.NewFolder
Exec.OnError("None|Display|File|Both|Hook|UnHook|Clear")
Exec.Plugin("GETCWTXT", "Get_Text")
Exec.Print
Exec.Prompt
Exec.QuoteEscape
Exec.RefreshEnvironment
Exec.RefreshImage
Exec.RestoreLastMin
Exec.SchedulerAdd
Exec.ScriptCache("On|Off|Clear")
Exec.ScriptDebug
Exec.ScriptDebugField
Exec.ScrollWindow
Exec.ScrollWithMouse
Exec.SetAutoMinMemory(interval, minmemory, maxmemory)
Exec.SetBrowser("IExplore|Netscape|Firefox|Maxthon|Mozilla")
Exec.SetEnv
Exec.ShowBarInfo
Exec.StandardConfiguration
Exec.SuspendScripts
Exec.Tile
Exec.ToFile("filepath", "text")
Exec.ToFolder("folderpath")
Exec.TraceKey
Exec.VolumeAll 0-255
Exec.VolumeWav 0-15
Exec.WheelLimit n ModsOnly
Exec.WindowInfo
File.CommandRandom("commandpath", "filepath", "args")
File.Copy("sourcefilepath", "destinfilepath")
File.CopyRandom("sourcefilepath", "destinfilepath")
File.Delete("filepath")
File.DeleteNoRecycle("filepath")
File.DeleteOldFile.DeleteOld(days, "folderpath")
File.ExtChange("filepath", "-|+ext|ext")
File.Move("sourcefilepath", "destinfilepath")
File.Rename("sourcefilepath", "destinfilepath")
File.RunRandom("filepath")
Menu.Explorer
Menu.Explorer("Name|Date", "command")
Menu.Favfolder
Menu.Folder("folderpath")
Menu.Recent
Menu.RecentCommands
Menu.Show("commandlist", "CenterUnderMouse|CenterScreen|Offset n1 n2|Screen n1 n2|HorButton|HorButtonCenter|VerButton|Cursor")
Menu.ShowAtButton("commandlist")
Menu.ShowAtCursor("commandlist")
Menu.ShowFile("filepath")
Menu.StartMenu
Menu.Tray
Menu.Undermouse
Note.CloseCategory("categoryname")
Note.DeleteOpenCategory
Note.Open("params")
Note.OpenCategory("categoryname")
Note.OpenMenu
Note.OpenOneFromMenu("categoryname")
Note.OpenShow
Note.OpenToday
Note.RollupCategory("+categoryname|-categoryname")
Note.Search
Note.SetFolder("folderpath")
Note.ShowHideOpen
Note.ShowOpen
Note.ShowToDay
Process.Close("name")
Process.Create("name", "config.PCF", init_command, 0|1)
Process.Create("debug", "debug.PCF")
Screensaver.Change
Screensaver.ChangeRestart
Screensaver.ChangeTimeout
Screensaver.ChangeTo("filepath")
Screensaver.Disable
Screensaver.Enable
Screensaver.Start
Screensaver.Stop
Screensaver.TempDisable
Shutdown.Dialog
Shutdown.Hibernate
Shutdown.LockWorkstation
Shutdown.Logoff
Shutdown.Monitor On|Off|Stanby
Shutdown.Powerpro
Shutdown.Reboot
Shutdown.Restart
Shutdown.Suspend
Shutdown.Windows
Timer("a|b|...|y|z")
TimerRunning("a|b|...|y|z")
Timer.Autosave("a|b|...|y|z")
Timer.Clear("a|b|...|y|z")
Timer.Set("[+|-|*][@|$] a|b|...|y|z h m s")
Timer.Start("a|b|...|y|z")
Timer.StartStop
Timer.Stop
TrayIcon.Dump
TrayIcon.Hide
TrayIcon.Left
TrayIcon.LeftDouble
TrayIcon.Middle
TrayIcon.MiddleDouble
TrayIcon.Refresh
TrayIcon.Right
TrayIcon.RightDouble
TrayIcon.Show
Vdesk.Arrange
Vdesk.Clear "vdeskname"
Vdesk.ClearAllClose
Vdesk.Closeto "vdeskname"
Vdesk.Consolidate
Vdesk.CreateorSwitchTo
Vdesk.Lock "captionlist"
Vdesk.Menu
Vdesk.MoveActive "vdeskname"
Vdesk.MoveAll "sourcevdeskname" "destinationvdeskname" "captionlist"
Vdesk.MoveAutorun
Vdesk.New
Vdesk.NewFromList
Vdesk.Next
Vdesk.Previous
Vdesk.ReplaceByList
Vdesk.ShowMenu
Vdesk.SwitchMenu
Vdesk.SwitchTo "vdeskname"
Vdesk.Unlock "captionlist"
VDeskEmpty("vdeskname")
VDeskHasWindow("vdeskname", "captionlist")
Wait.Active(timeout_sec, "caption")
Wait.Activity
Wait.Alt
Wait.Ctrl
Wait.Done("captionlist")
Wait.For(timeout_ms)
Wait.For(timeout_ms, "expression")
Wait.For("expression")
Wait.ForInterval("expression")
Wait.Message(wait_secs, "text")
Wait.NoActive(timeout_sec, "caption")
Wait.NoAlt
Wait.NoCtrl
Wait.NoModem
Wait.NoSaver
Wait.NoShift
Wait.NoWindow(timeout_sec, "caption")
Wait.Path(timeout_sec, "pathtoprog")
Wait.Quit
Wait.Ready
Wait.Ready("captionlist")
Wait.Saver
Wait.Shift
Wait.Sleep(timeout_ms)
Wait.Sleep(timeout_ms)
Wait.Until(timeout_ms)
Wait.Until(timeout_ms, "expression")
Wait.Until("expression")
Wait.Window(timeout_sec, "caption")
Wallpaper.Change
Wallpaper.Change("*")
Wallpaper.ChangeTo("filepath")
Wallpaper.Show
Wallpaper.Style("Center|Tile|Stretch")
Win.Mouse("Alt Ctrl Shift Win LeftClick LeftDown LeftUp LeftDouble MiddleClick MiddleDown MiddleClick MiddleUp MiddleDouble RightClick RightDown RightUp RightDouble Save Restore Move x y Screen x y Relative x y")
Win.Mouse("Alt")
Win.Mouse("Ctrl")
Win.Mouse("Shift")
Win.Mouse("Win")
Win.Mouse("LeftClick")
Win.Mouse("LeftDown")
Win.Mouse("LeftUp")
Win.Mouse("LeftDouble")
Win.Mouse("MiddleClick")
Win.Mouse("MiddleDown")
Win.Mouse("MiddleUp")
Win.Mouse("MiddleDouble")
Win.Mouse("RightClick")
Win.Mouse("RightDown")
Win.Mouse("RightUp")
Win.Mouse("RightDouble")
Win.Mouse("Save")
Win.Mouse("Restore")
Win.Mouse("Move x y")
Win.Mouse("Screen x y")
Win.Mouse("Relative x y")
Window.AutoMin("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.Back("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.BackShow("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.Center("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.Close("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.Close2("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.Close_("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.CloseForce("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.Hide("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.HideShow("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.Max("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.MaxNormal("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.Min("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.MinMemory("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.MinRestore("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.Move("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.Normal("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.NotTop("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.OnTop("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.Position(x, y, w, h, "Active|ActiveBar|All|AutoRun|CaptionList|Menu|Menu Hidden|Menu TrayMin|Menux|Under|Under Parent")
Window.PostMessage(m, w, l, "captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.Rollup("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.SendMessage(m, w, l, "captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.SetPriority("Idle|Below|Normal|Above|High", "captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.Show("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.Size("Active|ActiveBar|All|AutoRun|CaptionList|Menu|Menu Hidden|Menu TrayMin|Menux|Under|Under Parent")
Window.TopNotTop("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.Trans(level, "captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.TransMouse(level, "captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window.TrayMin("captionlist|Active|ActiveBar|All|Autorun|Menu|Menu Hidden|Menu TrayMin|MenuX|Under|Under Parent")
Window("AnyWindow", "captionlist|Active|Under|Taskbar")
Window("Bottom", "captionlist|Active|Under|Taskbar")
Window("Caption", "captionlist|Active|Under|Taskbar")
Window("Class", "captionlist|Active|Under|Taskbar")
Window("ExeName", "captionlist|Active|Under|Taskbar")
Window("ExeFullPath", "captionlist|Active|Under|Taskbar")
Window("FirstWindow", "captionlist|Active|Under|Taskbar")
Window("Height", "captionlist|Active|Under|Taskbar")
Window("Left", "captionlist|Active|Under|Taskbar")
Window("Maximized", "captionlist|Active|Under|Taskbar")
Window("Minimized", "captionlist|Active|Under|Taskbar")
Window("Right", "captionlist|Active|Under|Taskbar")
Window("Top", "captionlist|Active|Under|Taskbar")
Window("Topmost", "captionlist|Active|Under|Taskbar")
Window("VDesk", "vdeskname")
Window("Visible", "captionlist|Active|Under|Taskbar")
Window("VisibleWindow", "captionlist|Active|Under|Taskbar")
Window("Width", "captionlist|Active|Under|Taskbar")

; *** PLUGIN FUNCTIONS  (KeyWords2)
ASPELL.Add_Word_To_Personal
ASPELL.Add_Word_To_Session
ASPELL.Clear_Session
ASPELL.Config
ASPELL.Dump_Personal_Word_List
ASPELL.Dump_Session_Word_List
ASPELL.Error_Dialog_Off
ASPELL.Error_Dialog_On
ASPELL.Ignore_Word
ASPELL.Is_Correct
ASPELL.Returns_Nothing
ASPELL.Returns_Status
ASPELL.Returns_Values
ASPELL.Save_Lists
ASPELL.Set_Option
ASPELL.Suggest
ASPELL.Unload
AU.BlockInput(0|1)
AU.DetectHiddenText(0|1)
AU.IfWinActive("caption", "windowText")
AU.IfWinExist("caption", "windowText")
AU.INIDelete("filepath", "section", "key")
AU.INIRead("filepath", "section", "key", "value")
AU.INIWrite("filepath", "section", "key", "value")
AU.LeftClick(x, y)
AU.LeftClickDrag(xFrom, yFrom, xTo, yTo)
AU.MouseGetPosx
AU.MouseGetPosy
AU.MouseMove(x, y)
AU.RightClick(x, y)
AU.RightClickDrag(xFrom, yFrom, xTo, yTo)
AU.Send
AU.SetCapslockState(0|1)
AU.SetKeyDelay
AU.SetStoreCapslockMode(0|1)
AU.SetTitleMatchMode(1|2)
AU.SetWinDelay
AU.Sleep
AU.Shutdown(0|+1|+2|+4|+8)
AU.WinActivate("caption", "windowText")
AU.WinClose("caption", "windowText")
AU.WinGetActiveTitle
AU.WinHide("caption", "windowText")
AU.WinKill("caption", "windowText")
AU.WinMaximize("caption", "windowText")
AU.WinMinimize("caption", "windowText")
AU.WinMinimizeAll
AU.WinMinimizeAllUndo
AU.WinMove("caption", "windowText", x, y, width, height)
AU.WinRestore("caption", "windowText")
AU.WinSetTitle("caption", "windowText", "title"")
AU.WinShow("caption", "windowText")
AU.WinWait
AU.WinWaitActive
AU.WinWaitClose
AU3.AutoItSetOption("CaretCoordMode|MouseClickDelay|MouseClickDownDelay|MouseClickDragDelay|MouseCoordMode|PixelCoordMode|SendAttachMode|SendCapslockMode|SendKeyDelay|SendKeyDownDelay|WinDetectHiddenText|WinSearchChildren|WinTextMatchMode|WinTitleMatchMode|WinWaitDelay", value)
AU3.BlockInput(intFlag)
AU3.CDTray("drive", "action")
AU3.ClipGet()
AU3.ClipPut("text")
AU3.ControlClick("windowtitle", "windowtext", controlID, "|Left|Middle|Right", clickCount, x, y)
AU3.ControlCommand("windowTitle", "windowText", controlID, "IsVisible", "")
AU3.ControlCommand("windowTitle", "windowText", controlID, "IsEnabled", "")
AU3.ControlCommand("windowTitle", "windowText", controlID, "ShowDropDown", "")
AU3.ControlCommand("windowTitle", "windowText", controlID, "HideDropDown", "")
AU3.ControlCommand("windowTitle", "windowText", controlID, "AddString", "string")
AU3.ControlCommand("windowTitle", "windowText", controlID, "DelString", occurrence)
AU3.ControlCommand("windowTitle", "windowText", controlID, "FindString", "string")
AU3.ControlCommand("windowTitle", "windowText", controlID, "SetCurrentSelection", occurrence)
AU3.ControlCommand("windowTitle", "windowText", controlID, "SelectString", "string")
AU3.ControlCommand("windowTitle", "windowText", controlID, "IsChecked", "")
AU3.ControlCommand("windowTitle", "windowText", controlID, "Check", "")
AU3.ControlCommand("windowTitle", "windowText", controlID, "UnCheck", "")
AU3.ControlCommand("windowTitle", "windowText", controlID, "GetCurrentLine", "")
AU3.ControlCommand("windowTitle", "windowText", controlID, "GetCurrentCol", "")
AU3.ControlCommand("windowTitle", "windowText", controlID, "GetCurrentSelection", "")
AU3.ControlCommand("windowTitle", "windowText", controlID, "GetLineCount", "")
AU3.ControlCommand("windowTitle", "windowText", controlID, "GetLine", lineIndex)
AU3.ControlCommand("windowTitle", "windowText", controlID, "GetSelected", "")
AU3.ControlCommand("windowTitle", "windowText", controlID, "EditPaste", "string")
AU3.ControlCommand("windowTitle", "windowText", controlID, "CurrentTab", "")
AU3.ControlCommand("windowTitle", "windowText", controlID, "TabRight", "")
AU3.ControlCommand("windowTitle", "windowText", controlID, "TabLeft", "")
AU3.ControlDisable("windowTitle", "windowText", controlID)
AU3.ControlEnable("windowTitle", "windowText", controlID)
AU3.ControlFocus("windowTitle", "windowText", controlID)
AU3.ControlGetFocus("windowTitle", "windowText")
AU3.ControlGetHandle("windowTitle", "windowText", controlID)
AU3.ControlGetPosHeight("windowTitle", "windowText", controlID)
AU3.ControlGetPosWidth("windowTitle", "windowText", controlID)
AU3.ControlGetPosX("windowTitle", "windowText", controlID)
AU3.ControlGetPosY("windowTitle", "windowText", controlID)
AU3.ControlGetText("windowTitle", "windowText", controlID)
AU3.ControlHide("windowTitle", "windowText", controlID)
AU3.ControlListView("windowTitle", "windowText", controlID, "DeSelect", indexFrom, indexTo)
AU3.ControlListView("windowTitle", "windowText", controlID, "FindItem", "findString", indexSubItem)
AU3.ControlListView("windowTitle", "windowText", controlID, "GetItemCount")
AU3.ControlListView("windowTitle", "windowText", controlID, "GetSelected", 0|1)
AU3.ControlListView("windowTitle", "windowText", controlID, "GetSelectedCount")
AU3.ControlListView("windowTitle", "windowText", controlID, "GetSubItemCount")
AU3.ControlListView("windowTitle", "windowText", controlID, "GetText", index, indexSubItem)
AU3.ControlListView("windowTitle", "windowText", controlID, "IsSelected", index)
AU3.ControlListView("windowTitle", "windowText", controlID, "Select", indexFrom, indexTo)
AU3.ControlListView("windowTitle", "windowText", controlID, "SelectAll")
AU3.ControlListView("windowTitle", "windowText", controlID, "SelectClear")
AU3.ControlListView("windowTitle", "windowText", controlID, "SelectInvert")
AU3.ControlListView("windowTitle", "windowText", controlID, "ViewChange", "List|Details|SmallIcons|LargeIcons")
AU3.ControlMove("windowTitle", "windowText", controlID, x, y, width, height)
AU3.ControlSend("windowTitle", "windowText", controlID, "string", 0|1)
AU3.ControlSetText("windowTitle", "windowText", controlID, "controlText")
AU3.ControlShow("windowTitle", "windowText", controlID)
AU3.ControlTreeview("windowTitle", "windowText", controlID, "Check", "item")
AU3.ControlTreeview("windowTitle", "windowText", controlID, "Collapse", "item")
AU3.ControlTreeview("windowTitle", "windowText", controlID, "Exists", "item")
AU3.ControlTreeview("windowTitle", "windowText", controlID, "Expand", "item")
AU3.ControlTreeview("windowTitle", "windowText", controlID, "GetItemCount", "item")
AU3.ControlTreeview("windowTitle", "windowText", controlID, "GetSelected", |1)
AU3.ControlTreeview("windowTitle", "windowText", controlID, "GetText", "item")
AU3.ControlTreeview("windowTitle", "windowText", controlID, "IsChecked")
AU3.ControlTreeview("windowTitle", "windowText", controlID, "Select", "item")
AU3.ControlTreeview("windowTitle", "windowText", controlID, "Uncheck", "item")
AU3.DriveMapAdd("D:|...|Z:|LPT1:|*", "\\server\shareFolder", 0+1+8, "user", "password")
AU3.DriveMapDel("D:|...|Z:|LPT1:")
AU3.DriveMapGet("D:|...|Z:|LPT1:")
AU3.Error_Dialog_Off
AU3.Error_Dialog_On()
AU3.IniDelete("filename", "section", "key")
AU3.IniRead("filename", "section", "key", "default")
AU3.Init()
AU3.IniWrite("filename", "section", "key", "value")
AU3.IsAdmin()
AU3.MouseClick("Left|Middle|Right", x, y, clickCount, 0-100)
AU3.MouseClickDrag("Left|Middle|Right", x1, y1, x2, y2, 0-100)
AU3.MouseDown("|Left|Middle|Right")
AU3.MouseGetCursor()
AU3.MouseGetPosX()
AU3.MouseGetPosY()
AU3.MouseMove(x, y, 0-100)
AU3.MouseUp("Left|Middle|Right")
AU3.MouseWheel("Up|Down", count)
AU3.Opt("CaretCoordMode|MouseClickDelay|MouseClickDownDelay|MouseClickDragDelay|MouseCoordMode|PixelCoordMode|SendAttachMode|SendCapslockMode|SendKeyDelay|SendKeyDownDelay|WinDetectHiddenText|WinSearchChildren|WinTextMatchMode|WinTitleMatchMode|WinWaitDelay", value)
AU3.PixelChecksum(leftX, topY, rightX, bottomY, step_pixel)
AU3.PixelGetColor(x, y)
AU3.PixelSearch(leftX, topY, rightX, bottomY, color, 0-255, step_pixel)
AU3.ProcessClose("processName_or_PID")
AU3.ProcessExists("processName_or_PID")
AU3.ProcessSetPriority("processName", 0|1|2|3|4|5)
AU3.ProcessWait("processName", timeout_ms)
AU3.ProcessWaitClose("processName_or_PID", timeout_ms)
AU3.RegDeleteKey("key")
AU3.RegDeleteVal("key", "value")
AU3.RegEnumKey("key", instance)
AU3.RegEnumVal("key", instance)
AU3.RegRead("key", "valuename")
AU3.RegWrite("key", "valuename", "type", "value")
AU3.Run("filePath", "workFolder", showFlag)
AU3.RunAs("user", "domain", "password", 0|1|2, "filePath", "workFolder", showFlag)
AU3.RunAsWait("user", "domain", "password", 0|1|2, "filePath", "workFolder", showFlag)
AU3.RunAsSet("user", "domain", "password", "options")
AU3.RunWait("filepath", "workDir", "SW_HIDE|SW_MINIMIZE|SW_MAXIMIZE")
AU3.Send("keys", |0|1)
AU3.Shutdown(0+1+2+4+8)
AU3.Sleep(timeout_ms)
AU3.StatusbarGetText("windowTitle", "windowText", index)
AU3.ToolTip("tipText", x, y)
AU3.Version
AU3.WinActive("windowTitle", "windowText")
AU3.WinActivate("windowTitle", "windowText")
AU3.WinClose("windowTitle", "windowText")
AU3.WinExists("windowTitle", "windowText")
AU3.WinGetCaretPosX()
AU3.WinGetCaretPosY()
AU3.WinGetClassList("windowTitle", "windowText")
AU3.WinGetClientSizeHeight("windowTitle", "windowText")
AU3.WinGetClientSizeWidth("windowTitle", "windowText")
AU3.WinGetHandle("windowTitle", "windowText")
AU3.WinGetPosX("windowTitle", "windowText")
AU3.WinGetPosY("windowTitle", "windowText")
AU3.WinGetPosHeight("windowTitle", "windowText")
AU3.WinGetPosWidth("windowTitle", "windowText")
AU3.WinGetProcess("windowTitle", "windowText")
AU3.WinGetState("windowTitle", "windowText")
AU3.WinGetText("windowTitle", "windowText")
AU3.WinGetTitle("windowTitle", "windowText")
AU3.WinKill("windowTitle", "windowText")
AU3.WinList("windowTitle", "windowText")
AU3.WinList("[CLASS:Notepad]", "windowText")
AU3.WinList("[ALL]", "windowText")
AU3.WinMenuSelectItem("windowTitle", "windowText", "menuName", "menuItem1", "menuItem2", "menuItem3", "menuItem4", "menuItem5", "menuItem6")
AU3.WinMinimizeAll()
AU3.WinMinimizeAllUndo()
AU3.WinMove("windowTitle", "windowText", intX, intY, intWidth, intHeight)
AU3.WinSetOnTop("windowTitle", "windowText", 0|1)
AU3.WinSetState("windowTitle", "windowText", "SW_HIDE|SW_SHOW|SW_MINIMIZE|SW_MAXIMIZE|SW_RESTORE")
AU3.WinSetTitle("windowTitle", "windowText", "title")
AU3.WinSetTrans("windowTitle", "windowText", 0-255)
AU3.WinWait("windowTitle", "windowText", timeout_sec)
AU3.WinWaitActive("windowTitle", "windowText", timeout_sec)
AU3.WinWaitClose("windowTitle", "windowText", timeout_ms)
AU3.WinWaitNotActive("windowTitle", "windowText", timeout_ms)
BEE.Color()
BEE.File(0|1, "Text Files(*.txt)|*.txt||")
BEE.File(0|1, "All Files(*.*)|*.*||")
BEE.Font()
BEE.FontName()
BEE.FontName()
BEE.FontHeight()
BEE.FontColor()
BEE.FontIA()
BEE.FontUA()
BEE.FontSA()
BEE.TextOut("message", x, y, "fontName", fontHeight, fontWidth, 0|1, 0|1, 0|1, "0-255 0-255 0-255", "0-255 0-255 0-255", 1|2, -3600 - 3600)
BEE.Notice("message", x, y, "fontName", fontHeight, fontWidth, 0|1, 0|1, 0|1, "0-255 0-255 0-255", "0-255 0-255 0-255", 0|1|2, timeout_ms, "0-255 0-255 0-255", "0-255 0-255 0-255")
BEE.NoticePID()
BEE.NoticeTID()
BEE.NoticeKill(threadID)
BEE.NoticeHide(threadID)
BEE.NoticeShow(threadID)
BEE.NoticeMove(threadID, x, y)
BEE.NoticeOpacitiy(threadID, 0-255,  0-255, 0-255, 0-255)
BEE.NoticeColor(threadID, "ftc|fbc|wc",  0-255, 0-255, 0-255)
BEE.NoticeSize(threadID, fontHeight, fontWidth)
BEE.NoticeAttr(threadID, 0|1, 0|1, 0|1)
BEE.NoticeAlign(threadID, 0|1|2)
BEE.NoticeFont(threadID, "fontName")
BEE.NoticeMessage(threadID, "message")
BEE.TextDraw("message", x, y, "fontName", fontSize, 0+1+2+4+8, 0|1|2|3, "0-255 0-255 0-255 0-255", "0-255 0-255 0-255 0-255", "0-255 0-255 0-255 0-255", outlineThickness,  0-255, timeout_ms)
BEE.TextDrawPID
BEE.TextDrawTID
BEE.TextDrawKill(threadID)
BEE.TextDrawHide(threadID)
BEE.TextDrawShow(threadID)
BEE.TextDrawMove(threadID, x, y)
BEE.TextDrawOpacity(threadID, 0-255,  0-255, 0-255, 0-255)
BEE.Photo("filepath", x, y, 0-255, timeout_ms, "0-255 0-255 0-255")
BEE.PhotoPID
BEE.PhotoTID
BEE.PhotoKill(threadID)
BEE.PhotoHide(threadID)
BEE.PhotoShow(threadID)
BEE.PhotoMove(threadID, x, y)
BEE.PhotoOpacity(threadID, 0-255,  0-255, 0-255, 0-255)
BIGMEM.BigMem("AvailPage")
BIGMEM.BigMem("AvailPhys")
BIGMEM.BigMem("AvailVirtual")
BIGMEM.BigMem("Percent")
BIGMEM.BigMem("TotalPage")
BIGMEM.BigMem("TotalPhys")
BIGMEM.BigMem("TotalVirtual")
BINARY.And
BINARY.Append
BINARY.Compare
BINARY.Copy
BINARY.Declaration_Required
BINARY.Dump
BINARY.File_Close
BINARY.File_Closeall
BINARY.File_Eof
BINARY.File_Open
BINARY.File_Position
BINARY.File_Read
BINARY.File_Readall
BINARY.File_Restart
BINARY.File_Seek
BINARY.File_Write
BINARY.File_Writeall
BINARY.Fill
BINARY.From_Ascii_String
BINARY.From_Hex_String
BINARY.Getbyteblockservices
BINARY.Index
BINARY.Join
BINARY.Length
BINARY.Line
BINARY.Or
BINARY.Remove
BINARY.Repeat
BINARY.Replacechars
BINARY.Replacenulls
BINARY.Revindex
BINARY.Set_Dump_Rules
BINARY.Str_Max
BINARY.Str_Min
BINARY.Str_Select
BINARY.Translate
BINARY.Unload
BINARY.Version
Class.Define
Class.Get
Class.Verbose
Class.Check
CLIP.Append("text")
CLIP.BMPToFile("filepath")
CLIP.Clear
CLIP.Copy
CLIP.Cut
CLIP.FromFile("filepath")
CLIP.FromFileAppend("filepath")
CLIP.Get
CLIP.GetHTML
CLIP.GetRTF
CLIP.GetSaveLoadFolder()
CLIP.HasFormat("BITMAP|DIB|DIBV5|DIF|ENHMETAFILE|HDROP|LOCALE|METAFILEPICT|OEMTEXT|PALETTE|RIFF|SYLK|TEXT|WAVE|TIFF|UNICODETEXT")
CLIP.IgnoreNext
CLIP.Length
CLIP.ListFormats
CLIP.Load("filename", "folderpath")
CLIP.Paste
CLIP.Save("filename", "folderpath")
CLIP.Set("text", 0|1)
CLIP.SetHTML("htmltext", plain, 0|1, 0|1)
CLIP.SetPaste("text")
CLIP.SetRTF("rtftext", plain, 0|1, 0|1)
CLIP.SetSaveLoadFolder("folderpath")
CLIP.ToFile("filepath", 0|1)
CLIP.ToFileAppend("filepath", 0|1)
CLIP.Unload
COM.Config(ini_file_path)
COM.Create_Object("Word.Application|Excel.Application|Scripting.FileSystemObject|Python.Interpreter|Internet Explorer|WScript.Network")
COM.Destroy(object_handle)
COM.Dotdot
COM.End_With()
COM.Enumerator_Next(enumerator_handle)
COM.Enumerator_Reset(enumerator_handle)
COM.Error_Dialog_Off
COM.Error_Dialog_On
COM.Get_Accessible_Children(handle_to_accessible_object, name, role)
COM.Get_Accessible_Object(hwnd, objectType)
COM.Get_Enumerator(object_handle)
COM.Get_Interface("CLSID|IID")
COM.Get_Object("prog_id|file_name|window_handle")
COM.Get_Object_Description(object_handle, option(s), function)
COM.Get_Property(object_handle, property, arg1, arg2)
COM.Get_Property_Typed(object_handle, property, type_spec, arg1, arg2)
COM.Help
COM.LocalCopy(handle)
COM.Method(object_handle, method, arg1, arg2)
COM.Method_Typed(object_handle, method, type_spec, arg1, arg2)
COM.Next(enumerator_handle)
COM.Release(object_handle)
COM.Release_All
COM.ReleaseLocal
COM.Reset(enumerator_handle)
COM.Return_Unicode_Strings(0|1)
COM.Returns_Nothing()
COM.Returns_Status()
COM.Returns_Values()
COM.Set_Arg_Types(type_spec, persistent)
COM.Set_Property(object_handle, property, arg1, arg2)
COM.Set_Property_Typed(object_handle, property, type_spec, arg1, arg2, new_value)
COM.Set_Skipped_Arg_Marker(marker)
COM.Unicode_Args_Allowed(0|1)
COM.Unicode_Status()
COM.Unload
COM.Version
COM.With(object_handle, sub_object_specifier)
CONSOLE.Append
CONSOLE.Close
CONSOLE.Execute
CONSOLE.Print
CONSOLE.Show
CONSOLE.Unload
CRYPTO.Config
CRYPTO.Confirm
CRYPTO.Decrypt_No_Login
CRYPTO.Decrypt_With_Login
CRYPTO.Encrypt_No_Login
CRYPTO.Encrypt_With_Login
CRYPTO.Error_Dialog_Off
CRYPTO.Error_Dialog_On
CRYPTO.Help
CRYPTO.Login
CRYPTO.Logout
CRYPTO.Md5_Of_File
CRYPTO.Md5_Of_String
CRYPTO.Returns_Nothing
CRYPTO.Returns_Status
CRYPTO.Returns_Values
CRYPTO.Set_Passphrase_No_Login
CRYPTO.Set_Password_For_Login
CRYPTO.Sha1_Of_File
CRYPTO.Sha1_Of_String
CRYPTO.Unload
CRYPTO.Use_Long_Vars
CRYPTO.Use_X_Vars
CRYPTO.Version
CRYPTOW.Config
CRYPTOW.Confirm
CRYPTOW.Decrypt_No_Login
CRYPTOW.Decrypt_With_Login
CRYPTOW.Encrypt_No_Login
CRYPTOW.Encrypt_With_Login
CRYPTOW.Error_Dialog_Off
CRYPTOW.Error_Dialog_On
CRYPTOW.Help
CRYPTOW.Login
CRYPTOW.Logout
CRYPTOW.Md5_Of_File
CRYPTOW.Md5_Of_String
CRYPTOW.Returns_Nothing
CRYPTOW.Returns_Status
CRYPTOW.Returns_Values
CRYPTOW.Set_Passphrase_No_Login
CRYPTOW.Set_Password_For_Login
CRYPTOW.Sha1_Of_File
CRYPTOW.Sha1_Of_String
CRYPTOW.Unload
CRYPTOW.Use_Long_Vars
CRYPTOW.Use_X_Vars
CRYPTOW.Version
DATE.AddDays(yyyymmdd, daycount)
DATE.AddSeconds(yyyymmdd, seccount)
DATE.Get
DATE.Now
DATE.Sub(yyyymmdd, yyyymmdd)
DATE.SubSeconds(yyyymmdd, yyyymmdd)
DATE.Today
DATE.Unload
DATE.WeekDay(yyyymmdd)
DATE.WeekNum
DATE.YearDay(yyyymmdd)
DIALOG.Browse_For_File(dialogHandle, "Open|Save|Multiple CreatePrompt|FileCanBeAbsent|PathCanBeAbsent|HideReadonly|Readonly|AllowOverwrite|NoChangeDir|NoDereferenceLinks", "initialFolderPath", "title", "TXT|DOC|BAK|...", "*.TXT;*.DOC;*.BAK;...", "defaultFileName", "varNameROstate")
DIALOG.Change_Style
DIALOG.Choose_Font(dialogHandle|ctrlID, "var_for_colour")
DIALOG.Clear(dialogHandle|ctrlID, item)
DIALOG.Config("filePath_INI")
DIALOG.Create(dialogHandle, 0|1|2, ownerhandle)
DIALOG.Create("definitionfile", 0|1|2, ownerhandle)
DIALOG.Define(x, y, width, height, "caption", "SysMenu|MinBox|MaxBox|Centre|CentreMouse|NoBorder|NoDlgFrame|ThickFrame|3D|ModalFrame|Hidden|Tool|ToolWin|Topmost|Draggable", "scriptname", "arg", "events", "actiononclose", "iconpath", iconnumber, "fontspec", "rightclickcommand")
DIALOG.Define_Control(dialogHandle, x, y, width, height, "Button|Group|CheckBox|3State|RadioButton|Static|EditBox|ListBox|ComboBox|ScrollBar|Spinner|Slider|Progress|DateTime|MonthCal|ActiveX|StatusBar|TabControl|TreeView|RichEdit|Scintilla|ListView|Animation", "name", textorvar, "styles", "scriptname", "arg", "events", foreground, background, "OK|Cancel|Escapable", "fontspec", "tooltip", "Always|Balloon|Centre|SlashIsNL|ShowAfter|ShowAfter:nn|StayOpen:nn|Width:nn", "rightclickcommand")
DIALOG.Define_Set(dialogHandle, "name", "controltypes", "includedcontrolsanded", "includedcontrolsored", "excludedcontrols")
DIALOG.Destroy(dialogHandle|controlhandle)
DIALOG.Destroy_Window(dialogHandle, valuetoreturn)
DIALOG.DestroyAll()
DIALOG.Enable(dialogHandle|ctrlID, 0|1)
DIALOG.Error_Dialog_Off
DIALOG.Error_Dialog_On
DIALOG.Get_Base
DIALOG.Get_LastClicked()
DIALOG.Get_Value(dialogHandle|ctrlID, "Tool|Font|Fonthandle|Hwnd|ID|Type|Name|PrevCtrl|Owner")
DIALOG.Help
DIALOG.Make_Ctrl_Handle(handle, ctrlID)
DIALOG.Returns_Nothing()
DIALOG.Returns_Status()
DIALOG.Returns_Values()
DIALOG.RGB(0-255, 0-255, 0-255)
DIALOG.Run(dialogHandle, showtype, modalmode, ownerhandle)
DIALOG.Run("definitionfile", showtype, modalmode, ownerhandle)
DIALOG.RunDialog()
DIALOG.Send_Message(target, message, wParam, lParam, "s|n|c", 0|1)
DIALOG.Send_Message(dialogHandle|ctrlID, "message", wParam, lParam, "String|Number|C_DLLPluginHandle", |1)
DIALOG.Set_Base(0|1)
DIALOG.Set_Colour(target, "tooltip|tool|tip", foreground, background)
DIALOG.Set_Font(dialogHandle|ctrlID, "font", "|T")
DIALOG.Set_Focus(dialogHandle|ctrlID)
DIALOG.Set_Icon(dialogHandle, "iconpath", iconnumber)
DIALOG.Set_Image(targethandle, "imgpath", iconnumber)
DIALOG.Set_Position(dialogHandle|ctrlID, x, y, width, height)
DIALOG.Set_Range(targethandle, min, max)
DIALOG.Set_Range(targethandle, min, max, scrollslidepagesize)
DIALOG.Set_Range(targethandle, min, max, progressstep)
DIALOG.Set_Response(target, scriptpath, command_arg, events|"Left|Middle|Right|Mouse4|Mouse5"|"Close|Size|Move|Minimize|Maximize|Restore|Default"|"tray"|"trayicon")
DIALOG.Set_ToolTip(ctrlID, "text", "style", "font", "scriptname", "arg", "forecolour", "backcolour", delay, "title", "icon")
DIALOG.Set_Value(dialogHandle|ctrlID, "Tool|Font|Fonthandle|Hwnd|ID|Type|Name|PrevCtrl|Owner")
DIALOG.Show(ctrlID, "Show/Hide")
DIALOG.Show(dialogHandle, "Show|Hide|Restore|Minimize|Maximize|Normal|Goreground|TrayIcon|TrayMin|TrayDel")
DIALOG.Show(dialogHandle, "TrayMin|TrayIcon", "scriptname", "arg", "mouseaction")
DIALOG.Unload
DIALOG.Version
DLL.ByteBlock
DLL.Call
DLL.Config
DLL.Create_Array
DLL.Create_Struct
DLL.Error_Dialog_Off
DLL.Error_Dialog_On
DLL.Free_Libs
DLL.Get_Element
DLL.Get_Funcs
DLL.Get_Monitoring_Win
DLL.Get_Size
DLL.Help
DLL.Load_Lib
DLL.Localcopy
DLL.Monitored_Msg
DLL.Release
DLL.Release_All
DLL.ReleaseLocal
DLL.Returns_Nothing
DLL.Returns_Status
DLL.Returns_Values
DLL.Set_Element
DLL.Unload_Lib
DLL.Version
EVENT.Count(e)
EVENT.CountThis
EVENT.Create(interval_sec, repeat, "command", "expr", maxtimes)
EVENT.Createms(interval_ms, repeat, "command", "expr", maxtimes)
EVENT.Destroy(e)
EVENT.DestroyAll
EVENT.DestroyThis
EVENT.Exists(e)
EVENT.Message(countdown, "command", "message", "title", 0|1, x, y)
EVENT.Ran(e)
EVENT.RanThis
EVENT.Remaining(e)
EVENT.RemainingThis
EVENT.This
EVENT.Unload
FILE.AllDrives
FILE.AllFiles("path", "", "0|1|2|3|4|5", pumpflag, 0|1)
FILE.AllFiles("path", "Size", "0|1|2|3|4|5", pumpflag, 0|1)
FILE.AllFiles("path", "KSize", "0|1|2|3|4|5", pumpflag, 0|1)
FILE.AllFiles("path", "command", "0|1|2|3|4|5", pumpflag, 0|1)
FILE.Attrib("path")
FILE.Close(handle)
FILE.CloseAll
FILE.CloseLocal
FILE.Copy("sourcefilepath", "destinpath", 0|1)
FILE.CreateDirectory("folderpath")
FILE.CreateShortcut("targetpath", "lnkpath", "desc", "params", "iconpath", iconindex)
FILE.Delete("path")
FILE.DeleteNoRecycle("path")
FILE.DoVerb("filepath", "action", 0|1)
FILE.EndWatchFolder(handle)
FILE.EOF(handle)
FILE.Error
FILE.Folder("path")
FILE.GetDate("path", "c|m")
FILE.GetShortPath("path")
FILE.IsFolder("path")
FILE.Ksize("path")
FILE.LastModified("path")
FILE.ListFiles("path", "0|1|2|3|4|5", pumpflag)
FILE.Move("sourcefilepath", "destinfilepath", 0|1)
FILE.Name("path")
FILE.NameType("path")
FILE.Open("path", "r|w|a")
FILE.ReadAll("path")
FILE.ReadLine(handle)
FILE.ReadString(handle)
FILE.Resolve("lnkfilepath")
FILE.Resolve("lnkfilepath", "des|wor|ico")
FILE.Restart(handle)
FILE.RunAs("userid", "password", "filepath", "cmdline", "workFolderPath")
FILE.RunAsWait("userid", "password", "filepath", "cmdline", "workFolderPath", maxwait)
FILE.RunCallBack(maxwait, "pproCommand", "filepath", "params", "workdirectory", "Min|Max|Hide|Normal")
FILE.RunWait(maxwait, "filepath", "params", "workdirectory", "Min|Max|Hide|Normal")
FILE.SetDate("path", "c|m", "yyyymmdd", "hhmmss")
FILE.SetMaxLine(n)
FILE.Size("path")
FILE.Size64("path")
FILE.Type("path")
FILE.Unload
FILE.ValidPath("path")
FILE.Verbose
FILE.Version("path")
FILE.Volume("path")
FILE.WatchFolder("path", "cmd", maxwait, "SubTree File Folder Size LastWrite Security")
FILE.WriteAll("path", "text")
FILE.WriteAll("path", "text", "a")
FILE.WriteLine(handle, string)
FILE.WriteString(handle, string)
FLOAT.Add("number1", "number2", "number1", "number1", "number1", "number1", "number1", "number1")
FLOAT.Ceiling
FLOAT.Compare
FLOAT.Display
FLOAT.DisplayDec
FLOAT.Divide
FLOAT.ForcePeriod
FLOAT.Format
FLOAT.Mul
FLOAT.Sub
FLOAT.Truncate
FLOAT.Unload
GETSYSTEMPERFORMANCEDATA.Beep(frequency, duration)
GETSYSTEMPERFORMANCEDATA.Get_Cpu_Usage
GETSYSTEMPERFORMANCEDATA.Get_Dun_Received
GETSYSTEMPERFORMANCEDATA.Get_Dun_Sent
GETSYSTEMPERFORMANCEDATA.Get_Free_Page_File
GETSYSTEMPERFORMANCEDATA.Get_Free_Physical_Memory
GETSYSTEMPERFORMANCEDATA.Get_Free_Virtual_Memory
GETSYSTEMPERFORMANCEDATA.Get_Hostname
GETSYSTEMPERFORMANCEDATA.Get_Ip_Address
GETSYSTEMPERFORMANCEDATA.Get_Total_Page_File
GETSYSTEMPERFORMANCEDATA.Get_Total_Physical_Memory
GETSYSTEMPERFORMANCEDATA.Get_Total_Virtual_Memory
GETSYSTEMPERFORMANCEDATA.Unload
INI.Check_Exists("filepath", "section", "key")
INI.Config("filepath")
INI.Confirm(0|1)
INI.Copy_Section("sourcesection", "sourcefile", "destinsection", "destinfile")
INI.Delete_Key("filepath", "section", "key")
INI.Delete_Section("filepath", "section")
INI.Enum_Keys("filepath", "section")
INI.Enum_Sections("filepath")
INI.Error_Dialog_Off()
INI.Error_Dialog_On()
INI.Get("filepath", "section", "key")
INI.Returns_Nothing()
INI.Returns_Status()
INI.Returns_Values()
INI.Set("filepath", "section", "key", "value")
INI.Unload
INI.Version
INT64.Add(n1, n2)
INT64.Compare(n1, n2)
INT64.Divide(n1, n2)
INT64.Mod(n1, n2)
INT64.Mul(n1, n2)
INT64.Sub(n1, n2)
INT64.Unload
KEYTRAP.AddEntry
KEYTRAP.Enable
KEYTRAP.GetEntry
KEYTRAP.Get"key"
KEYTRAP.GetKeyState
KEYTRAP.GetPressedKeys
KEYTRAP.GetScanCode
KEYTRAP.GetVkCode
KEYTRAP.IsEnable
KEYTRAP.ListEntry
KEYTRAP.MatchCaption
KEYTRAP.ReloadINI
KEYTRAP.Rementry
KEYTRAP.ResetKeys
KEYTRAP.ScanMode
KEYTRAP.SendKeys
KEYTRAP.SetCtrlAltDel
KEYTRAP.Trap
KEYTRAP.Unload
KEYTRAP.WaitKey
LINEINC.GetVolume
LINEINC.MuteOff
LINEINC.MuteOn
LINEINC.MuteStatus
LINEINC.SetVolume(0-100)
LINEINC.Unload
MAIL.Check_Connected()
MAIL.Check_On_Internet()
MAIL.Check_Ras_Connected()
MAIL.Clean_String("string", "chars_to_remove")
MAIL.Config("filePath_INI")
MAIL.Connect_To_Accnt("pop3server", "login", "pass", portNumber)
MAIL.Connect_To_Accnt_Threaded("pop3server", "login", "pass", portNumber)
MAIL.Decode_Mime("encodedstring", 0|1)
MAIL.Delete_Msg(msgno)
MAIL.Disconnect
MAIL.Error_Dialog_Off()
MAIL.Error_Dialog_On()
MAIL.Get_Msg_Cc(msgno)
MAIL.Get_Msg_Cc_Clean(msgno, "chars_to_remove")
MAIL.Get_Msg_Date(msgno)
MAIL.Get_Msg_Date_Deliv(msgno)
MAIL.Get_Msg_Date_Sent(msgno)
MAIL.Get_Msg_From(msgno)
MAIL.Get_Msg_From_Clean(msgno, "chars_to_remove")
MAIL.Get_Msg_Header(msgno)
MAIL.Get_Msg_Header_Field(msgno)
MAIL.Get_Msg_Id(msgno)
MAIL.Get_Msg_Popfile_Category(msgno)
MAIL.Get_Msg_Reply_To(msgno)
MAIL.Get_Msg_Reply_To_Clean(msgno, "chars_to_remove")
MAIL.Get_Msg_Size(msgno)
MAIL.Get_Msg_Subj(msgno)
MAIL.Get_Msg_Subj_Clean
MAIL.Get_Msg_To(msgno)
MAIL.Get_Msg_To_Clean(msgno, "chars_to_remove")
MAIL.Get_No_Msgs("serverip", "login", "pass")
MAIL.Get_Timeout
MAIL.Get_Total_Msg_Size
MAIL.Help
MAIL.Nop
MAIL.Retrieve(msgno)
MAIL.Retrieve_Clean(msgno, "chars_to_remove")
MAIL.Retrieve_To_File(msgno, "filepath")
MAIL.Returns_Nothing()
MAIL.Returns_Status()
MAIL.Returns_Values()
MAIL.Set_Timeout()
MAIL.Undo_Deletes
MAIL.Unload
MAIL.Use_Long_Vars
MAIL.Use_X_Vars
MAIL.Version
MAP.Capacity(mapname)
MAP.Create(size, 0|1)
MAP.Delete(mapname, "key")
MAP.DeleteAll(mapname)
MAP.Destroy(mapname)
MAP.DestroyLocal
MAP.EOF(mapname)MAP.Eof
MAP.Exists(mapname)
MAP.Get(mapname, key)
MAP.GetNext(mapname)
MAP.Length(mapname)
MAP.LocalCopy
MAP.Restart(mapname)
MAP.Set(mapname, key, "value")
MAP.SlotUsed(mapname)
MAP.Unload
MATH.ACos(x)
MATH.ASin(x)
MATH.ATan(x)
MATH.ATan2(x)
MATH.Ceil(x)
MATH.Cos(x)
MATH.Cosh(x)
MATH.Exp(x)
MATH.Floor(x)
MATH.Format(number, "e|f|g", field_of_width, decimalcount, " |r")
MATH.Int(x)
MATH.Log(x)
MATH.Log10(x)
MATH.RoundInt(x)
MATH.Sin(x)
MATH.Sinh(x)
MATH.Sqrt(x)
MATH.Tan(x)
MATH.Tanh(x)
MATH.Unload
MBM.Get_Mbm_Info(temp_sensor_index, voltage_sensor_index, fan_sensor_index)
MBM.Unload
MISCPLUGIN.Append_Clip
MISCPLUGIN.BalloonTip(iconID, "ERROR|INFORMATION|QUESTION|WARNING|iconpath", iconindex, "message", "timeout=1-30", "title=title", "icon=1|2|3")
MISCPLUGIN.Count_HardLinks("filepath")
MISCPLUGIN.Create_HardLink("filepath", "folderpath")
MISCPLUGIN.Create_Junction("folderpath", "")
MISCPLUGIN.Create_Junction("targetfolderpath", "sourcefolderpath")
MISCPLUGIN.Date_Diff
MISCPLUGIN.Date_Range
MISCPLUGIN.Dim(0|1, 1-255, 1|2|3|4, "password")
MISCPLUGIN.ElapsedTime
MISCPLUGIN.FileInfo("Attrib")
MISCPLUGIN.FileInfo("EXIF Date|Time|Cammake|Cammodel|Glash|Exp|Aper")
MISCPLUGIN.FileInfo("Modified|Accessed|Created|ModifiedDate|AccessedDate|CreatedDate|ModifiedTime|AccessedTime|CreatedTime")
MISCPLUGIN.FileInfo("Width|Height|Wxh")
MISCPLUGIN.FileInfo("ShortName|Unc")
MISCPLUGIN.FileInfo("Size|Size:k|Size:m|Size:g|GolderSize")
MISCPLUGIN.Get_Clipboard
MISCPLUGIN.Get_IP("hostname")
MISCPLUGIN.Get_SystemDate
MISCPLUGIN.Get_UserName()
MISCPLUGIN.Get_UserName("ipaddress", timeout)
MISCPLUGIN.Get_WindowText("caption", childnumber, "toclip|win=vis|win=hid|win=all|pump=1|Sep=x")
MISCPLUGIN.GetChHandle("caption", childindex)
MISCPLUGIN.GetFocus(["1|2|3|4"])
MISCPLUGIN.GetIndNum("handle")
MISCPLUGIN.Is_Alpha("string")
MISCPLUGIN.Is_AlphaNum("string")
MISCPLUGIN.Is_ASCII("string")
MISCPLUGIN.Is_ChEnable("caption", "I=index|H=handle|L=label")
MISCPLUGIN.Is_ControlChar("string")
MISCPLUGIN.Is_HexDigit("string")
MISCPLUGIN.Is_Int("string")
MISCPLUGIN.Is_LowerCase("string")
MISCPLUGIN.Is_LU("string")
MISCPLUGIN.Is_LUD("string")
MISCPLUGIN.Is_Printable("string")
MISCPLUGIN.Is_PrintableSpace("string")
MISCPLUGIN.Is_Punct("string")
MISCPLUGIN.Is_TextInWin("caption", "text", "win=vis|win=hid|win=all")
MISCPLUGIN.Is_UpperCase("string")
MISCPLUGIN.Is_WsChar("string")
MISCPLUGIN.MessageBox(1|2|3|4|5, "button1label", "button2label", ... "button5label", "OnTop=0", "InTaskbar=1", "Par=xxx", "Timeout=x", "Wave=filepath", "Cap=Caption", "Icon=filepath", "Msg=text")
MISCPLUGIN.MinAll(["0|1"])
MISCPLUGIN.NewFile("filepath")
MISCPLUGIN.ReminderUI("PProCommand")
MISCPLUGIN.RunDialog()
MISCPLUGIN.Set_ActWnd("caption")
MISCPLUGIN.Set_FileAttrib("+A|-A|+H|-H|+R|-R|+S|-S")
MISCPLUGIN.Set_SystemDate
MISCPLUGIN.Set_TaskBar("0|1")
MISCPLUGIN.SetFocus("caption", index|"hwnd=xxxxx")
MISCPLUGIN.Show_Menu("title", "Item1\nItem2\nsep\nSUB=xxx\nSubItem1\nENDSUB")
MISCPLUGIN.Sleep(timeout_ms)
MISCPLUGIN.TempFileName("prefix", "folderpath")
MISCPLUGIN.Touch_FileTime("mca", "yyyymmdd", "hhmmss")
MISCPLUGIN.Unload
MISCPLUGIN.Wait_Window("caption", timeout_ms, 0|1, "childcontrollabel")
MOUSETRAP.AddEntry
MOUSETRAP.Enable
MOUSETRAP.GetCursorType
MOUSETRAP.GetEntry
MOUSETRAP.IsEnable
MOUSETRAP.IsMonoColor
MOUSETRAP.ReloadINI
MOUSETRAP.Rementry
MOUSETRAP.Unload
MP3PLUGIN.GetAlbum
MP3PLUGIN.GetArtist
MP3PLUGIN.GetComments
MP3PLUGIN.GetTitle
MP3PLUGIN.GetTrack
MP3PLUGIN.SetAlbum
MP3PLUGIN.SetArtist
MP3PLUGIN.SetComments
MP3PLUGIN.SetTitle
MP3PLUGIN.SetTrack
MP3PLUGIN.Unload
MSGBOX.Display("message", "caption", "|OKCANCEL|ABORTRETRYIGNORE|YESNOCANCEL|YESNO|RETRYCANCEL ERROR|QUESTION|WARNING|INFORMATION BUTTON1|BUTTON2|BUTTON3")
MSGBOX.Unload
NET.Check_On_Internet()
NET.Check_Ras_Connected()
NET.Error_Dialog_Off()
NET.Error_Dialog_On()
NET.Fetch_Webpage("url", "proxyserveraddress", "proxyport", "fields", "POST_data", "successcommand", "unsuccesscommand")
NET.Get_Host_Name("ipaddress")
NET.Get_Ip_Addr("hostname")
NET.Get_Local_Ip_Addr()
NET.Get_Ping_Result()
NET.Get_Probe_Result()
NET.Get_Webpage_Result()
NET.Get_Webpage_Size
NET.Page_Size_So_Far
NET.Ping("address", wait, size, count, interval, TTL)
NET.Ping_Bloviation_Off()
NET.Ping_Bloviation_On()
NET.Ping_Threaded("address", wait, size, count, interval, TTL, "successcommand", "unsuccesscommand")
NET.Probe_Port("address", port, "successcommand", "unsuccesscommand")
NET.Save_Webpage_To_File("url", "filepth", "proxyserveraddress", proxyport, "fields", "POST_data", "successcommand", "unsuccesscommand")
NET.Stop_Ping()
NET.Stop_Probe()
NET.Stop_Webpage()
NET.Unload
NET.URL_Encode("string")
NOTE.AppendLine(notehandle, "text")
NOTE.AppendText(notehandle, "text")
NOTE.Bottom(notehandle)
NOTE.CharFromLine(notehandle, lineindex)
NOTE.Close(notehandle)
NOTE.Cycle
NOTE.Delete(notehandle)
NOTE.Find(notehandle, "text", start, 0|1, 0|1)
NOTE.GetBackColor(notehandle)
NOTE.GetCaretLine(notehandle)
NOTE.GetCaretPos(notehandle)
NOTE.GetCategory(notehandle)
NOTE.GetLine(notehandle, lineindex)
NOTE.GetSel(notehandle)
NOTE.GetSel1(notehandle)
NOTE.GetSel2(notehandle)
NOTE.GetText(notehandle, cindex1, cindex2)
NOTE.GetTextColor(notehandle)
NOTE.HandleList("category", 0|1)
NOTE.Height(notehandle)
NOTE.InsertLine(notehandle, lineindex, "text")
NOTE.InsertText(notehandle, "text", cindex)
NOTE.IsOnTop(notehandle)
NOTE.IsRolled(notehandle)
NOTE.IsValid(notehandle)
NOTE.IsVisible(notehandle)
NOTE.Left(notehandle)
NOTE.Length(notehandle)
NOTE.LineCount(notehandle)
NOTE.LineFromChar(notehandle, cindex)
NOTE.Move(notehandle, left, top)
NOTE.Ontop(notehandle, |0|1)
NOTE.Open("filepath", "keywords", 0|1|2)
NOTE.Raise
NOTE.ReplaceLine(notehandle, "text", lineindex)
NOTE.ReplaceSel(notehandle, "text")
NOTE.ReplaceText(notehandle, "text", cindex1, cindex2)
NOTE.Right(notehandle)
NOTE.Roll(notehandle, |0|1)
NOTE.ScrollCaret(notehandle)
NOTE.ScrollTo(notehandle, "char", lineindex)
NOTE.Search
NOTE.SetBackColor(notehandle, 0-255, 0-255, 0-255)
NOTE.SetBackColor(notehandle, "0-255 0-255 0-255")
NOTE.SetBackColor(notehandle, RGBnumber)
NOTE.SetCategory(notehandle, "category")
NOTE.SetSel(notehandle, cindex1, cindex2)
NOTE.SetTab(notehandle, tabpos)
NOTE.SetText(notehandle, "text")
NOTE.SetTextColor(notehandle, 0-255, 0-255, 0-255)
NOTE.SetTextColor(notehandle, "0-255 0-255 0-255")
NOTE.SetTextColor(notehandle, RGBnumber)
NOTE.Show(notehandle, |0|1)
NOTE.Size(notehandle, width, height)
NOTE.Top(notehandle)
NOTE.Unload
NOTE.VScroll(notehandle, -2|-1|0|1|2)
NOTE.Width(notehandle)
NOTES.Open("text")
NOTES.Open("text", "Top|Back|...")
NOTES.Cycle
NOTES.Raise
NOTES.Unload
ODBC_Status
ODBC_Vector
ODBC_Col_Nmaes
ODBC_No_Rows
ODBC.BeginTransaction
ODBC.Close()
ODBC.Commit
ODBC.Config("filePath_INI")
ODBC.Error_Dialog_Off()
ODBC.Error_Dialog_On()
ODBC.Get_2D_Vector("SQL_statement", "vector_row_count")
ODBC.Get_Vector("SQL_statement", "column_names", "variable_name_for_vector")
ODBC.Get_Vectors("SQL_statement", "column_names")
ODBC.Open("dsn")
ODBC.Open("Text|dBase|Excel|Access|...", "database", "username", "password")
ODBC.Returns_Nothing()
ODBC.Returns_Status()
ODBC.Returns_Values()
ODBC.Rollback
ODBC.Sql_Stmt
ODBC.Unload
ODBC.Use_Long_Vars
ODBC.Use_X_Vars
ODBC.Version
OPTIONS.Case_Sensitive_Off
OPTIONS.Case_Sensitive_On
OPTIONS.Config("filepath")
OPTIONS.Error_Dialog_Off
OPTIONS.Error_Dialog_On
OPTIONS.Eval_Flat_File("options_syntax_file", "command_line_to_parse")
OPTIONS.Eval_INI_File("options_syntax_ini_file", "command_line_to_parse")
OPTIONS.Eval_String("options_syntax_string", "command_line_to_parse")
OPTIONS.Eval_Vector("options_syntax_vector", "command_line_to_parse")
OPTIONS.Set_Delimiter("delimiter_character")
OPTIONS.Unload
OSD.Hide
OSD.Show("text", "timems", "fontsize", "fontname", "location", "fontcolor")
OSD.Unload
PERF.AutoUpdate(0|250-5000)
PERF.Browse(depth_count, "|multi")
PERF.CloseCounter("perfCounterName")
PERF.DefaultDisplayValue("value")
PERF.ExpandSF("perfCounterName")
PERF.ForcePeriod(0|1)
PERF.Get("CPU", decimalCount, minChars)
PERF.Get("Mbytes", decimalCount, minChars)
PERF.Get("FileRead", decimalCount, minChars)
PERF.Get("FileWrite", decimalCount, minChars)
PERF.Get("NetBytes", decimalCount, minChars)
PERF.Get("perfCounterName", decimalCount, minChars)
PERF.GetMax("perfCounterName", decimalCount, minChars)
PERF.GetMean("perfCounterName", decimalCount, minChars)
PERF.GetMin("perfCounterName", decimalCount, minChars)
PERF.GetLastMessage()
PERF.GetOnce("perfCounterName", decimalCount, minChars, wait_ms)
PERF.IsDefaultDisplayValue("value")
PERF.NoValueYet
PERF.NumCPU
PERF.ReadIni("filePath_INI")
PERF.RefreshCounters
PERF.ResetStatistics("perfCounterName")
PERF.Verbose(0|1|2|3)
PERF.Weight(1-25)
PIPE.Config("filePath_INI")
PIPE.Create("name")
PIPE.Destroy(pipehandle)
PIPE.Error_Dialog_Off()
PIPE.Error_Dialog_On()
PIPE.Get_Computer_Names()
PIPE.Get_IP_Addr("machinename")
PIPE.Listen_Off(pipehandle)
PIPE.Listen_On(pipehandle, "name", 0|1, var_name, vec_handle, binary_handle, unicode_handle, "static_var_script", "command_to_call",  0|1,  0|1, "markers",  a|1, "dead_pipe_cmd", "dead_pipe_folder")
PIPE.Release(pipehandle)
PIPE.Returns_Nothing()
PIPE.Returns_Status()
PIPE.Returns_Values()
PIPE.Send_To(pipehandle, binaryhandle|unicodehandle|data, "machinename", "pipename", 0|1)
POP3.Check_Service_Complete
POP3.Clean_String
POP3.Config
POP3.Connect_To_Accnt
POP3.Decode_Mime
POP3.Delete_Msg
POP3.Disconnect
POP3.Error_Dialog_Off
POP3.Error_Dialog_On
POP3.Get_Last_Result
POP3.Get_Msg_Property
POP3.Get_Msg_Property_Clean
POP3.Get_No_Msgs
POP3.Get_Total_Msg_Size
POP3.Help
POP3.Returns_Nothing
POP3.Returns_Status
POP3.Returns_Values
POP3.Set_Proxy
POP3.Set_Timeout
POP3.Undo_Deletes
POP3.Unload
POP3.Version
POP3SSL.Check_Service_Complete
POP3SSL.Clean_String
POP3SSL.Config
POP3SSL.Connect_To_Accnt
POP3SSL.Decode_Mime
POP3SSL.Delete_Msg
POP3SSL.Disconnect
POP3SSL.Error_Dialog_Off
POP3SSL.Error_Dialog_On
POP3SSL.Get_Last_Result
POP3SSL.Get_Msg_Property
POP3SSL.Get_Msg_Property_Clean
POP3SSL.Get_No_Msgs
POP3SSL.Get_Total_Msg_Size
POP3SSL.Help
POP3SSL.Returns_Nothing
POP3SSL.Returns_Status
POP3SSL.Returns_Values
POP3SSL.Set_Proxy
POP3SSL.Set_Timeout
POP3SSL.Undo_Deletes
POP3SSL.Unload
POP3SSL.Version
PPGEORGY.Clpbrd_E2r
PPGEORGY.Clpbrd_R2e
PPGEORGY.Clpbrd_Reverse
PPGEORGY.Clpbrd_To_English
PPGEORGY.Clpbrd_To_Lower
PPGEORGY.Clpbrd_To_Russian
PPGEORGY.Clpbrd_To_Unicode
PPGEORGY.Clpbrd_To_Upper
PPGEORGY.Get_Input_Locale("kkkk:s, kkkk:s, ....)
PPGEORGY.Unload
PPSERVICES.Start
PPSERVICES.Version
PPSERVICES.Last_String_Result
PPSERVICES.Last_Numeric_Result
PPSKYPE.Attach("scriptfilename")
PPSKYPE.Detach
PPSKYPE.SendCommand("skypecommand")
PPROICL.PproICL_LoadIconA
PPROICL.PproICL_LoadIconW
PPROICL.Unload
PROG.Create_Shortcut("filePath_LNK", "targetPath", "workFolder", "description", "arguments", "iconPath", iconIndex)
PROG.Error_Dialog_Off()
PROG.Error_Dialog_On()
PROG.Get_EXE_Type("filePath_EXE_BAT_COM")
PROG.Get_Icon
PROG.Get_No_Icons
PROG.Get_Shortcut_Args("filePath_LNK")
PROG.Get_Shortcut_Description("filePath_LNK")
PROG.Get_Shortcut_Path
PROG.Get_Shortcut_StartDir("filePath_LNK")
PROG.Get_Shortcut_Target("filePath_LNK")
PROG.Search_Path("fileName")
PROG.Set_Shortcut_Arguments("filePath_LNK", "args")
PROG.Set_Shortcut_Description("filePath_LNK", "description")
PROG.Set_Shortcut_StartDir("filePath_LNK", "folderPath")
PROG.Set_Shortcut_Target("filePath_LNK", "targetPath")
PROG.Unload
REG.Close
REG.Config("filePath_INI")
REG.Create_Key("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath")
REG.Delete_Key(["[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath")
REG.Delete_Value("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
REG.Enum_Key("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath")
REG.Enum_Keys("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath")
REG.Enum_Value("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath")
REG.Enum_Values("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath")
REG.Error_Dialog_Off()
REG.Error_Dialog_On()
REG.Expand_String("string")
REG.Get_Binary("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
REG.Get_Binary("varname", "[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
REG.Get_Dword(["[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
REG.Get_Multi_String(vector, "[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
REG.Get_Multi_String_Element(vector, "[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
REG.Get_String("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
REG.Get_Value("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
REG.Help
REG.Returns_Nothing()
REG.Returns_Status()
REG.Returns_Values()
REG.Set_Binary("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename", "value")
REG.Set_Delimiter("char")
REG.Set_DWord("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename", "value")
REG.Set_Multi_String(vector, "[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename")
REG.Set_String("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename", "value")
REG.Set_UnExp_Str("[\\MachineName\]HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG|HKEY_DYN_DATA", "keypath", "valuename", "value")
REG.Unload
REG.Use_Long_Vars
REG.Use_X_Vars
REG.Version
REGEX.Match
REGEX.MatchG
REGEX.PcreVersion
REGEX.Replace
REGEX.ReplaceG
REGEX.Rg
REGEX.Unload
REGEX.Version
SAMPLE.Echo
SAMPLE.Join
SAMPLE.OkCancel
SAMPLE.ShowMenu
SAMPLE.Swapvar
SAMPLE.Unload
SMTP.Add_Attachment("recipient", "encodingCharset", "contentType", 0|1)
SMTP.Add_Recipient("recipient", "To|CC|BCC")
SMTP.Check_Service_Complete()
SMTP.Clear_Msg
SMTP.Config("filePath_INI")
SMTP.Connect_To_Accnt("hostname", "username", "password", port, 0|1, "None|Socks4|Socks5|HTTP", bDNSLookup, "boundIP", "successCmd", "failCmd")
SMTP.Create_Msg("from", "subject", "text", 0|1, "replyTo", "name", "encodingCharset", 0|1, "priority", "Xmailer")
SMTP.Disconnect("successCmd", "failCmd")
SMTP.Error_Dialog_Off()
SMTP.Error_Dialog_On()
SMTP.Help
SMTP.Send_Msg("successCmd", "failCmd")
SMTP.Set_Connection_Properties("None|Plain|Encoded|Cram|NTLM", 0|1, "boundIP")
SMTP.Set_Msg_Text("text", 0|1)
SMTP.Set_Proxy("None|Socks4|Socks5|HTTP", parameters)
SMTP.Set_Timeout(timeout_ms)
SMTP.Unload
SMTP.Version
SQLL_Status
SQLL_Vector
SQLL_Col_Nmaes
SQLL_No_Rows
SQLL.Close()
SQLL.Config("filePath_INI")
SQLL.Error_Dialog_Off()
SQLL.Error_Dialog_On()
SQLL.Get_2D_Vector("SQL_statement", "vector_row_count")
SQLL.Get_Vector("SQL_statemen", "variable_name_for_vector")
SQLL.Get_Vectors("SQL_statement", "vector_row_count")
SQLL.Open("filepath")
SQLL.Returns_Nothing()
SQLL.Returns_Status()
SQLL.Returns_Values()
SQLL.Sql_Stmt
SQLL.Unload
SQLL.Use_Long_Vars
SQLL.Use_X_Vars
SQLL.Version
SYSTEMMETER.ShowHide
SYSTEMMETER.Start
SYSTEMMETER.Unload
UNICODE.Append
UNICODE.Change_Case
UNICODE.Clip_Append
UNICODE.Clip_Clear
UNICODE.Clip_Copy
UNICODE.Clip_Cut
UNICODE.Clip_Fromfile
UNICODE.Clip_Fromfileappend
UNICODE.Clip_Get
UNICODE.Clip_Length
UNICODE.Clip_Paste
UNICODE.Clip_Set
UNICODE.Clip_Setpaste
UNICODE.Clip_Tofile
UNICODE.Clip_Tofileappend
UNICODE.Compare
UNICODE.Convert_To_Ascii
UNICODE.Create_From_Utf8
UNICODE.Decode
UNICODE.Encode
UNICODE.Env
UNICODE.File_AllFiles
UNICODE.File_Attrib
UNICODE.File_Close(handle)
UNICODE.File_CloseAll
UNICODE.File_Copy("sourcefilepath", "destinpath", 0|1)
UNICODE.File_CreateShortcut("targetpath", "lnkpath", "desc", "params", "iconpath", iconindex)
UNICODE.File_Delete("filepath")
UNICODE.File_DeleteNoRecycle("filepath")
UNICODE.File_EndWatchFolder
UNICODE.File_EOF
UNICODE.File_Folder
UNICODE.File_GetDate
UNICODE.File_GetShortPath
UNICODE.File_IsFolder
UNICODE.File_Ksize
UNICODE.File_LastModified
UNICODE.File_ListFiles
UNICODE.File_Move
UNICODE.File_Name
UNICODE.File_NameType
UNICODE.File_Open
UNICODE.File_ReadAll
UNICODE.File_ReadLine
UNICODE.File_ReadString
UNICODE.File_Resolve
UNICODE.File_Restart
UNICODE.File_RunAs
UNICODE.File_RunAswait
UNICODE.File_RunCallBack
UNICODE.File_RunWait
UNICODE.File_SetDate
UNICODE.File_SetMaxLine
UNICODE.File_Size
UNICODE.File_Size64
UNICODE.File_Type
UNICODE.File_Verbose
UNICODE.File_Version
UNICODE.File_Volume
UNICODE.File_Watchfolder
UNICODE.File_Writeall
UNICODE.File_Writeline
UNICODE.File_Writestring
UNICODE.Fill
UNICODE.GetUnicodeServices
UNICODE.Index
UNICODE.InputDialog
UNICODE.Join
UNICODE.Length
UNICODE.Line
UNICODE.LocalCopy
UNICODE.Messagebox
UNICODE.New
UNICODE.Release
UNICODE.Release_All
UNICODE.ReleaseLocal
UNICODE.Remove
UNICODE.Repeat
UNICODE.ReplaceChars
UNICODE.RevIndex
UNICODE.Str_Coll
UNICODE.Str_Icoll
UNICODE.Str_Max
UNICODE.Str_Min
UNICODE.Str_Select
UNICODE.Translate
UNICODE.Unload
UNICODE.ValidPath("path")
UNICODE.Version
UNICODE.Word
VARS.Chars_To_Hex_Encode("characterSelection")
VARS.Config("filePath_INI")
VARS.Error_Dialog_Off()
VARS.Error_Dialog_On()
VARS.Restore("tag", 0|1, "filePath_INI")
VARS.Restore_Var("variableName", "tag", 0|1, "filePath_INI")
VARS.Save("section", 0|1, 0|1|2|3, 0|1|2|3, "filePath_INI")
VARS.Save_Var("variableName", "section", "filePath_INI")
VARS.Unload
VARS.Version
VEC.BinIndex
VEC.BinInsert(v, value)
VEC.BinSearch(v, value)
VEC.Capacity(v)
VEC.Create(capacity, growth, minsize)
VEC.Create2D(rows, columns, minsize)
VEC.CreateFromLines("stringlines", growth, minsize)
VEC.CreateFromWords("stringwords", dchars, growth, minsize)
VEC.Delete(v, index)
VEC.DeleteAll(v)
VEC.Destroy(v)
VEC.DestroyLocal
VEC.DoubleSort(v1, v2, 0|1, 0|1)
VEC.DoubleSortString(v1, v2, 0|1, 0|1)
VEC.Exists(v)
VEC.Get(v, index)
VEC.GetBase
VEC.GetVecServices
VEC.Grow(v, growcount)
VEC.Insert(v, index, value)
VEC.InsertNoGrow(v, index, value)
VEC.Length(v)
VEC.LocalCopy(Arg(1))
VEC.MakeLines(v)
VEC.MakeWords(v, "delimiter")
VEC.MaxVecs(n)
VEC.Set(v, index, value)
VEC.ShowMenu(v, maxlabelchars, 0|1|2|3|4, 0|1, bgcolor, xoffset, yoffset)
VEC.Sort(v, 0|1, 0|1)
VEC.SortString(v, 0|1, 0|1)
VEC.Swap(v, index1, index2)
VEC.Unload
WIN.Active
WIN.Area(x, y)
WIN.Back("captionlist"|handle)
WIN.Beep(freq, dur)
WIN.Bottom("captionlist"|handle)
WIN.Caption("captionlist"|handle)
WIN.CaptionListAss("captionlist"|handle)
WIN.ChildHandleList("captionlist"|handle, |"c=classname"|"windowtext")
WIN.ChildTextByID("captionlist"|handle, id)
WIN.ChildTextByIndex("captionlist"|handle, childindex)
WIN.Class("captionlist"|handle)
WIN.ClientHeight("captionlist"|handle)
WIN.ClientToScreen(child_window_handle, x, y)
WIN.ClientWidth("captionlist"|handle)
WIN.Close("captionlist"|handle)
WIN.CloseForce("captionlist"|handle)
WIN.Crosshair(x, y)
WIN.Debug
WIN.DebugShow
WIN.DisplayNameFromHandle(handle, 0|1|2)
WIN.DisplayRectFromName("Main|Sec|0-9, 0|1)
WIN.DisplayRectFromPoint(x, y, 0|1, 0|1|2)
WIN.DropFile("captionlist"|handle, "filepath")
WIN.Enable("captionlist"|handle, 0|1)
WIN.Enabled("captionlist"|handle)
WIN.ExeName("captionlist"|handle)
WIN.ExePath("captionlist"|handle)
WIN.Exists(handle)
WIN.Flash("captionlist"|handle)
WIN.Flash("captionlist"|handle, flashCount)
WIN.FullScreen(1)
WIN.FullScreen("captionlist"|handle)
WIN.GetClientRect("captionlist"|handle)
WIN.GetDesktopName()
WIN.GetDisplayRect(0-9, 0|1)
WIN.GetFocus()
WIN.GetLanguage("captionlist"|handle)
WIN.GetPixel(x, y)
WIN.GetPixel1(x, y)
WIN.GetPrinters()
WIN.GetProcessID(handle)
WIN.GetRect("captionlist"|handle)
WIN.GetSysColor(systemindex)
WIN.GetSystemMetrics("string")
WIN.GetText(handle)
WIN.GetWorkarea()
WIN.GetWorkingDir("captionlist"|handle)
WIN.Handle("captionlist")
WIN.Handle("captionlist", "windowText")
WIN.HandleFromID("captionlist", id)
WIN.HandleFromIndex("captionlist", childindex)
WIN.HandleFromPoint(x, y)
WIN.HandleList("captionlist", |1|2)
WIN.HasCaption("captionlist"|handle)
WIN.Height("captionlist"|handle)
WIN.Hex(number)
WIN.Hide("captionlist"|handle)
WIN.IDFromHandle(handle)
WIN.IndexFromHandle(handle)
WIN.IsDBCSLeadByte("string")
WIN.Keys("keys")
WIN.LastMouse
WIN.Left("captionlist"|handle)
WIN.MainHandleFromPoint(x, y)
WIN.MainUnder
WIN.MakeRect(left, top, right, bottom)
WIN.MapPoints(rect1, rect2, ptsIn)
WIN.Matches(handle, captionlist)
WIN.Maxable("captionlist"|handle)
WIN.Maximize("captionlist"|handle)
WIN.Maxxed("captionlist"|handle)
WIN.Menu("captionlist", "Hidden|TrayMin|OnlyHidden")
WIN.Message("message", "title")
WIN.MessageBeep("OK|Hand|Exclamation|Question")
WIN.Minable("captionlist"|handle)
WIN.Minimize("captionlist"|handle)
WIN.Minned("captionlist"|handle)
WIN.Move("captionlist"|handle, "x y")
WIN.Move("captionlist"|handle, x, y)
WIN.MoveToDisplay("captionlist"|handle, "Main|Sec|0-9)
WIN.OnTop("captionlist"|handle)
WIN.OnTop("captionlist"|handle, 0|1)
WIN.Owner(handle)
WIN.Parent(handle)
WIN.Parent(handle, 1)
WIN.PostMessage("captionlist"|handle, "msg", wp, lp)
WIN.RectToFile("left top right bottom", "filepath", resizeWidth, resizeHeight)
WIN.ResetFocus(maxwait_ms)
WIN.Resizable("captionlist"|handle)
WIN.Restore("captionlist"|handle)
WIN.Right("captionlist"|handle)
WIN.Rolled("captionlist"|handle)
WIN.RollUp("captionlist"|handle)
WIN.ScreenToClient(handle, x, y)
WIN.SendCopyData("captionlist"|handle, "dword", "string")
WIN.SendKeys("keys")
WIN.SendMessage("captionlist"|handle, "msg", wp, lp)
WIN.SendMessageStr("captionlist"|handle, "msg", wp, str)
WIN.SendMessageStrRemote("captionlist"|handle, "msg", wp, str)
WIN.SetDebug
WIN.SetDefaultPrinter("printer")
WIN.SetFocus(handle)
WIN.SetPos10000("captionlist"|handle, "s|w", left, top, right, bottom)
WIN.SetPreviousFocus
WIN.SetRect("captionlist"|handle, "left top right bottom")
WIN.SetSysColor(systemindex, rgb)
WIN.SetText("captionlist"|handle, "newtext")
WIN.SetTool("captionlist"|handle, -1|0|1)
WIN.SetWorkArea()
WIN.SetWorkArea("left top right bottom")
WIN.SetWorkArea(left, top, right, bottom)
WIN.SetWorkingDir("path")
WIN.Show("captionlist"|handle, |1|2|3)
WIN.ShowNA("captionlist"|handle)
WIN.Size("captionlist"|handle, "w h")
WIN.Size("captionlist"|handle, w, h)
WIN.TerminateProcess(processID)
WIN.ToFile("captionlist"|handle, "filepath", resizeWidth, resizeHeight, 0|1)
WIN.ToolWindow("captionlist"|handle)
WIN.Top("captionlist"|handle)
WIN.TopMost("captionlist"|handle)
WIN.Trans("captionlist"|handle, 0-295)
WIN.Trans("captionlist"|handle, -0-295)
WIN.TransMouse("captionlist"|handle, 0-295)
WIN.TransMouse("captionlist"|handle, -0-295)
WIN.TrayMin("captionlist"|handle)
WIN.TrayMinned("captionlist"|handle)
WIN.Under
WIN.Unload
WIN.Visible("captionlist"|handle)
WIN.VisibleOwner(handle)
WIN.VScreenHeight
WIN.VScreenLeft
WIN.VScreenTop
WIN.VScreenWidth
WIN.Width("captionlist"|handle)
WINAMPC.Add_File_To_Plist
WINAMPC.Add_Track_As_Bookmark
WINAMPC.Autoload_Preset_Dialog
WINAMPC.Autoload_Save_Preset_Dialog
WINAMPC.Block_Minibrowser
WINAMPC.Caption
WINAMPC.Change_Directory
WINAMPC.Close_Winamp
WINAMPC.Configure_Visual_Plugin
WINAMPC.Delete_Autoload_Preset_Dialog
WINAMPC.Delete_Plist
WINAMPC.Delete_Preset_Dialog
WINAMPC.Display_Elapsed_Time
WINAMPC.Display_Remaining_Time
WINAMPC.End_Of_Plist
WINAMPC.Execute_Visual_Plugin
WINAMPC.File_Open_Dialog
WINAMPC.Flush_Plist_Cache_Buffer
WINAMPC.Forward_5sec
WINAMPC.Get_Bitrate
WINAMPC.Get_Eq_Data
WINAMPC.Get_Eq_Data63
WINAMPC.Get_Length
WINAMPC.Get_Net_Status
WINAMPC.Get_Number_Of_Channels
WINAMPC.Get_Playback_Status
WINAMPC.Get_Plist_Length
WINAMPC.Get_Plist_Position
WINAMPC.Get_Plist_Position1
WINAMPC.Get_Position
WINAMPC.Get_Position_In_Sec
WINAMPC.Get_Repeat
WINAMPC.Get_Samplerate
WINAMPC.Get_Shuffle
WINAMPC.Get_Version
WINAMPC.Get_Version_Hex
WINAMPC.Jump_To_File_Dialog
WINAMPC.Jump_To_Time
WINAMPC.Jump_To_Time_Dialog
WINAMPC.Load_Default_Preset
WINAMPC.Load_Preset_Dialog
WINAMPC.Load_Preset_From_Eq
WINAMPC.Min_Restore
WINAMPC.Minimize
WINAMPC.Move_10_Tracks_Back
WINAMPC.Next_Track
WINAMPC.Open_About_Box
WINAMPC.Open_File_Info_Box
WINAMPC.Open_Preferences
WINAMPC.Open_Skin_Selector
WINAMPC.Open_Url_Dialog
WINAMPC.Open_Visual_Options
WINAMPC.Open_Visual_Plugin_Options
WINAMPC.Pause_Unpause
WINAMPC.Play_Any_Audio_Cd
WINAMPC.Play_Audio_Cd
WINAMPC.Play_Button
WINAMPC.Play_Selected
WINAMPC.Previous_Track
WINAMPC.Reload_Current_Skin
WINAMPC.Repeat_Off
WINAMPC.Repeat_On
WINAMPC.Restart_Winamp
WINAMPC.Restore
WINAMPC.Rewind_5sec
WINAMPC.Save_Preset_Dialog
WINAMPC.Save_Preset_To_Eqf
WINAMPC.Set_Eq_Data
WINAMPC.Set_Eq_Data63
WINAMPC.Set_Panning
WINAMPC.Set_Panning132
WINAMPC.Set_Plist_Position
WINAMPC.Set_Volume
WINAMPC.Set_Volume255
WINAMPC.Show_Edit_Bookmarks
WINAMPC.Shuffle_Off
WINAMPC.Shuffle_On
WINAMPC.Song_And_Number
WINAMPC.Song_Name
WINAMPC.Start_Of_Plist
WINAMPC.Stop
WINAMPC.Stop_After_Current
WINAMPC.Stop_With_Fadeout
WINAMPC.Toggle_Doublesize
WINAMPC.Toggle_Easymove
WINAMPC.Toggle_Eq_Window
WINAMPC.Toggle_Main_Window
WINAMPC.Toggle_Minibrowser
WINAMPC.Toggle_On_Top
WINAMPC.Toggle_Plist_Window
WINAMPC.Toggle_Plist_Windowshade
WINAMPC.Toggle_Repeat
WINAMPC.Toggle_Shuffle
WINAMPC.Toggle_Title_Scrolling
WINAMPC.Toggle_Windowshade
WINAMPC.Unblock_Minibrowser
WINAMPC.Unload
WINAMPC.Update_Info
WINAMPC.Volume_Down
WINAMPC.Volume_Up
XUTILS.DisableIdleTimers()
XUTILS.DisableIdleTimers(1)
XUTILS.EjectCD("driveletter")
XUTILS.EnableIdleTimers()
XUTILS.EnableIdleTimers(1)
XUTILS.LoadCD("driveletter")
XUTILS.RunAs("filePath", "args", "username", "workFolderPath")
XUTILS.ScrollDown
XUTILS.ScrollUp
XUTILS.SuDo("filePath", "args", "workFolderPath")
XUTILS.Unload
ZA.Get_In
ZA.Get_Lock
ZA.Get_Out
ZA.Switch_Lock
ZA.Unload

; *** ACTIONS FOR COMMANDS/FUNCTIONS
AutoScroll
Caption
CaptionUnder
ColSep
CommandLine
Folder
Format
Position
Wheel

; *** OPERATORS
.
,
and
or
xor
not
eq
ne
ge
gt
le
lt
!=
!==
||
&&
<
<=
>
>=
^
^^
=
==
===
++
